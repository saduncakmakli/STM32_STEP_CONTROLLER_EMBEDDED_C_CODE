
DESIGN PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080f0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008284  08008284  00018284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082bc  080082bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080082bc  080082bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082bc  080082bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082bc  080082bc  000182bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082c0  080082c0  000182c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080082c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  2000000c  080082d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  080082d0  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015872  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c19  00000000  00000000  000358ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a8  00000000  00000000  000384c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001180  00000000  00000000  00039770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022e72  00000000  00000000  0003a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e69  00000000  00000000  0005d762  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6080  00000000  00000000  0006e5cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014464b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f5c  00000000  00000000  001446c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800826c 	.word	0x0800826c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800826c 	.word	0x0800826c

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000312:	f1a4 0401 	sub.w	r4, r4, #1
 8000316:	d1e9      	bne.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2uiz>:
 8000970:	004a      	lsls	r2, r1, #1
 8000972:	d211      	bcs.n	8000998 <__aeabi_d2uiz+0x28>
 8000974:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000978:	d211      	bcs.n	800099e <__aeabi_d2uiz+0x2e>
 800097a:	d50d      	bpl.n	8000998 <__aeabi_d2uiz+0x28>
 800097c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000980:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000984:	d40e      	bmi.n	80009a4 <__aeabi_d2uiz+0x34>
 8000986:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d102      	bne.n	80009aa <__aeabi_d2uiz+0x3a>
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr

080009b0 <delay_us>:
    ITM_SendChar((*ptr++));
  return len;
}

void delay_us (uint16_t us)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <delay_us+0x2c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80009c2:	bf00      	nop
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <delay_us+0x2c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3f9      	bcc.n	80009c4 <delay_us+0x14>
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	20000164 	.word	0x20000164

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e4:	f000 fcc2 	bl	800136c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e8:	f000 f81a 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ec:	f000 f9a4 	bl	8000d38 <MX_GPIO_Init>
  MX_DMA_Init();
 80009f0:	f000 f984 	bl	8000cfc <MX_DMA_Init>
  MX_RTC_Init();
 80009f4:	f000 f8b2 	bl	8000b5c <MX_RTC_Init>
  MX_USART3_UART_Init();
 80009f8:	f000 f92a 	bl	8000c50 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80009fc:	f000 f958 	bl	8000cb0 <MX_USB_PCD_Init>
  MX_CAN_Init();
 8000a00:	f000 f878 	bl	8000af4 <MX_CAN_Init>
  MX_TIM1_Init();
 8000a04:	f000 f8d0 	bl	8000ba8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1); //Delay us için gerekli.
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <main+0x3c>)
 8000a0a:	f004 f89d 	bl	8004b48 <HAL_TIM_Base_Start>

  //HAL_UART_Receive_IT(&huart3, rx_buffer, __RECEIVE_BUFFER); //Uart Receive IT Ayarı
  //UART_SET_RECEIVE_DMA(&huart3);
  UART_SET_RECEIVE_DMA();
 8000a0e:	f006 fe1d 	bl	800764c <UART_SET_RECEIVE_DMA>
  DEFAULT_SETTINGS();
 8000a12:	f007 f98f 	bl	8007d34 <DEFAULT_SETTINGS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  STEP_MOTOR_CONTROL();
 8000a16:	f007 f9a9 	bl	8007d6c <STEP_MOTOR_CONTROL>
 8000a1a:	e7fc      	b.n	8000a16 <main+0x36>
 8000a1c:	20000164 	.word	0x20000164

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b0a6      	sub	sp, #152	; 0x98
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a2a:	2228      	movs	r2, #40	; 0x28
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f007 fc14 	bl	800825c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2258      	movs	r2, #88	; 0x58
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f007 fc06 	bl	800825c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a50:	2309      	movs	r3, #9
 8000a52:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a54:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a58:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a64:	2302      	movs	r3, #2
 8000a66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a72:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 fbb9 	bl	80031fc <HAL_RCC_OscConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a90:	f000 fa54 	bl	8000f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a94:	230f      	movs	r3, #15
 8000a96:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aaa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000aae:	2102      	movs	r1, #2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 fab9 	bl	8004028 <HAL_RCC_ClockConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000abc:	f000 fa3e 	bl	8000f3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <SystemClock_Config+0xd0>)
 8000ac2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000acc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 fcdb 	bl	8004494 <HAL_RCCEx_PeriphCLKConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ae4:	f000 fa2a 	bl	8000f3c <Error_Handler>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3798      	adds	r7, #152	; 0x98
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	00031004 	.word	0x00031004

08000af4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_CAN_Init+0x60>)
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <MX_CAN_Init+0x64>)
 8000afc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_CAN_Init+0x60>)
 8000b00:	2210      	movs	r2, #16
 8000b02:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_CAN_Init+0x60>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_CAN_Init+0x60>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <MX_CAN_Init+0x60>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_CAN_Init+0x60>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <MX_CAN_Init+0x60>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_CAN_Init+0x60>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_CAN_Init+0x60>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_CAN_Init+0x60>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_CAN_Init+0x60>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_CAN_Init+0x60>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_CAN_Init+0x60>)
 8000b42:	f000 fc79 	bl	8001438 <HAL_CAN_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000b4c:	f000 f9f6 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000108 	.word	0x20000108
 8000b58:	40006400 	.word	0x40006400

08000b5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <MX_RTC_Init+0x48>)
 8000b64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b6e:	227f      	movs	r2, #127	; 0x7f
 8000b70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b74:	22ff      	movs	r2, #255	; 0xff
 8000b76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b8c:	f003 fea0 	bl	80048d0 <HAL_RTC_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b96:	f000 f9d1 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000144 	.word	0x20000144
 8000ba4:	40002800 	.word	0x40002800

08000ba8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <MX_TIM1_Init+0xa0>)
 8000bc8:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <MX_TIM1_Init+0xa4>)
 8000bca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_TIM1_Init+0xa0>)
 8000bce:	2247      	movs	r2, #71	; 0x47
 8000bd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_TIM1_Init+0xa0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_TIM1_Init+0xa0>)
 8000bda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000bde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_TIM1_Init+0xa0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_TIM1_Init+0xa0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_TIM1_Init+0xa0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <MX_TIM1_Init+0xa0>)
 8000bf4:	f003 ff51 	bl	8004a9a <HAL_TIM_Base_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000bfe:	f000 f99d 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480e      	ldr	r0, [pc, #56]	; (8000c48 <MX_TIM1_Init+0xa0>)
 8000c10:	f004 f802 	bl	8004c18 <HAL_TIM_ConfigClockSource>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c1a:	f000 f98f 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_TIM1_Init+0xa0>)
 8000c30:	f004 f9e4 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c3a:	f000 f97f 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000164 	.word	0x20000164
 8000c4c:	40012c00 	.word	0x40012c00

08000c50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <MX_USART3_UART_Init+0x58>)
 8000c56:	4a15      	ldr	r2, [pc, #84]	; (8000cac <MX_USART3_UART_Init+0x5c>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000c5a:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <MX_USART3_UART_Init+0x58>)
 8000c5c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000c60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_USART3_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_USART3_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_USART3_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_USART3_UART_Init+0x58>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <MX_USART3_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_USART3_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <MX_USART3_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_USART3_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_USART3_UART_Init+0x58>)
 8000c94:	f004 fa3e 	bl	8005114 <HAL_UART_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c9e:	f000 f94d 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000084 	.word	0x20000084
 8000cac:	40004800 	.word	0x40004800

08000cb0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_USB_PCD_Init+0x44>)
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <MX_USB_PCD_Init+0x48>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USB_PCD_Init+0x44>)
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USB_PCD_Init+0x44>)
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USB_PCD_Init+0x44>)
 8000cc8:	2202      	movs	r2, #2
 8000cca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USB_PCD_Init+0x44>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USB_PCD_Init+0x44>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USB_PCD_Init+0x44>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_USB_PCD_Init+0x44>)
 8000ce0:	f001 f9c1 	bl	8002066 <HAL_PCD_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8000cea:	f000 f927 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200001b0 	.word	0x200001b0
 8000cf8:	40005c00 	.word	0x40005c00

08000cfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_DMA_Init+0x38>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <MX_DMA_Init+0x38>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6153      	str	r3, [r2, #20]
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_DMA_Init+0x38>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	200d      	movs	r0, #13
 8000d20:	f000 fd61 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d24:	200d      	movs	r0, #13
 8000d26:	f000 fd7a 	bl	800181e <HAL_NVIC_EnableIRQ>

}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	; 0x30
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	4b73      	ldr	r3, [pc, #460]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a72      	ldr	r2, [pc, #456]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000d54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d58:	6153      	str	r3, [r2, #20]
 8000d5a:	4b70      	ldr	r3, [pc, #448]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d62:	61bb      	str	r3, [r7, #24]
 8000d64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d66:	4b6d      	ldr	r3, [pc, #436]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	4a6c      	ldr	r2, [pc, #432]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000d6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d70:	6153      	str	r3, [r2, #20]
 8000d72:	4b6a      	ldr	r3, [pc, #424]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b67      	ldr	r3, [pc, #412]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	4a66      	ldr	r2, [pc, #408]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d88:	6153      	str	r3, [r2, #20]
 8000d8a:	4b64      	ldr	r3, [pc, #400]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d96:	4b61      	ldr	r3, [pc, #388]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	4a60      	ldr	r2, [pc, #384]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000d9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da0:	6153      	str	r3, [r2, #20]
 8000da2:	4b5e      	ldr	r3, [pc, #376]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dae:	4b5b      	ldr	r3, [pc, #364]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	4a5a      	ldr	r2, [pc, #360]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000db8:	6153      	str	r3, [r2, #20]
 8000dba:	4b58      	ldr	r3, [pc, #352]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc6:	4b55      	ldr	r3, [pc, #340]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	4a54      	ldr	r2, [pc, #336]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000dcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dd0:	6153      	str	r3, [r2, #20]
 8000dd2:	4b52      	ldr	r3, [pc, #328]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b4f      	ldr	r3, [pc, #316]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	4a4e      	ldr	r2, [pc, #312]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	6153      	str	r3, [r2, #20]
 8000dea:	4b4c      	ldr	r3, [pc, #304]	; (8000f1c <MX_GPIO_Init+0x1e4>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000dfc:	4848      	ldr	r0, [pc, #288]	; (8000f20 <MX_GPIO_Init+0x1e8>)
 8000dfe:	f001 f8dd 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_DIRECTION_GPIO_Port, STEP_DIRECTION_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e08:	4846      	ldr	r0, [pc, #280]	; (8000f24 <MX_GPIO_Init+0x1ec>)
 8000e0a:	f001 f8d7 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e14:	4843      	ldr	r0, [pc, #268]	; (8000f24 <MX_GPIO_Init+0x1ec>)
 8000e16:	f001 f8d1 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_PULSE_GPIO_Port, STEP_PULSE_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e20:	4841      	ldr	r0, [pc, #260]	; (8000f28 <MX_GPIO_Init+0x1f0>)
 8000e22:	f001 f8cb 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2140      	movs	r1, #64	; 0x40
 8000e2a:	4840      	ldr	r0, [pc, #256]	; (8000f2c <MX_GPIO_Init+0x1f4>)
 8000e2c:	f001 f8c6 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e36:	4b3e      	ldr	r3, [pc, #248]	; (8000f30 <MX_GPIO_Init+0x1f8>)
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	483b      	ldr	r0, [pc, #236]	; (8000f34 <MX_GPIO_Init+0x1fc>)
 8000e46:	f000 ff2f 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_B_Pin ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_B_Pin|ENCODER_A_Pin;
 8000e4a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e50:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <MX_GPIO_Init+0x200>)
 8000e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4831      	ldr	r0, [pc, #196]	; (8000f24 <MX_GPIO_Init+0x1ec>)
 8000e60:	f000 ff22 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e64:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4828      	ldr	r0, [pc, #160]	; (8000f20 <MX_GPIO_Init+0x1e8>)
 8000e7e:	f000 ff13 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_DIRECTION_Pin STEP_ENABLE_Pin */
  GPIO_InitStruct.Pin = STEP_DIRECTION_Pin|STEP_ENABLE_Pin;
 8000e82:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e90:	2301      	movs	r3, #1
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4822      	ldr	r0, [pc, #136]	; (8000f24 <MX_GPIO_Init+0x1ec>)
 8000e9c:	f000 ff04 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_PULSE_Pin */
  GPIO_InitStruct.Pin = STEP_PULSE_Pin;
 8000ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(STEP_PULSE_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	481b      	ldr	r0, [pc, #108]	; (8000f28 <MX_GPIO_Init+0x1f0>)
 8000eba:	f000 fef5 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ebe:	2340      	movs	r3, #64	; 0x40
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4815      	ldr	r0, [pc, #84]	; (8000f2c <MX_GPIO_Init+0x1f4>)
 8000ed6:	f000 fee7 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	480f      	ldr	r0, [pc, #60]	; (8000f2c <MX_GPIO_Init+0x1f4>)
 8000eee:	f000 fedb 	bl	8001ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2017      	movs	r0, #23
 8000ef8:	f000 fc75 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000efc:	2017      	movs	r0, #23
 8000efe:	f000 fc8e 	bl	800181e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2028      	movs	r0, #40	; 0x28
 8000f08:	f000 fc6d 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f0c:	2028      	movs	r0, #40	; 0x28
 8000f0e:	f000 fc86 	bl	800181e <HAL_NVIC_EnableIRQ>

}
 8000f12:	bf00      	nop
 8000f14:	3730      	adds	r7, #48	; 0x30
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48001400 	.word	0x48001400
 8000f28:	48001000 	.word	0x48001000
 8000f2c:	48001800 	.word	0x48001800
 8000f30:	10110000 	.word	0x10110000
 8000f34:	48000800 	.word	0x48000800
 8000f38:	10310000 	.word	0x10310000

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <Error_Handler+0x6>

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_MspInit+0x44>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_MspInit+0x44>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6193      	str	r3, [r2, #24]
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_MspInit+0x44>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_MspInit+0x44>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <HAL_MspInit+0x44>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	61d3      	str	r3, [r2, #28]
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_MspInit+0x44>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a17      	ldr	r2, [pc, #92]	; (8001008 <HAL_CAN_MspInit+0x7c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d127      	bne.n	8000ffe <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_CAN_MspInit+0x80>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a16      	ldr	r2, [pc, #88]	; (800100c <HAL_CAN_MspInit+0x80>)
 8000fb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_CAN_MspInit+0x80>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_CAN_MspInit+0x80>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <HAL_CAN_MspInit+0x80>)
 8000fcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_CAN_MspInit+0x80>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PD0     ------> CAN_RX
    PD1     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <HAL_CAN_MspInit+0x84>)
 8000ffa:	f000 fe55 	bl	8001ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40006400 	.word	0x40006400
 800100c:	40021000 	.word	0x40021000
 8001010:	48000c00 	.word	0x48000c00

08001014 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_RTC_MspInit+0x44>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d111      	bne.n	800104a <HAL_RTC_MspInit+0x36>
 8001026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800102a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	fa93 f3a3 	rbit	r3, r3
 8001032:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001034:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001036:	fab3 f383 	clz	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <HAL_RTC_MspInit+0x48>)
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	461a      	mov	r2, r3
 8001046:	2301      	movs	r3, #1
 8001048:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40002800 	.word	0x40002800
 800105c:	10908100 	.word	0x10908100

08001060 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_TIM_Base_MspInit+0x38>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d10b      	bne.n	800108a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_TIM_Base_MspInit+0x3c>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <HAL_TIM_Base_MspInit+0x3c>)
 8001078:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800107c:	6193      	str	r3, [r2, #24]
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_TIM_Base_MspInit+0x3c>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40012c00 	.word	0x40012c00
 800109c:	40021000 	.word	0x40021000

080010a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a2e      	ldr	r2, [pc, #184]	; (8001178 <HAL_UART_MspInit+0xd8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d156      	bne.n	8001170 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_UART_MspInit+0xdc>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <HAL_UART_MspInit+0xdc>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_UART_MspInit+0xdc>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <HAL_UART_MspInit+0xdc>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4a27      	ldr	r2, [pc, #156]	; (800117c <HAL_UART_MspInit+0xdc>)
 80010e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010e4:	6153      	str	r3, [r2, #20]
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_UART_MspInit+0xdc>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001104:	2307      	movs	r3, #7
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	481c      	ldr	r0, [pc, #112]	; (8001180 <HAL_UART_MspInit+0xe0>)
 8001110:	f000 fdca 	bl	8001ca8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_UART_MspInit+0xe4>)
 8001116:	4a1c      	ldr	r2, [pc, #112]	; (8001188 <HAL_UART_MspInit+0xe8>)
 8001118:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_UART_MspInit+0xe4>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_UART_MspInit+0xe4>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_UART_MspInit+0xe4>)
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_UART_MspInit+0xe4>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_UART_MspInit+0xe4>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_UART_MspInit+0xe4>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_UART_MspInit+0xe4>)
 8001140:	2200      	movs	r2, #0
 8001142:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001144:	480f      	ldr	r0, [pc, #60]	; (8001184 <HAL_UART_MspInit+0xe4>)
 8001146:	f000 fb84 	bl	8001852 <HAL_DMA_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8001150:	f7ff fef4 	bl	8000f3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <HAL_UART_MspInit+0xe4>)
 8001158:	671a      	str	r2, [r3, #112]	; 0x70
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <HAL_UART_MspInit+0xe4>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	2027      	movs	r0, #39	; 0x27
 8001166:	f000 fb3e 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800116a:	2027      	movs	r0, #39	; 0x27
 800116c:	f000 fb57 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40004800 	.word	0x40004800
 800117c:	40021000 	.word	0x40021000
 8001180:	48000c00 	.word	0x48000c00
 8001184:	20000040 	.word	0x20000040
 8001188:	40020030 	.word	0x40020030

0800118c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <HAL_PCD_MspInit+0x60>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d121      	bne.n	80011e2 <HAL_PCD_MspInit+0x56>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_PCD_MspInit+0x64>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <HAL_PCD_MspInit+0x64>)
 80011a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011a8:	61d3      	str	r3, [r2, #28]
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_PCD_MspInit+0x64>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_PCD_MspInit+0x68>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <HAL_PCD_MspInit+0x68>)
 80011bc:	f043 0320 	orr.w	r3, r3, #32
 80011c0:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	204a      	movs	r0, #74	; 0x4a
 80011c8:	f000 fb0d 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 80011cc:	204a      	movs	r0, #74	; 0x4a
 80011ce:	f000 fb26 	bl	800181e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	204b      	movs	r0, #75	; 0x4b
 80011d8:	f000 fb05 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80011dc:	204b      	movs	r0, #75	; 0x4b
 80011de:	f000 fb1e 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40005c00 	.word	0x40005c00
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010000 	.word	0x40010000

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <NMI_Handler+0x4>

080011fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <MemManage_Handler+0x4>

0800120a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <UsageFault_Handler+0x4>

08001216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001244:	f000 f8d8 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <DMA1_Channel3_IRQHandler+0x10>)
 8001252:	f000 fc1b 	bl	8001a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000040 	.word	0x20000040

08001260 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint32_t pendingBit = EXTI->PR;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <EXTI9_5_IRQHandler+0x44>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	607b      	str	r3, [r7, #4]
	if ((pendingBit & ENCODER_A_Pin) == pendingBit)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	429a      	cmp	r2, r3
 8001276:	d101      	bne.n	800127c <EXTI9_5_IRQHandler+0x1c>
	{
		ENCODER_A_INTERRUPT();
 8001278:	f006 f8d8 	bl	800742c <ENCODER_A_INTERRUPT>
	}
	if ((pendingBit & ENCODER_B_Pin) == pendingBit)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	d101      	bne.n	800128c <EXTI9_5_IRQHandler+0x2c>
	{
		ENCODER_B_INTERRUPT();
 8001288:	f006 f904 	bl	8007494 <ENCODER_B_INTERRUPT>
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800128c:	2080      	movs	r0, #128	; 0x80
 800128e:	f000 fec7 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001292:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001296:	f000 fec3 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40010400 	.word	0x40010400

080012a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <USART3_IRQHandler+0x10>)
 80012ae:	f003 ffbd 	bl	800522c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000084 	.word	0x20000084

080012bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012c4:	f000 feac 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <USB_HP_IRQHandler+0x10>)
 80012d2:	f000 ffa6 	bl	8002222 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200001b0 	.word	0x200001b0

080012e0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <USB_LP_IRQHandler+0x10>)
 80012e6:	f000 ff9c 	bl	8002222 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200001b0 	.word	0x200001b0

080012f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <SystemInit+0x20>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <SystemInit+0x20>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001350 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <LoopForever+0x6>)
  ldr r1, =_edata
 800131e:	490e      	ldr	r1, [pc, #56]	; (8001358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001320:	4a0e      	ldr	r2, [pc, #56]	; (800135c <LoopForever+0xe>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001324:	e002      	b.n	800132c <LoopCopyDataInit>

08001326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132a:	3304      	adds	r3, #4

0800132c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800132c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001330:	d3f9      	bcc.n	8001326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001332:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001334:	4c0b      	ldr	r4, [pc, #44]	; (8001364 <LoopForever+0x16>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001338:	e001      	b.n	800133e <LoopFillZerobss>

0800133a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800133c:	3204      	adds	r2, #4

0800133e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001340:	d3fb      	bcc.n	800133a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001342:	f7ff ffd7 	bl	80012f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001346:	f006 ff65 	bl	8008214 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800134a:	f7ff fb49 	bl	80009e0 <main>

0800134e <LoopForever>:

LoopForever:
    b LoopForever
 800134e:	e7fe      	b.n	800134e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001350:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001358:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800135c:	080082c4 	.word	0x080082c4
  ldr r2, =_sbss
 8001360:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001364:	200004ac 	.word	0x200004ac

08001368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC1_2_IRQHandler>
	...

0800136c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_Init+0x28>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_Init+0x28>)
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137c:	2003      	movs	r0, #3
 800137e:	f000 fa27 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001382:	2000      	movs	r0, #0
 8001384:	f000 f808 	bl	8001398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001388:	f7ff fddc 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40022000 	.word	0x40022000

08001398 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x54>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x58>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fa3f 	bl	800183a <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00e      	b.n	80013e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d80a      	bhi.n	80013e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	f000 fa07 	bl	80017e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <HAL_InitTick+0x5c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000008 	.word	0x20000008
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x20>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x24>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <HAL_IncTick+0x24>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000008 	.word	0x20000008
 800141c:	2000049c 	.word	0x2000049c

08001420 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;  
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_GetTick+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	2000049c 	.word	0x2000049c

08001438 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0ed      	b.n	8001626 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fd98 	bl	8000f8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0202 	bic.w	r2, r2, #2
 800146a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800146c:	f7ff ffd8 	bl	8001420 <HAL_GetTick>
 8001470:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001472:	e012      	b.n	800149a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001474:	f7ff ffd4 	bl	8001420 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b0a      	cmp	r3, #10
 8001480:	d90b      	bls.n	800149a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2205      	movs	r2, #5
 8001492:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e0c5      	b.n	8001626 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1e5      	bne.n	8001474 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b8:	f7ff ffb2 	bl	8001420 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014be:	e012      	b.n	80014e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014c0:	f7ff ffae 	bl	8001420 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b0a      	cmp	r3, #10
 80014cc:	d90b      	bls.n	80014e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2205      	movs	r2, #5
 80014de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e09f      	b.n	8001626 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0e5      	beq.n	80014c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7e1b      	ldrb	r3, [r3, #24]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d108      	bne.n	800150e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	e007      	b.n	800151e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7e5b      	ldrb	r3, [r3, #25]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d108      	bne.n	8001538 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e007      	b.n	8001548 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001546:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7e9b      	ldrb	r3, [r3, #26]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d108      	bne.n	8001562 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0220 	orr.w	r2, r2, #32
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e007      	b.n	8001572 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0220 	bic.w	r2, r2, #32
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7edb      	ldrb	r3, [r3, #27]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d108      	bne.n	800158c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0210 	bic.w	r2, r2, #16
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e007      	b.n	800159c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0210 	orr.w	r2, r2, #16
 800159a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7f1b      	ldrb	r3, [r3, #28]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d108      	bne.n	80015b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0208 	orr.w	r2, r2, #8
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	e007      	b.n	80015c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0208 	bic.w	r2, r2, #8
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7f5b      	ldrb	r3, [r3, #29]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d108      	bne.n	80015e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 0204 	orr.w	r2, r2, #4
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	e007      	b.n	80015f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0204 	bic.w	r2, r2, #4
 80015ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	ea42 0103 	orr.w	r1, r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	1e5a      	subs	r2, r3, #1
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4907      	ldr	r1, [pc, #28]	; (80016cc <__NVIC_EnableIRQ+0x38>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	; (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800179c:	d301      	bcc.n	80017a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179e:	2301      	movs	r3, #1
 80017a0:	e00f      	b.n	80017c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <SysTick_Config+0x40>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017aa:	210f      	movs	r1, #15
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f7ff ff8e 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <SysTick_Config+0x40>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <SysTick_Config+0x40>)
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	e000e010 	.word	0xe000e010

080017d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff29 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f8:	f7ff ff3e 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff ff8e 	bl	8001724 <NVIC_EncodePriority>
 8001808:	4602      	mov	r2, r0
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff5d 	bl	80016d0 <__NVIC_SetPriority>
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff31 	bl	8001694 <__NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffa2 	bl	800178c <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e037      	b.n	80018d8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2202      	movs	r2, #2
 800186c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800187e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001882:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800188c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f9b8 	bl	8001c30 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}  
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_DMA_Start_IT+0x20>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e04a      	b.n	8001996 <HAL_DMA_Start_IT+0xb6>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800190e:	2b01      	cmp	r3, #1
 8001910:	d13a      	bne.n	8001988 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2202      	movs	r2, #2
 8001916:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f94b 	bl	8001bd2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 020e 	orr.w	r2, r2, #14
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e00f      	b.n	8001976 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 020a 	orr.w	r2, r2, #10
 8001964:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0204 	bic.w	r2, r2, #4
 8001974:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0201 	orr.w	r2, r2, #1
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e005      	b.n	8001994 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001990:	2302      	movs	r3, #2
 8001992:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001994:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d008      	beq.n	80019c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2204      	movs	r2, #4
 80019b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e020      	b.n	8001a04 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 020e 	bic.w	r2, r2, #14
 80019d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ea:	2101      	movs	r1, #1
 80019ec:	fa01 f202 	lsl.w	r2, r1, r2
 80019f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d005      	beq.n	8001a32 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2204      	movs	r2, #4
 8001a2a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	e027      	b.n	8001a82 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 020e 	bic.w	r2, r2, #14
 8001a40:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0201 	bic.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a60:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	4798      	blx	r3
    } 
  }
  return status;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d024      	beq.n	8001afe <HAL_DMA_IRQHandler+0x72>
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d01f      	beq.n	8001afe <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0320 	and.w	r3, r3, #32
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d107      	bne.n	8001adc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0204 	bic.w	r2, r2, #4
 8001ada:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aea:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d06a      	beq.n	8001bca <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001afc:	e065      	b.n	8001bca <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	2202      	movs	r2, #2
 8001b04:	409a      	lsls	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d02c      	beq.n	8001b68 <HAL_DMA_IRQHandler+0xdc>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d027      	beq.n	8001b68 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10b      	bne.n	8001b3e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 020a 	bic.w	r2, r2, #10
 8001b34:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b46:	2102      	movs	r1, #2
 8001b48:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d035      	beq.n	8001bca <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001b66:	e030      	b.n	8001bca <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d028      	beq.n	8001bca <HAL_DMA_IRQHandler+0x13e>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d023      	beq.n	8001bca <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 020e 	bic.w	r2, r2, #14
 8001b90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	4798      	blx	r3
    }
  }
}  
 8001bc8:	e7ff      	b.n	8001bca <HAL_DMA_IRQHandler+0x13e>
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be8:	2101      	movs	r1, #1
 8001bea:	fa01 f202 	lsl.w	r2, r1, r2
 8001bee:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b10      	cmp	r3, #16
 8001bfe:	d108      	bne.n	8001c12 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c10:	e007      	b.n	8001c22 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	60da      	str	r2, [r3, #12]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <DMA_CalcBaseAndBitshift+0x60>)
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d80f      	bhi.n	8001c64 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <DMA_CalcBaseAndBitshift+0x64>)
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <DMA_CalcBaseAndBitshift+0x68>)
 8001c50:	fba2 2303 	umull	r2, r3, r2, r3
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	009a      	lsls	r2, r3, #2
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <DMA_CalcBaseAndBitshift+0x6c>)
 8001c60:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001c62:	e00e      	b.n	8001c82 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <DMA_CalcBaseAndBitshift+0x70>)
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <DMA_CalcBaseAndBitshift+0x68>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	009a      	lsls	r2, r3, #2
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <DMA_CalcBaseAndBitshift+0x74>)
 8001c80:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40020407 	.word	0x40020407
 8001c94:	bffdfff8 	.word	0xbffdfff8
 8001c98:	cccccccd 	.word	0xcccccccd
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	bffdfbf8 	.word	0xbffdfbf8
 8001ca4:	40020400 	.word	0x40020400

08001ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb6:	e160      	b.n	8001f7a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8152 	beq.w	8001f74 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d00b      	beq.n	8001cf0 <HAL_GPIO_Init+0x48>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d007      	beq.n	8001cf0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ce4:	2b11      	cmp	r3, #17
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b12      	cmp	r3, #18
 8001cee:	d130      	bne.n	8001d52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d26:	2201      	movs	r2, #1
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	091b      	lsrs	r3, r3, #4
 8001d3c:	f003 0201 	and.w	r2, r3, #1
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0xea>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d123      	bne.n	8001dda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	08da      	lsrs	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3208      	adds	r2, #8
 8001d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	220f      	movs	r2, #15
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	08da      	lsrs	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3208      	adds	r2, #8
 8001dd4:	6939      	ldr	r1, [r7, #16]
 8001dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	2203      	movs	r2, #3
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0203 	and.w	r2, r3, #3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80ac 	beq.w	8001f74 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1c:	4b5e      	ldr	r3, [pc, #376]	; (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a5d      	ldr	r2, [pc, #372]	; (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b5b      	ldr	r3, [pc, #364]	; (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e34:	4a59      	ldr	r2, [pc, #356]	; (8001f9c <HAL_GPIO_Init+0x2f4>)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e5e:	d025      	beq.n	8001eac <HAL_GPIO_Init+0x204>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a4f      	ldr	r2, [pc, #316]	; (8001fa0 <HAL_GPIO_Init+0x2f8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d01f      	beq.n	8001ea8 <HAL_GPIO_Init+0x200>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a4e      	ldr	r2, [pc, #312]	; (8001fa4 <HAL_GPIO_Init+0x2fc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d019      	beq.n	8001ea4 <HAL_GPIO_Init+0x1fc>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a4d      	ldr	r2, [pc, #308]	; (8001fa8 <HAL_GPIO_Init+0x300>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d013      	beq.n	8001ea0 <HAL_GPIO_Init+0x1f8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a4c      	ldr	r2, [pc, #304]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00d      	beq.n	8001e9c <HAL_GPIO_Init+0x1f4>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a4b      	ldr	r2, [pc, #300]	; (8001fb0 <HAL_GPIO_Init+0x308>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d007      	beq.n	8001e98 <HAL_GPIO_Init+0x1f0>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a4a      	ldr	r2, [pc, #296]	; (8001fb4 <HAL_GPIO_Init+0x30c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_GPIO_Init+0x1ec>
 8001e90:	2306      	movs	r3, #6
 8001e92:	e00c      	b.n	8001eae <HAL_GPIO_Init+0x206>
 8001e94:	2307      	movs	r3, #7
 8001e96:	e00a      	b.n	8001eae <HAL_GPIO_Init+0x206>
 8001e98:	2305      	movs	r3, #5
 8001e9a:	e008      	b.n	8001eae <HAL_GPIO_Init+0x206>
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	e006      	b.n	8001eae <HAL_GPIO_Init+0x206>
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e004      	b.n	8001eae <HAL_GPIO_Init+0x206>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e002      	b.n	8001eae <HAL_GPIO_Init+0x206>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_GPIO_Init+0x206>
 8001eac:	2300      	movs	r3, #0
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	f002 0203 	and.w	r2, r2, #3
 8001eb4:	0092      	lsls	r2, r2, #2
 8001eb6:	4093      	lsls	r3, r2
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ebe:	4937      	ldr	r1, [pc, #220]	; (8001f9c <HAL_GPIO_Init+0x2f4>)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <HAL_GPIO_Init+0x310>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ef0:	4a31      	ldr	r2, [pc, #196]	; (8001fb8 <HAL_GPIO_Init+0x310>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ef6:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <HAL_GPIO_Init+0x310>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f1a:	4a27      	ldr	r2, [pc, #156]	; (8001fb8 <HAL_GPIO_Init+0x310>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <HAL_GPIO_Init+0x310>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f44:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <HAL_GPIO_Init+0x310>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_GPIO_Init+0x310>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f6e:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <HAL_GPIO_Init+0x310>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	3301      	adds	r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f47f ae97 	bne.w	8001cb8 <HAL_GPIO_Init+0x10>
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	371c      	adds	r7, #28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	48000400 	.word	0x48000400
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	48000c00 	.word	0x48000c00
 8001fac:	48001000 	.word	0x48001000
 8001fb0:	48001400 	.word	0x48001400
 8001fb4:	48001800 	.word	0x48001800
 8001fb8:	40010400 	.word	0x40010400

08001fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fcc:	787b      	ldrb	r3, [r7, #1]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fd2:	887a      	ldrh	r2, [r7, #2]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fd8:	e002      	b.n	8001fe0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4013      	ands	r3, r2
 8002004:	041a      	lsls	r2, r3, #16
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	43d9      	mvns	r1, r3
 800200a:	887b      	ldrh	r3, [r7, #2]
 800200c:	400b      	ands	r3, r1
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	619a      	str	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d006      	beq.n	8002044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002036:	4a05      	ldr	r2, [pc, #20]	; (800204c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f806 	bl	8002050 <HAL_GPIO_EXTI_Callback>
  }
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40010400 	.word	0x40010400

08002050 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002066:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002068:	b08b      	sub	sp, #44	; 0x2c
 800206a:	af06      	add	r7, sp, #24
 800206c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0d0      	b.n	800221a <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d106      	bne.n	8002092 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff f87d 	bl	800118c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2203      	movs	r2, #3
 8002096:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 ffb6 	bl	8006010 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	e04c      	b.n	8002144 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	3301      	adds	r3, #1
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	b298      	uxth	r0, r3
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	3336      	adds	r3, #54	; 0x36
 80020e8:	4602      	mov	r2, r0
 80020ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	3303      	adds	r3, #3
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	3338      	adds	r3, #56	; 0x38
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	333c      	adds	r3, #60	; 0x3c
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	3340      	adds	r3, #64	; 0x40
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	3301      	adds	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	d3ad      	bcc.n	80020aa <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
 8002152:	e044      	b.n	80021de <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	3301      	adds	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d3b5      	bcc.n	8002154 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	687e      	ldr	r6, [r7, #4]
 80021f0:	466d      	mov	r5, sp
 80021f2:	f106 0410 	add.w	r4, r6, #16
 80021f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	602b      	str	r3, [r5, #0]
 80021fe:	1d33      	adds	r3, r6, #4
 8002200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	f003 ff1f 	bl	8006046 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002222 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f005 f85e 	bl	80072f0 <USB_ReadInterrupts>
 8002234:	4603      	mov	r3, r0
 8002236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800223a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800223e:	d102      	bne.n	8002246 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f954 	bl	80024ee <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f005 f850 	bl	80072f0 <USB_ReadInterrupts>
 8002250:	4603      	mov	r3, r0
 8002252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225a:	d112      	bne.n	8002282 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002264:	b29a      	uxth	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226e:	b292      	uxth	r2, r2
 8002270:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f8f7 	bl	8002468 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800227a:	2100      	movs	r1, #0
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f911 	bl	80024a4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f005 f832 	bl	80072f0 <USB_ReadInterrupts>
 800228c:	4603      	mov	r3, r0
 800228e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002292:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002296:	d10b      	bne.n	80022b0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022aa:	b292      	uxth	r2, r2
 80022ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f005 f81b 	bl	80072f0 <USB_ReadInterrupts>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c4:	d10b      	bne.n	80022de <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022d8:	b292      	uxth	r2, r2
 80022da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f005 f804 	bl	80072f0 <USB_ReadInterrupts>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f2:	d126      	bne.n	8002342 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0204 	bic.w	r2, r2, #4
 8002306:	b292      	uxth	r2, r2
 8002308:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002314:	b29a      	uxth	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0208 	bic.w	r2, r2, #8
 800231e:	b292      	uxth	r2, r2
 8002320:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f8b3 	bl	8002490 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002332:	b29a      	uxth	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800233c:	b292      	uxth	r2, r2
 800233e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f004 ffd2 	bl	80072f0 <USB_ReadInterrupts>
 800234c:	4603      	mov	r3, r0
 800234e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002356:	d126      	bne.n	80023a6 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002360:	b29a      	uxth	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0208 	orr.w	r2, r2, #8
 800236a:	b292      	uxth	r2, r2
 800236c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002378:	b29a      	uxth	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002382:	b292      	uxth	r2, r2
 8002384:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002390:	b29a      	uxth	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0204 	orr.w	r2, r2, #4
 800239a:	b292      	uxth	r2, r2
 800239c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f86b 	bl	800247c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f004 ffa0 	bl	80072f0 <USB_ReadInterrupts>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ba:	d10e      	bne.n	80023da <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023ce:	b292      	uxth	r2, r2
 80023d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f83d 	bl	8002454 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f004 ff86 	bl	80072f0 <USB_ReadInterrupts>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ee:	d10b      	bne.n	8002408 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002402:	b292      	uxth	r2, r2
 8002404:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_PCD_SetAddress+0x1a>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e013      	b.n	80024e6 <HAL_PCD_SetAddress+0x42>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f004 fef6 	bl	80072c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b08e      	sub	sp, #56	; 0x38
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024f6:	e2d1      	b.n	8002a9c <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002500:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800250e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 8152 	bne.w	80027bc <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002518:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	d150      	bne.n	80025c4 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800252e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002532:	81fb      	strh	r3, [r7, #14]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	89fb      	ldrh	r3, [r7, #14]
 800253a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002542:	b29b      	uxth	r3, r3
 8002544:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3328      	adds	r3, #40	; 0x28
 800254a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002554:	b29b      	uxth	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	4413      	add	r3, r2
 8002566:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	441a      	add	r2, r3
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002582:	2100      	movs	r1, #0
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff4f 	bl	8002428 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 8282 	beq.w	8002a9c <PCD_EP_ISR_Handler+0x5ae>
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	f040 827d 	bne.w	8002a9c <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	b292      	uxth	r2, r2
 80025b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025c2:	e26b      	b.n	8002a9c <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80025d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d032      	beq.n	8002644 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002618:	b29b      	uxth	r3, r3
 800261a:	f004 feba 	bl	8007392 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29a      	uxth	r2, r3
 8002626:	f640 738f 	movw	r3, #3983	; 0xf8f
 800262a:	4013      	ands	r3, r2
 800262c:	823b      	strh	r3, [r7, #16]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	8a3a      	ldrh	r2, [r7, #16]
 8002634:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002638:	b292      	uxth	r2, r2
 800263a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff feff 	bl	8002440 <HAL_PCD_SetupStageCallback>
 8002642:	e22b      	b.n	8002a9c <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002644:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002648:	2b00      	cmp	r3, #0
 800264a:	f280 8227 	bge.w	8002a9c <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29a      	uxth	r2, r3
 8002656:	f640 738f 	movw	r3, #3983	; 0xf8f
 800265a:	4013      	ands	r3, r2
 800265c:	83bb      	strh	r3, [r7, #28]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	8bba      	ldrh	r2, [r7, #28]
 8002664:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002668:	b292      	uxth	r2, r2
 800266a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002674:	b29b      	uxth	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4413      	add	r3, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	4413      	add	r3, r2
 8002686:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d019      	beq.n	80026d0 <PCD_EP_ISR_Handler+0x1e2>
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d015      	beq.n	80026d0 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	6959      	ldr	r1, [r3, #20]
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f004 fe6c 	bl	8007392 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	441a      	add	r2, r3
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026c8:	2100      	movs	r1, #0
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fea0 	bl	8002410 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4413      	add	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d112      	bne.n	800271e <PCD_EP_ISR_Handler+0x230>
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002702:	b29a      	uxth	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	801a      	strh	r2, [r3, #0]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002716:	b29a      	uxth	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	801a      	strh	r2, [r3, #0]
 800271c:	e02f      	b.n	800277e <PCD_EP_ISR_Handler+0x290>
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b3e      	cmp	r3, #62	; 0x3e
 8002724:	d813      	bhi.n	800274e <PCD_EP_ISR_Handler+0x260>
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	085b      	lsrs	r3, r3, #1
 800272c:	633b      	str	r3, [r7, #48]	; 0x30
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <PCD_EP_ISR_Handler+0x252>
 800273a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273c:	3301      	adds	r3, #1
 800273e:	633b      	str	r3, [r7, #48]	; 0x30
 8002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002742:	b29b      	uxth	r3, r3
 8002744:	029b      	lsls	r3, r3, #10
 8002746:	b29a      	uxth	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	801a      	strh	r2, [r3, #0]
 800274c:	e017      	b.n	800277e <PCD_EP_ISR_Handler+0x290>
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	633b      	str	r3, [r7, #48]	; 0x30
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <PCD_EP_ISR_Handler+0x27a>
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	3b01      	subs	r3, #1
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	b29b      	uxth	r3, r3
 800276c:	029b      	lsls	r3, r3, #10
 800276e:	b29b      	uxth	r3, r3
 8002770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002778:	b29a      	uxth	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800278a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278e:	827b      	strh	r3, [r7, #18]
 8002790:	8a7b      	ldrh	r3, [r7, #18]
 8002792:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002796:	827b      	strh	r3, [r7, #18]
 8002798:	8a7b      	ldrh	r3, [r7, #18]
 800279a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800279e:	827b      	strh	r3, [r7, #18]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	8a7b      	ldrh	r3, [r7, #18]
 80027a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	8013      	strh	r3, [r2, #0]
 80027ba:	e16f      	b.n	8002a9c <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f280 80e4 	bge.w	80029a0 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027ee:	4013      	ands	r3, r2
 80027f0:	853b      	strh	r3, [r7, #40]	; 0x28
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002802:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002806:	b292      	uxth	r2, r2
 8002808:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800280a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	7b1b      	ldrb	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d120      	bne.n	800286a <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	4413      	add	r3, r2
 8002842:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800284c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800284e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 8083 	beq.w	800295c <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	6959      	ldr	r1, [r3, #20]
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	88da      	ldrh	r2, [r3, #6]
 8002862:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002864:	f004 fd95 	bl	8007392 <USB_ReadPMA>
 8002868:	e078      	b.n	800295c <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	78db      	ldrb	r3, [r3, #3]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d108      	bne.n	8002884 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002872:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002874:	461a      	mov	r2, r3
 8002876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f91d 	bl	8002ab8 <HAL_PCD_EP_DB_Receive>
 800287e:	4603      	mov	r3, r0
 8002880:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002882:	e06b      	b.n	800295c <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	847b      	strh	r3, [r7, #34]	; 0x22
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	441a      	add	r2, r3
 80028ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01f      	beq.n	800291e <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002902:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002904:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002906:	2b00      	cmp	r3, #0
 8002908:	d028      	beq.n	800295c <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	6959      	ldr	r1, [r3, #20]
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	891a      	ldrh	r2, [r3, #8]
 8002916:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002918:	f004 fd3b 	bl	8007392 <USB_ReadPMA>
 800291c:	e01e      	b.n	800295c <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002926:	b29b      	uxth	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	4413      	add	r3, r2
 8002938:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002942:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002944:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	6959      	ldr	r1, [r3, #20]
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	895a      	ldrh	r2, [r3, #10]
 8002956:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002958:	f004 fd1b 	bl	8007392 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002962:	441a      	add	r2, r3
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800296e:	441a      	add	r2, r3
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d004      	beq.n	8002986 <PCD_EP_ISR_Handler+0x498>
 800297c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	429a      	cmp	r2, r3
 8002984:	d206      	bcs.n	8002994 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff fd3f 	bl	8002410 <HAL_PCD_DataOutStageCallback>
 8002992:	e005      	b.n	80029a0 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800299a:	4618      	mov	r0, r3
 800299c:	f003 fb74 	bl	8006088 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d078      	beq.n	8002a9c <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80029aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4413      	add	r3, r2
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d8:	843b      	strh	r3, [r7, #32]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	441a      	add	r2, r3
 80029e8:	8c3b      	ldrh	r3, [r7, #32]
 80029ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	78db      	ldrb	r3, [r3, #3]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d108      	bne.n	8002a10 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d144      	bne.n	8002a90 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d13f      	bne.n	8002a90 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a34:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	8bfb      	ldrh	r3, [r7, #30]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d906      	bls.n	8002a4e <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	8bfb      	ldrh	r3, [r7, #30]
 8002a46:	1ad2      	subs	r2, r2, r3
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	619a      	str	r2, [r3, #24]
 8002a4c:	e002      	b.n	8002a54 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d106      	bne.n	8002a6a <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	4619      	mov	r1, r3
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fce0 	bl	8002428 <HAL_PCD_DataInStageCallback>
 8002a68:	e018      	b.n	8002a9c <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	8bfb      	ldrh	r3, [r7, #30]
 8002a70:	441a      	add	r2, r3
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	8bfb      	ldrh	r3, [r7, #30]
 8002a7c:	441a      	add	r2, r3
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f003 fafd 	bl	8006088 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a8e:	e005      	b.n	8002a9c <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a92:	461a      	mov	r2, r3
 8002a94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f917 	bl	8002cca <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	b21b      	sxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f6ff ad25 	blt.w	80024f8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3738      	adds	r7, #56	; 0x38
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d07c      	beq.n	8002bca <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	8b7b      	ldrh	r3, [r7, #26]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d306      	bcc.n	8002b0e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	8b7b      	ldrh	r3, [r7, #26]
 8002b06:	1ad2      	subs	r2, r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	619a      	str	r2, [r3, #24]
 8002b0c:	e002      	b.n	8002b14 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d123      	bne.n	8002b64 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b36:	833b      	strh	r3, [r7, #24]
 8002b38:	8b3b      	ldrh	r3, [r7, #24]
 8002b3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b3e:	833b      	strh	r3, [r7, #24]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	441a      	add	r2, r3
 8002b4e:	8b3b      	ldrh	r3, [r7, #24]
 8002b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01f      	beq.n	8002bae <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b88:	82fb      	strh	r3, [r7, #22]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	441a      	add	r2, r3
 8002b98:	8afb      	ldrh	r3, [r7, #22]
 8002b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bae:	8b7b      	ldrh	r3, [r7, #26]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8085 	beq.w	8002cc0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	6959      	ldr	r1, [r3, #20]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	891a      	ldrh	r2, [r3, #8]
 8002bc2:	8b7b      	ldrh	r3, [r7, #26]
 8002bc4:	f004 fbe5 	bl	8007392 <USB_ReadPMA>
 8002bc8:	e07a      	b.n	8002cc0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	699a      	ldr	r2, [r3, #24]
 8002bf4:	8b7b      	ldrh	r3, [r7, #26]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d306      	bcc.n	8002c08 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	8b7b      	ldrh	r3, [r7, #26]
 8002c00:	1ad2      	subs	r2, r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	619a      	str	r2, [r3, #24]
 8002c06:	e002      	b.n	8002c0e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d123      	bne.n	8002c5e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c30:	83fb      	strh	r3, [r7, #30]
 8002c32:	8bfb      	ldrh	r3, [r7, #30]
 8002c34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c38:	83fb      	strh	r3, [r7, #30]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	441a      	add	r2, r3
 8002c48:	8bfb      	ldrh	r3, [r7, #30]
 8002c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d11f      	bne.n	8002ca8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	83bb      	strh	r3, [r7, #28]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	441a      	add	r2, r3
 8002c92:	8bbb      	ldrh	r3, [r7, #28]
 8002c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ca8:	8b7b      	ldrh	r3, [r7, #26]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	6959      	ldr	r1, [r3, #20]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	895a      	ldrh	r2, [r3, #10]
 8002cba:	8b7b      	ldrh	r3, [r7, #26]
 8002cbc:	f004 fb69 	bl	8007392 <USB_ReadPMA>
    }
  }

  return count;
 8002cc0:	8b7b      	ldrh	r3, [r7, #26]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b092      	sub	sp, #72	; 0x48
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8130 	beq.w	8002f44 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d08:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d906      	bls.n	8002d22 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d1a:	1ad2      	subs	r2, r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	619a      	str	r2, [r3, #24]
 8002d20:	e002      	b.n	8002d28 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d12c      	bne.n	8002d8a <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	4619      	mov	r1, r3
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7ff fb76 	bl	8002428 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 822d 	beq.w	80031a2 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d62:	827b      	strh	r3, [r7, #18]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	441a      	add	r2, r3
 8002d72:	8a7b      	ldrh	r3, [r7, #18]
 8002d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	8013      	strh	r3, [r2, #0]
 8002d88:	e20b      	b.n	80031a2 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01f      	beq.n	8002dd4 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dae:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	441a      	add	r2, r3
 8002dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	f040 81e1 	bne.w	80031a2 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002de6:	441a      	add	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	69da      	ldr	r2, [r3, #28]
 8002df0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002df2:	441a      	add	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d309      	bcc.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6a1a      	ldr	r2, [r3, #32]
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e10:	1ad2      	subs	r2, r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	621a      	str	r2, [r3, #32]
 8002e16:	e014      	b.n	8002e42 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d106      	bne.n	8002e2e <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002e20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e22:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e2c:	e009      	b.n	8002e42 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	785b      	ldrb	r3, [r3, #1]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d155      	bne.n	8002ef6 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	4413      	add	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	00da      	lsls	r2, r3, #3
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d112      	bne.n	8002e9e <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	801a      	strh	r2, [r3, #0]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	801a      	strh	r2, [r3, #0]
 8002e9c:	e047      	b.n	8002f2e <HAL_PCD_EP_DB_Transmit+0x264>
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8002ea2:	d811      	bhi.n	8002ec8 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea6:	085b      	lsrs	r3, r3, #1
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	029b      	lsls	r3, r3, #10
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	801a      	strh	r2, [r3, #0]
 8002ec6:	e032      	b.n	8002f2e <HAL_PCD_EP_DB_Transmit+0x264>
 8002ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <HAL_PCD_EP_DB_Transmit+0x214>
 8002ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eda:	3b01      	subs	r3, #1
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	029b      	lsls	r3, r3, #10
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	801a      	strh	r2, [r3, #0]
 8002ef4:	e01b      	b.n	8002f2e <HAL_PCD_EP_DB_Transmit+0x264>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d117      	bne.n	8002f2e <HAL_PCD_EP_DB_Transmit+0x264>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	623b      	str	r3, [r7, #32]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	4413      	add	r3, r2
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	00da      	lsls	r2, r3, #3
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	6959      	ldr	r1, [r3, #20]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	891a      	ldrh	r2, [r3, #8]
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	f004 f9e7 	bl	8007310 <USB_WritePMA>
 8002f42:	e12e      	b.n	80031a2 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f68:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d306      	bcc.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f7a:	1ad2      	subs	r2, r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	619a      	str	r2, [r3, #24]
 8002f80:	e002      	b.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d12c      	bne.n	8002fea <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	4619      	mov	r1, r3
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f7ff fa46 	bl	8002428 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f040 80fd 	bne.w	80031a2 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	441a      	add	r2, r3
 8002fd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	8013      	strh	r3, [r2, #0]
 8002fe8:	e0db      	b.n	80031a2 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d11f      	bne.n	8003034 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b29b      	uxth	r3, r3
 8003006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	441a      	add	r2, r3
 800301e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800302c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003030:	b29b      	uxth	r3, r3
 8003032:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800303a:	2b01      	cmp	r3, #1
 800303c:	f040 80b1 	bne.w	80031a2 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003046:	441a      	add	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003052:	441a      	add	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	6a1a      	ldr	r2, [r3, #32]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	429a      	cmp	r2, r3
 8003062:	d309      	bcc.n	8003078 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	6a1a      	ldr	r2, [r3, #32]
 800306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003070:	1ad2      	subs	r2, r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	621a      	str	r2, [r3, #32]
 8003076:	e014      	b.n	80030a2 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d106      	bne.n	800308e <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8003080:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003082:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800308c:	e009      	b.n	80030a2 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2200      	movs	r2, #0
 8003098:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	785b      	ldrb	r3, [r3, #1]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d155      	bne.n	800315c <HAL_PCD_EP_DB_Transmit+0x492>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	647b      	str	r3, [r7, #68]	; 0x44
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030be:	b29b      	uxth	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c4:	4413      	add	r3, r2
 80030c6:	647b      	str	r3, [r7, #68]	; 0x44
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	00da      	lsls	r2, r3, #3
 80030ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d0:	4413      	add	r3, r2
 80030d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030d6:	643b      	str	r3, [r7, #64]	; 0x40
 80030d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d112      	bne.n	8003104 <HAL_PCD_EP_DB_Transmit+0x43a>
 80030de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ec:	801a      	strh	r2, [r3, #0]
 80030ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003100:	801a      	strh	r2, [r3, #0]
 8003102:	e044      	b.n	800318e <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003106:	2b3e      	cmp	r3, #62	; 0x3e
 8003108:	d811      	bhi.n	800312e <HAL_PCD_EP_DB_Transmit+0x464>
 800310a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_PCD_EP_DB_Transmit+0x456>
 800311a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311c:	3301      	adds	r3, #1
 800311e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003122:	b29b      	uxth	r3, r3
 8003124:	029b      	lsls	r3, r3, #10
 8003126:	b29a      	uxth	r2, r3
 8003128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312a:	801a      	strh	r2, [r3, #0]
 800312c:	e02f      	b.n	800318e <HAL_PCD_EP_DB_Transmit+0x4c4>
 800312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <HAL_PCD_EP_DB_Transmit+0x47a>
 800313e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003140:	3b01      	subs	r3, #1
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003146:	b29b      	uxth	r3, r3
 8003148:	029b      	lsls	r3, r3, #10
 800314a:	b29b      	uxth	r3, r3
 800314c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003154:	b29a      	uxth	r2, r3
 8003156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003158:	801a      	strh	r2, [r3, #0]
 800315a:	e018      	b.n	800318e <HAL_PCD_EP_DB_Transmit+0x4c4>
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	785b      	ldrb	r3, [r3, #1]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d114      	bne.n	800318e <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800316c:	b29b      	uxth	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003172:	4413      	add	r3, r2
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	00da      	lsls	r2, r3, #3
 800317c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317e:	4413      	add	r3, r2
 8003180:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003184:	633b      	str	r3, [r7, #48]	; 0x30
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	b29a      	uxth	r2, r3
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	6959      	ldr	r1, [r3, #20]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	895a      	ldrh	r2, [r3, #10]
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	b29b      	uxth	r3, r3
 800319e:	f004 f8b7 	bl	8007310 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031bc:	823b      	strh	r3, [r7, #16]
 80031be:	8a3b      	ldrh	r3, [r7, #16]
 80031c0:	f083 0310 	eor.w	r3, r3, #16
 80031c4:	823b      	strh	r3, [r7, #16]
 80031c6:	8a3b      	ldrh	r3, [r7, #16]
 80031c8:	f083 0320 	eor.w	r3, r3, #32
 80031cc:	823b      	strh	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	441a      	add	r2, r3
 80031dc:	8a3b      	ldrh	r3, [r7, #16]
 80031de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3748      	adds	r7, #72	; 0x48
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003202:	af00      	add	r7, sp, #0
 8003204:	1d3b      	adds	r3, r7, #4
 8003206:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003208:	1d3b      	adds	r3, r7, #4
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	f000 bf01 	b.w	8004018 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8160 	beq.w	80034e6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003226:	4bae      	ldr	r3, [pc, #696]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b04      	cmp	r3, #4
 8003230:	d00c      	beq.n	800324c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003232:	4bab      	ldr	r3, [pc, #684]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b08      	cmp	r3, #8
 800323c:	d159      	bne.n	80032f2 <HAL_RCC_OscConfig+0xf6>
 800323e:	4ba8      	ldr	r3, [pc, #672]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324a:	d152      	bne.n	80032f2 <HAL_RCC_OscConfig+0xf6>
 800324c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003250:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8003260:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d102      	bne.n	800327e <HAL_RCC_OscConfig+0x82>
 8003278:	4b99      	ldr	r3, [pc, #612]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	e015      	b.n	80032aa <HAL_RCC_OscConfig+0xae>
 800327e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003282:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003292:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003296:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800329a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80032a6:	4b8e      	ldr	r3, [pc, #568]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032ae:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80032b2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80032b6:	fa92 f2a2 	rbit	r2, r2
 80032ba:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80032be:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80032c2:	fab2 f282 	clz	r2, r2
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	f042 0220 	orr.w	r2, r2, #32
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	f002 021f 	and.w	r2, r2, #31
 80032d2:	2101      	movs	r1, #1
 80032d4:	fa01 f202 	lsl.w	r2, r1, r2
 80032d8:	4013      	ands	r3, r2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8102 	beq.w	80034e4 <HAL_RCC_OscConfig+0x2e8>
 80032e0:	1d3b      	adds	r3, r7, #4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f040 80fc 	bne.w	80034e4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f000 be93 	b.w	8004018 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f2:	1d3b      	adds	r3, r7, #4
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fc:	d106      	bne.n	800330c <HAL_RCC_OscConfig+0x110>
 80032fe:	4b78      	ldr	r3, [pc, #480]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a77      	ldr	r2, [pc, #476]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e030      	b.n	800336e <HAL_RCC_OscConfig+0x172>
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10c      	bne.n	8003330 <HAL_RCC_OscConfig+0x134>
 8003316:	4b72      	ldr	r3, [pc, #456]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a71      	ldr	r2, [pc, #452]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 800331c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	4b6f      	ldr	r3, [pc, #444]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a6e      	ldr	r2, [pc, #440]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 8003328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e01e      	b.n	800336e <HAL_RCC_OscConfig+0x172>
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333a:	d10c      	bne.n	8003356 <HAL_RCC_OscConfig+0x15a>
 800333c:	4b68      	ldr	r3, [pc, #416]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a67      	ldr	r2, [pc, #412]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 8003342:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	4b65      	ldr	r3, [pc, #404]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a64      	ldr	r2, [pc, #400]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 800334e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	e00b      	b.n	800336e <HAL_RCC_OscConfig+0x172>
 8003356:	4b62      	ldr	r3, [pc, #392]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a61      	ldr	r2, [pc, #388]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 800335c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b5f      	ldr	r3, [pc, #380]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a5e      	ldr	r2, [pc, #376]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 8003368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800336e:	1d3b      	adds	r3, r7, #4
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d059      	beq.n	800342c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fe f852 	bl	8001420 <HAL_GetTick>
 800337c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003382:	f7fe f84d 	bl	8001420 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d902      	bls.n	8003398 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	f000 be40 	b.w	8004018 <HAL_RCC_OscConfig+0xe1c>
 8003398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800339c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80033ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d102      	bne.n	80033ca <HAL_RCC_OscConfig+0x1ce>
 80033c4:	4b46      	ldr	r3, [pc, #280]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	e015      	b.n	80033f6 <HAL_RCC_OscConfig+0x1fa>
 80033ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80033de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033e6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033fa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80033fe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003402:	fa92 f2a2 	rbit	r2, r2
 8003406:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800340a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800340e:	fab2 f282 	clz	r2, r2
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	f042 0220 	orr.w	r2, r2, #32
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	f002 021f 	and.w	r2, r2, #31
 800341e:	2101      	movs	r1, #1
 8003420:	fa01 f202 	lsl.w	r2, r1, r2
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0ab      	beq.n	8003382 <HAL_RCC_OscConfig+0x186>
 800342a:	e05c      	b.n	80034e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fd fff8 	bl	8001420 <HAL_GetTick>
 8003430:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003436:	f7fd fff3 	bl	8001420 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d902      	bls.n	800344c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	f000 bde6 	b.w	8004018 <HAL_RCC_OscConfig+0xe1c>
 800344c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003450:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003460:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d102      	bne.n	800347e <HAL_RCC_OscConfig+0x282>
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	e015      	b.n	80034aa <HAL_RCC_OscConfig+0x2ae>
 800347e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003482:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003492:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003496:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800349a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_RCC_OscConfig+0x2e4>)
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ae:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80034b2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80034b6:	fa92 f2a2 	rbit	r2, r2
 80034ba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80034be:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80034c2:	fab2 f282 	clz	r2, r2
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	f042 0220 	orr.w	r2, r2, #32
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	f002 021f 	and.w	r2, r2, #31
 80034d2:	2101      	movs	r1, #1
 80034d4:	fa01 f202 	lsl.w	r2, r1, r2
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ab      	bne.n	8003436 <HAL_RCC_OscConfig+0x23a>
 80034de:	e002      	b.n	80034e6 <HAL_RCC_OscConfig+0x2ea>
 80034e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8170 	beq.w	80037d6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034f6:	4bd0      	ldr	r3, [pc, #832]	; (8003838 <HAL_RCC_OscConfig+0x63c>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00c      	beq.n	800351c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003502:	4bcd      	ldr	r3, [pc, #820]	; (8003838 <HAL_RCC_OscConfig+0x63c>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b08      	cmp	r3, #8
 800350c:	d16d      	bne.n	80035ea <HAL_RCC_OscConfig+0x3ee>
 800350e:	4bca      	ldr	r3, [pc, #808]	; (8003838 <HAL_RCC_OscConfig+0x63c>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351a:	d166      	bne.n	80035ea <HAL_RCC_OscConfig+0x3ee>
 800351c:	2302      	movs	r3, #2
 800351e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800352e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d102      	bne.n	800354c <HAL_RCC_OscConfig+0x350>
 8003546:	4bbc      	ldr	r3, [pc, #752]	; (8003838 <HAL_RCC_OscConfig+0x63c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	e013      	b.n	8003574 <HAL_RCC_OscConfig+0x378>
 800354c:	2302      	movs	r3, #2
 800354e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800355e:	2302      	movs	r3, #2
 8003560:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003564:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003570:	4bb1      	ldr	r3, [pc, #708]	; (8003838 <HAL_RCC_OscConfig+0x63c>)
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	2202      	movs	r2, #2
 8003576:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800357a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800357e:	fa92 f2a2 	rbit	r2, r2
 8003582:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003586:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800358a:	fab2 f282 	clz	r2, r2
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	f042 0220 	orr.w	r2, r2, #32
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	f002 021f 	and.w	r2, r2, #31
 800359a:	2101      	movs	r1, #1
 800359c:	fa01 f202 	lsl.w	r2, r1, r2
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <HAL_RCC_OscConfig+0x3ba>
 80035a6:	1d3b      	adds	r3, r7, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d002      	beq.n	80035b6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f000 bd31 	b.w	8004018 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b6:	4ba0      	ldr	r3, [pc, #640]	; (8003838 <HAL_RCC_OscConfig+0x63c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	21f8      	movs	r1, #248	; 0xf8
 80035c6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80035ce:	fa91 f1a1 	rbit	r1, r1
 80035d2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80035d6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035da:	fab1 f181 	clz	r1, r1
 80035de:	b2c9      	uxtb	r1, r1
 80035e0:	408b      	lsls	r3, r1
 80035e2:	4995      	ldr	r1, [pc, #596]	; (8003838 <HAL_RCC_OscConfig+0x63c>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e8:	e0f5      	b.n	80037d6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035ea:	1d3b      	adds	r3, r7, #4
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8085 	beq.w	8003700 <HAL_RCC_OscConfig+0x504>
 80035f6:	2301      	movs	r3, #1
 80035f8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003608:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800360c:	fab3 f383 	clz	r3, r3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003616:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	461a      	mov	r2, r3
 800361e:	2301      	movs	r3, #1
 8003620:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7fd fefd 	bl	8001420 <HAL_GetTick>
 8003626:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	e00a      	b.n	8003642 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800362c:	f7fd fef8 	bl	8001420 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d902      	bls.n	8003642 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	f000 bceb 	b.w	8004018 <HAL_RCC_OscConfig+0xe1c>
 8003642:	2302      	movs	r3, #2
 8003644:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003654:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	b2db      	uxtb	r3, r3
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d102      	bne.n	8003672 <HAL_RCC_OscConfig+0x476>
 800366c:	4b72      	ldr	r3, [pc, #456]	; (8003838 <HAL_RCC_OscConfig+0x63c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	e013      	b.n	800369a <HAL_RCC_OscConfig+0x49e>
 8003672:	2302      	movs	r3, #2
 8003674:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003684:	2302      	movs	r3, #2
 8003686:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800368a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800368e:	fa93 f3a3 	rbit	r3, r3
 8003692:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003696:	4b68      	ldr	r3, [pc, #416]	; (8003838 <HAL_RCC_OscConfig+0x63c>)
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	2202      	movs	r2, #2
 800369c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80036a0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80036a4:	fa92 f2a2 	rbit	r2, r2
 80036a8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80036ac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80036b0:	fab2 f282 	clz	r2, r2
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	f042 0220 	orr.w	r2, r2, #32
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	f002 021f 	and.w	r2, r2, #31
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f202 	lsl.w	r2, r1, r2
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0af      	beq.n	800362c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036cc:	4b5a      	ldr	r3, [pc, #360]	; (8003838 <HAL_RCC_OscConfig+0x63c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	21f8      	movs	r1, #248	; 0xf8
 80036dc:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80036e4:	fa91 f1a1 	rbit	r1, r1
 80036e8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80036ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80036f0:	fab1 f181 	clz	r1, r1
 80036f4:	b2c9      	uxtb	r1, r1
 80036f6:	408b      	lsls	r3, r1
 80036f8:	494f      	ldr	r1, [pc, #316]	; (8003838 <HAL_RCC_OscConfig+0x63c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]
 80036fe:	e06a      	b.n	80037d6 <HAL_RCC_OscConfig+0x5da>
 8003700:	2301      	movs	r3, #1
 8003702:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003712:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003720:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	461a      	mov	r2, r3
 8003728:	2300      	movs	r3, #0
 800372a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fd fe78 	bl	8001420 <HAL_GetTick>
 8003730:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003736:	f7fd fe73 	bl	8001420 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d902      	bls.n	800374c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	f000 bc66 	b.w	8004018 <HAL_RCC_OscConfig+0xe1c>
 800374c:	2302      	movs	r3, #2
 800374e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800375e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b01      	cmp	r3, #1
 8003774:	d102      	bne.n	800377c <HAL_RCC_OscConfig+0x580>
 8003776:	4b30      	ldr	r3, [pc, #192]	; (8003838 <HAL_RCC_OscConfig+0x63c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	e013      	b.n	80037a4 <HAL_RCC_OscConfig+0x5a8>
 800377c:	2302      	movs	r3, #2
 800377e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800378e:	2302      	movs	r3, #2
 8003790:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003794:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80037a0:	4b25      	ldr	r3, [pc, #148]	; (8003838 <HAL_RCC_OscConfig+0x63c>)
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	2202      	movs	r2, #2
 80037a6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80037aa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80037ae:	fa92 f2a2 	rbit	r2, r2
 80037b2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80037b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80037ba:	fab2 f282 	clz	r2, r2
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	f042 0220 	orr.w	r2, r2, #32
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	f002 021f 	and.w	r2, r2, #31
 80037ca:	2101      	movs	r1, #1
 80037cc:	fa01 f202 	lsl.w	r2, r1, r2
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1af      	bne.n	8003736 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d6:	1d3b      	adds	r3, r7, #4
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80da 	beq.w	800399a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d069      	beq.n	80038c4 <HAL_RCC_OscConfig+0x6c8>
 80037f0:	2301      	movs	r3, #1
 80037f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037fa:	fa93 f3a3 	rbit	r3, r3
 80037fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003802:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003806:	fab3 f383 	clz	r3, r3
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_OscConfig+0x640>)
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	461a      	mov	r2, r3
 8003816:	2301      	movs	r3, #1
 8003818:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381a:	f7fd fe01 	bl	8001420 <HAL_GetTick>
 800381e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003822:	e00d      	b.n	8003840 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003824:	f7fd fdfc 	bl	8001420 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d905      	bls.n	8003840 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e3ef      	b.n	8004018 <HAL_RCC_OscConfig+0xe1c>
 8003838:	40021000 	.word	0x40021000
 800383c:	10908120 	.word	0x10908120
 8003840:	2302      	movs	r3, #2
 8003842:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800384a:	fa93 f2a3 	rbit	r2, r3
 800384e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003858:	2202      	movs	r2, #2
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	fa93 f2a3 	rbit	r2, r3
 8003866:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003870:	2202      	movs	r2, #2
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	fa93 f2a3 	rbit	r2, r3
 800387e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003882:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003884:	4ba4      	ldr	r3, [pc, #656]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003888:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800388c:	2102      	movs	r1, #2
 800388e:	6019      	str	r1, [r3, #0]
 8003890:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	fa93 f1a3 	rbit	r1, r3
 800389a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800389e:	6019      	str	r1, [r3, #0]
  return result;
 80038a0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	2101      	movs	r1, #1
 80038b8:	fa01 f303 	lsl.w	r3, r1, r3
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0b0      	beq.n	8003824 <HAL_RCC_OscConfig+0x628>
 80038c2:	e06a      	b.n	800399a <HAL_RCC_OscConfig+0x79e>
 80038c4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80038c8:	2201      	movs	r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038cc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	fa93 f2a3 	rbit	r2, r3
 80038d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80038da:	601a      	str	r2, [r3, #0]
  return result;
 80038dc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80038e0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	4b8c      	ldr	r3, [pc, #560]	; (8003b1c <HAL_RCC_OscConfig+0x920>)
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	461a      	mov	r2, r3
 80038f2:	2300      	movs	r3, #0
 80038f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f6:	f7fd fd93 	bl	8001420 <HAL_GetTick>
 80038fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fe:	e009      	b.n	8003914 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003900:	f7fd fd8e 	bl	8001420 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e381      	b.n	8004018 <HAL_RCC_OscConfig+0xe1c>
 8003914:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003918:	2202      	movs	r2, #2
 800391a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	fa93 f2a3 	rbit	r2, r3
 8003926:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003930:	2202      	movs	r2, #2
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	fa93 f2a3 	rbit	r2, r3
 800393e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003948:	2202      	movs	r2, #2
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	fa93 f2a3 	rbit	r2, r3
 8003956:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800395a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800395c:	4b6e      	ldr	r3, [pc, #440]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 800395e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003960:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003964:	2102      	movs	r1, #2
 8003966:	6019      	str	r1, [r3, #0]
 8003968:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	fa93 f1a3 	rbit	r1, r3
 8003972:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003976:	6019      	str	r1, [r3, #0]
  return result;
 8003978:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2101      	movs	r1, #1
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	4013      	ands	r3, r2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1b2      	bne.n	8003900 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800399a:	1d3b      	adds	r3, r7, #4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8157 	beq.w	8003c58 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b0:	4b59      	ldr	r3, [pc, #356]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d112      	bne.n	80039e2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039bc:	4b56      	ldr	r3, [pc, #344]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	4a55      	ldr	r2, [pc, #340]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c6:	61d3      	str	r3, [r2, #28]
 80039c8:	4b53      	ldr	r3, [pc, #332]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80039d0:	f107 030c 	add.w	r3, r7, #12
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	f107 030c 	add.w	r3, r7, #12
 80039da:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e2:	4b4f      	ldr	r3, [pc, #316]	; (8003b20 <HAL_RCC_OscConfig+0x924>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d11a      	bne.n	8003a24 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ee:	4b4c      	ldr	r3, [pc, #304]	; (8003b20 <HAL_RCC_OscConfig+0x924>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a4b      	ldr	r2, [pc, #300]	; (8003b20 <HAL_RCC_OscConfig+0x924>)
 80039f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fa:	f7fd fd11 	bl	8001420 <HAL_GetTick>
 80039fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	e009      	b.n	8003a18 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a04:	f7fd fd0c 	bl	8001420 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b64      	cmp	r3, #100	; 0x64
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e2ff      	b.n	8004018 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	4b41      	ldr	r3, [pc, #260]	; (8003b20 <HAL_RCC_OscConfig+0x924>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0ef      	beq.n	8003a04 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a24:	1d3b      	adds	r3, r7, #4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d106      	bne.n	8003a3c <HAL_RCC_OscConfig+0x840>
 8003a2e:	4b3a      	ldr	r3, [pc, #232]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4a39      	ldr	r2, [pc, #228]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	6213      	str	r3, [r2, #32]
 8003a3a:	e02f      	b.n	8003a9c <HAL_RCC_OscConfig+0x8a0>
 8003a3c:	1d3b      	adds	r3, r7, #4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x864>
 8003a46:	4b34      	ldr	r3, [pc, #208]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	4a33      	ldr	r2, [pc, #204]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6213      	str	r3, [r2, #32]
 8003a52:	4b31      	ldr	r3, [pc, #196]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	4a30      	ldr	r2, [pc, #192]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	6213      	str	r3, [r2, #32]
 8003a5e:	e01d      	b.n	8003a9c <HAL_RCC_OscConfig+0x8a0>
 8003a60:	1d3b      	adds	r3, r7, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b05      	cmp	r3, #5
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x888>
 8003a6a:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4a2a      	ldr	r2, [pc, #168]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	6213      	str	r3, [r2, #32]
 8003a76:	4b28      	ldr	r3, [pc, #160]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4a27      	ldr	r2, [pc, #156]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6213      	str	r3, [r2, #32]
 8003a82:	e00b      	b.n	8003a9c <HAL_RCC_OscConfig+0x8a0>
 8003a84:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	4a23      	ldr	r2, [pc, #140]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	6213      	str	r3, [r2, #32]
 8003a90:	4b21      	ldr	r3, [pc, #132]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4a20      	ldr	r2, [pc, #128]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003a96:	f023 0304 	bic.w	r3, r3, #4
 8003a9a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d06a      	beq.n	8003b7c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa6:	f7fd fcbb 	bl	8001420 <HAL_GetTick>
 8003aaa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab0:	f7fd fcb6 	bl	8001420 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e2a7      	b.n	8004018 <HAL_RCC_OscConfig+0xe1c>
 8003ac8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003acc:	2202      	movs	r2, #2
 8003ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	fa93 f2a3 	rbit	r2, r3
 8003ada:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	fa93 f2a3 	rbit	r2, r3
 8003af2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003af6:	601a      	str	r2, [r3, #0]
  return result;
 8003af8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003afc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afe:	fab3 f383 	clz	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f043 0302 	orr.w	r3, r3, #2
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d108      	bne.n	8003b24 <HAL_RCC_OscConfig+0x928>
 8003b12:	4b01      	ldr	r3, [pc, #4]	; (8003b18 <HAL_RCC_OscConfig+0x91c>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	e013      	b.n	8003b40 <HAL_RCC_OscConfig+0x944>
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	10908120 	.word	0x10908120
 8003b20:	40007000 	.word	0x40007000
 8003b24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b28:	2202      	movs	r2, #2
 8003b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	fa93 f2a3 	rbit	r2, r3
 8003b36:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	4bc0      	ldr	r3, [pc, #768]	; (8003e40 <HAL_RCC_OscConfig+0xc44>)
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003b44:	2102      	movs	r1, #2
 8003b46:	6011      	str	r1, [r2, #0]
 8003b48:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	fa92 f1a2 	rbit	r1, r2
 8003b52:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b56:	6011      	str	r1, [r2, #0]
  return result;
 8003b58:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	fab2 f282 	clz	r2, r2
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	f002 021f 	and.w	r2, r2, #31
 8003b6e:	2101      	movs	r1, #1
 8003b70:	fa01 f202 	lsl.w	r2, r1, r2
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d09a      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x8b4>
 8003b7a:	e063      	b.n	8003c44 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7c:	f7fd fc50 	bl	8001420 <HAL_GetTick>
 8003b80:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b84:	e00b      	b.n	8003b9e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b86:	f7fd fc4b 	bl	8001420 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e23c      	b.n	8004018 <HAL_RCC_OscConfig+0xe1c>
 8003b9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	fa93 f2a3 	rbit	r2, r3
 8003bb0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003bba:	2202      	movs	r2, #2
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	fa93 f2a3 	rbit	r2, r3
 8003bc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003bcc:	601a      	str	r2, [r3, #0]
  return result;
 8003bce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003bd2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd4:	fab3 f383 	clz	r3, r3
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f043 0302 	orr.w	r3, r3, #2
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d102      	bne.n	8003bee <HAL_RCC_OscConfig+0x9f2>
 8003be8:	4b95      	ldr	r3, [pc, #596]	; (8003e40 <HAL_RCC_OscConfig+0xc44>)
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	e00d      	b.n	8003c0a <HAL_RCC_OscConfig+0xa0e>
 8003bee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	fa93 f2a3 	rbit	r2, r3
 8003c00:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	4b8e      	ldr	r3, [pc, #568]	; (8003e40 <HAL_RCC_OscConfig+0xc44>)
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003c0e:	2102      	movs	r1, #2
 8003c10:	6011      	str	r1, [r2, #0]
 8003c12:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	fa92 f1a2 	rbit	r1, r2
 8003c1c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c20:	6011      	str	r1, [r2, #0]
  return result;
 8003c22:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	fab2 f282 	clz	r2, r2
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	f002 021f 	and.w	r2, r2, #31
 8003c38:	2101      	movs	r1, #1
 8003c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1a0      	bne.n	8003b86 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c44:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d105      	bne.n	8003c58 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4c:	4b7c      	ldr	r3, [pc, #496]	; (8003e40 <HAL_RCC_OscConfig+0xc44>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	4a7b      	ldr	r2, [pc, #492]	; (8003e40 <HAL_RCC_OscConfig+0xc44>)
 8003c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c56:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 81d9 	beq.w	8004016 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c64:	4b76      	ldr	r3, [pc, #472]	; (8003e40 <HAL_RCC_OscConfig+0xc44>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 030c 	and.w	r3, r3, #12
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	f000 81a6 	beq.w	8003fbe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c72:	1d3b      	adds	r3, r7, #4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	f040 811e 	bne.w	8003eba <HAL_RCC_OscConfig+0xcbe>
 8003c7e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003c82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	fa93 f2a3 	rbit	r2, r3
 8003c92:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c96:	601a      	str	r2, [r3, #0]
  return result;
 8003c98:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c9c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ca8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fbb4 	bl	8001420 <HAL_GetTick>
 8003cb8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cbc:	e009      	b.n	8003cd2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fd fbaf 	bl	8001420 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e1a2      	b.n	8004018 <HAL_RCC_OscConfig+0xe1c>
 8003cd2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003cd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cdc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	fa93 f2a3 	rbit	r2, r3
 8003ce6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003cea:	601a      	str	r2, [r3, #0]
  return result;
 8003cec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003cf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d102      	bne.n	8003d0c <HAL_RCC_OscConfig+0xb10>
 8003d06:	4b4e      	ldr	r3, [pc, #312]	; (8003e40 <HAL_RCC_OscConfig+0xc44>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	e01b      	b.n	8003d44 <HAL_RCC_OscConfig+0xb48>
 8003d0c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	fa93 f2a3 	rbit	r2, r3
 8003d20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	fa93 f2a3 	rbit	r2, r3
 8003d3a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	4b3f      	ldr	r3, [pc, #252]	; (8003e40 <HAL_RCC_OscConfig+0xc44>)
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003d48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d4c:	6011      	str	r1, [r2, #0]
 8003d4e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	fa92 f1a2 	rbit	r1, r2
 8003d58:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d5c:	6011      	str	r1, [r2, #0]
  return result;
 8003d5e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	fab2 f282 	clz	r2, r2
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	f042 0220 	orr.w	r2, r2, #32
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	f002 021f 	and.w	r2, r2, #31
 8003d74:	2101      	movs	r1, #1
 8003d76:	fa01 f202 	lsl.w	r2, r1, r2
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d19e      	bne.n	8003cbe <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d80:	4b2f      	ldr	r3, [pc, #188]	; (8003e40 <HAL_RCC_OscConfig+0xc44>)
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	f023 020f 	bic.w	r2, r3, #15
 8003d88:	1d3b      	adds	r3, r7, #4
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	492c      	ldr	r1, [pc, #176]	; (8003e40 <HAL_RCC_OscConfig+0xc44>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003d94:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <HAL_RCC_OscConfig+0xc44>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a19      	ldr	r1, [r3, #32]
 8003da2:	1d3b      	adds	r3, r7, #4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	430b      	orrs	r3, r1
 8003daa:	4925      	ldr	r1, [pc, #148]	; (8003e40 <HAL_RCC_OscConfig+0xc44>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]
 8003db0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	fa93 f2a3 	rbit	r2, r3
 8003dc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dc8:	601a      	str	r2, [r3, #0]
  return result;
 8003dca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dce:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd0:	fab3 f383 	clz	r3, r3
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	461a      	mov	r2, r3
 8003de2:	2301      	movs	r3, #1
 8003de4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de6:	f7fd fb1b 	bl	8001420 <HAL_GetTick>
 8003dea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dee:	e009      	b.n	8003e04 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df0:	f7fd fb16 	bl	8001420 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e109      	b.n	8004018 <HAL_RCC_OscConfig+0xe1c>
 8003e04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	fa93 f2a3 	rbit	r2, r3
 8003e18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e1c:	601a      	str	r2, [r3, #0]
  return result;
 8003e1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e24:	fab3 f383 	clz	r3, r3
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d105      	bne.n	8003e44 <HAL_RCC_OscConfig+0xc48>
 8003e38:	4b01      	ldr	r3, [pc, #4]	; (8003e40 <HAL_RCC_OscConfig+0xc44>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	e01e      	b.n	8003e7c <HAL_RCC_OscConfig+0xc80>
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	fa93 f2a3 	rbit	r2, r3
 8003e58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	fa93 f2a3 	rbit	r2, r3
 8003e72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	4b6a      	ldr	r3, [pc, #424]	; (8004024 <HAL_RCC_OscConfig+0xe28>)
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003e80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e84:	6011      	str	r1, [r2, #0]
 8003e86:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	fa92 f1a2 	rbit	r1, r2
 8003e90:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e94:	6011      	str	r1, [r2, #0]
  return result;
 8003e96:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	fab2 f282 	clz	r2, r2
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	f042 0220 	orr.w	r2, r2, #32
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	f002 021f 	and.w	r2, r2, #31
 8003eac:	2101      	movs	r1, #1
 8003eae:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d09b      	beq.n	8003df0 <HAL_RCC_OscConfig+0xbf4>
 8003eb8:	e0ad      	b.n	8004016 <HAL_RCC_OscConfig+0xe1a>
 8003eba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ebe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	fa93 f2a3 	rbit	r2, r3
 8003ece:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ed2:	601a      	str	r2, [r3, #0]
  return result;
 8003ed4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ed8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ee4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	461a      	mov	r2, r3
 8003eec:	2300      	movs	r3, #0
 8003eee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fa96 	bl	8001420 <HAL_GetTick>
 8003ef4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef8:	e009      	b.n	8003f0e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fd fa91 	bl	8001420 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e084      	b.n	8004018 <HAL_RCC_OscConfig+0xe1c>
 8003f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	fa93 f2a3 	rbit	r2, r3
 8003f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f26:	601a      	str	r2, [r3, #0]
  return result;
 8003f28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d102      	bne.n	8003f48 <HAL_RCC_OscConfig+0xd4c>
 8003f42:	4b38      	ldr	r3, [pc, #224]	; (8004024 <HAL_RCC_OscConfig+0xe28>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	e01b      	b.n	8003f80 <HAL_RCC_OscConfig+0xd84>
 8003f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	fa93 f2a3 	rbit	r2, r3
 8003f5c:	f107 0320 	add.w	r3, r7, #32
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	f107 031c 	add.w	r3, r7, #28
 8003f66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	f107 031c 	add.w	r3, r7, #28
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	fa93 f2a3 	rbit	r2, r3
 8003f76:	f107 0318 	add.w	r3, r7, #24
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	4b29      	ldr	r3, [pc, #164]	; (8004024 <HAL_RCC_OscConfig+0xe28>)
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	f107 0214 	add.w	r2, r7, #20
 8003f84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f88:	6011      	str	r1, [r2, #0]
 8003f8a:	f107 0214 	add.w	r2, r7, #20
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	fa92 f1a2 	rbit	r1, r2
 8003f94:	f107 0210 	add.w	r2, r7, #16
 8003f98:	6011      	str	r1, [r2, #0]
  return result;
 8003f9a:	f107 0210 	add.w	r2, r7, #16
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	fab2 f282 	clz	r2, r2
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	f042 0220 	orr.w	r2, r2, #32
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	f002 021f 	and.w	r2, r2, #31
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d19e      	bne.n	8003efa <HAL_RCC_OscConfig+0xcfe>
 8003fbc:	e02b      	b.n	8004016 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fbe:	1d3b      	adds	r3, r7, #4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e025      	b.n	8004018 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fcc:	4b15      	ldr	r3, [pc, #84]	; (8004024 <HAL_RCC_OscConfig+0xe28>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003fd4:	4b13      	ldr	r3, [pc, #76]	; (8004024 <HAL_RCC_OscConfig+0xe28>)
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fdc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fe0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003fe4:	1d3b      	adds	r3, r7, #4
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d111      	bne.n	8004012 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003fee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ff2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ff6:	1d3b      	adds	r3, r7, #4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d108      	bne.n	8004012 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004004:	f003 020f 	and.w	r2, r3, #15
 8004008:	1d3b      	adds	r3, r7, #4
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800400e:	429a      	cmp	r2, r3
 8004010:	d001      	beq.n	8004016 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40021000 	.word	0x40021000

08004028 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b09e      	sub	sp, #120	; 0x78
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e162      	b.n	8004306 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004040:	4b90      	ldr	r3, [pc, #576]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d910      	bls.n	8004070 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404e:	4b8d      	ldr	r3, [pc, #564]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 0207 	bic.w	r2, r3, #7
 8004056:	498b      	ldr	r1, [pc, #556]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405e:	4b89      	ldr	r3, [pc, #548]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e14a      	b.n	8004306 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800407c:	4b82      	ldr	r3, [pc, #520]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	497f      	ldr	r1, [pc, #508]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 800408a:	4313      	orrs	r3, r2
 800408c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80dc 	beq.w	8004254 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d13c      	bne.n	800411e <HAL_RCC_ClockConfig+0xf6>
 80040a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ac:	fa93 f3a3 	rbit	r3, r3
 80040b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d102      	bne.n	80040ce <HAL_RCC_ClockConfig+0xa6>
 80040c8:	4b6f      	ldr	r3, [pc, #444]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	e00f      	b.n	80040ee <HAL_RCC_ClockConfig+0xc6>
 80040ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040d6:	fa93 f3a3 	rbit	r3, r3
 80040da:	667b      	str	r3, [r7, #100]	; 0x64
 80040dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040e0:	663b      	str	r3, [r7, #96]	; 0x60
 80040e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ea:	4b67      	ldr	r3, [pc, #412]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80040f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040f6:	fa92 f2a2 	rbit	r2, r2
 80040fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80040fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040fe:	fab2 f282 	clz	r2, r2
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	f042 0220 	orr.w	r2, r2, #32
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	f002 021f 	and.w	r2, r2, #31
 800410e:	2101      	movs	r1, #1
 8004110:	fa01 f202 	lsl.w	r2, r1, r2
 8004114:	4013      	ands	r3, r2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d17b      	bne.n	8004212 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e0f3      	b.n	8004306 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d13c      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x178>
 8004126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800412a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b01      	cmp	r3, #1
 8004148:	d102      	bne.n	8004150 <HAL_RCC_ClockConfig+0x128>
 800414a:	4b4f      	ldr	r3, [pc, #316]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	e00f      	b.n	8004170 <HAL_RCC_ClockConfig+0x148>
 8004150:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004154:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004158:	fa93 f3a3 	rbit	r3, r3
 800415c:	647b      	str	r3, [r7, #68]	; 0x44
 800415e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004162:	643b      	str	r3, [r7, #64]	; 0x40
 8004164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800416c:	4b46      	ldr	r3, [pc, #280]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004174:	63ba      	str	r2, [r7, #56]	; 0x38
 8004176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004178:	fa92 f2a2 	rbit	r2, r2
 800417c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800417e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004180:	fab2 f282 	clz	r2, r2
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	f042 0220 	orr.w	r2, r2, #32
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	f002 021f 	and.w	r2, r2, #31
 8004190:	2101      	movs	r1, #1
 8004192:	fa01 f202 	lsl.w	r2, r1, r2
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d13a      	bne.n	8004212 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0b2      	b.n	8004306 <HAL_RCC_ClockConfig+0x2de>
 80041a0:	2302      	movs	r3, #2
 80041a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d102      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x1a0>
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	e00d      	b.n	80041e4 <HAL_RCC_ClockConfig+0x1bc>
 80041c8:	2302      	movs	r3, #2
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	fa93 f3a3 	rbit	r3, r3
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
 80041d4:	2302      	movs	r3, #2
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	fa93 f3a3 	rbit	r3, r3
 80041de:	61fb      	str	r3, [r7, #28]
 80041e0:	4b29      	ldr	r3, [pc, #164]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	2202      	movs	r2, #2
 80041e6:	61ba      	str	r2, [r7, #24]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	fa92 f2a2 	rbit	r2, r2
 80041ee:	617a      	str	r2, [r7, #20]
  return result;
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	fab2 f282 	clz	r2, r2
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	f042 0220 	orr.w	r2, r2, #32
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	f002 021f 	and.w	r2, r2, #31
 8004202:	2101      	movs	r1, #1
 8004204:	fa01 f202 	lsl.w	r2, r1, r2
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e079      	b.n	8004306 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004212:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f023 0203 	bic.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	491a      	ldr	r1, [pc, #104]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004224:	f7fd f8fc 	bl	8001420 <HAL_GetTick>
 8004228:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	e00a      	b.n	8004242 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422c:	f7fd f8f8 	bl	8001420 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	; 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e061      	b.n	8004306 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	4b11      	ldr	r3, [pc, #68]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 020c 	and.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	429a      	cmp	r2, r3
 8004252:	d1eb      	bne.n	800422c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d214      	bcs.n	800428c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 0207 	bic.w	r2, r3, #7
 800426a:	4906      	ldr	r1, [pc, #24]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e040      	b.n	8004306 <HAL_RCC_ClockConfig+0x2de>
 8004284:	40022000 	.word	0x40022000
 8004288:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004298:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <HAL_RCC_ClockConfig+0x2e8>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	491a      	ldr	r1, [pc, #104]	; (8004310 <HAL_RCC_ClockConfig+0x2e8>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b6:	4b16      	ldr	r3, [pc, #88]	; (8004310 <HAL_RCC_ClockConfig+0x2e8>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4912      	ldr	r1, [pc, #72]	; (8004310 <HAL_RCC_ClockConfig+0x2e8>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042ca:	f000 f829 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 80042ce:	4601      	mov	r1, r0
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <HAL_RCC_ClockConfig+0x2e8>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d8:	22f0      	movs	r2, #240	; 0xf0
 80042da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	fa92 f2a2 	rbit	r2, r2
 80042e2:	60fa      	str	r2, [r7, #12]
  return result;
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	fab2 f282 	clz	r2, r2
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	40d3      	lsrs	r3, r2
 80042ee:	4a09      	ldr	r2, [pc, #36]	; (8004314 <HAL_RCC_ClockConfig+0x2ec>)
 80042f0:	5cd3      	ldrb	r3, [r2, r3]
 80042f2:	fa21 f303 	lsr.w	r3, r1, r3
 80042f6:	4a08      	ldr	r2, [pc, #32]	; (8004318 <HAL_RCC_ClockConfig+0x2f0>)
 80042f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80042fa:	4b08      	ldr	r3, [pc, #32]	; (800431c <HAL_RCC_ClockConfig+0x2f4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fd f84a 	bl	8001398 <HAL_InitTick>
  
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3778      	adds	r7, #120	; 0x78
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000
 8004314:	08008284 	.word	0x08008284
 8004318:	20000000 	.word	0x20000000
 800431c:	20000004 	.word	0x20000004

08004320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004320:	b480      	push	{r7}
 8004322:	b08b      	sub	sp, #44	; 0x2c
 8004324:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	2300      	movs	r3, #0
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800433a:	4b2a      	ldr	r3, [pc, #168]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b04      	cmp	r3, #4
 8004348:	d002      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x30>
 800434a:	2b08      	cmp	r3, #8
 800434c:	d003      	beq.n	8004356 <HAL_RCC_GetSysClockFreq+0x36>
 800434e:	e03f      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004350:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004352:	623b      	str	r3, [r7, #32]
      break;
 8004354:	e03f      	b.n	80043d6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800435c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004360:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	fa92 f2a2 	rbit	r2, r2
 8004368:	607a      	str	r2, [r7, #4]
  return result;
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	fab2 f282 	clz	r2, r2
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	40d3      	lsrs	r3, r2
 8004374:	4a1d      	ldr	r2, [pc, #116]	; (80043ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8004376:	5cd3      	ldrb	r3, [r2, r3]
 8004378:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800437a:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	220f      	movs	r2, #15
 8004384:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	fa92 f2a2 	rbit	r2, r2
 800438c:	60fa      	str	r2, [r7, #12]
  return result;
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	fab2 f282 	clz	r2, r2
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	40d3      	lsrs	r3, r2
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800439a:	5cd3      	ldrb	r3, [r2, r3]
 800439c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043a8:	4a0f      	ldr	r2, [pc, #60]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
 80043b8:	e007      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043ba:	4a0b      	ldr	r2, [pc, #44]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	fb02 f303 	mul.w	r3, r2, r3
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	623b      	str	r3, [r7, #32]
      break;
 80043ce:	e002      	b.n	80043d6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80043d2:	623b      	str	r3, [r7, #32]
      break;
 80043d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043d6:	6a3b      	ldr	r3, [r7, #32]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	372c      	adds	r7, #44	; 0x2c
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40021000 	.word	0x40021000
 80043e8:	007a1200 	.word	0x007a1200
 80043ec:	0800829c 	.word	0x0800829c
 80043f0:	080082ac 	.word	0x080082ac

080043f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f8:	4b03      	ldr	r3, [pc, #12]	; (8004408 <HAL_RCC_GetHCLKFreq+0x14>)
 80043fa:	681b      	ldr	r3, [r3, #0]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000000 	.word	0x20000000

0800440c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004412:	f7ff ffef 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8004416:	4601      	mov	r1, r0
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004420:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004424:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	fa92 f2a2 	rbit	r2, r2
 800442c:	603a      	str	r2, [r7, #0]
  return result;
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	fab2 f282 	clz	r2, r2
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	40d3      	lsrs	r3, r2
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <HAL_RCC_GetPCLK1Freq+0x40>)
 800443a:	5cd3      	ldrb	r3, [r2, r3]
 800443c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40021000 	.word	0x40021000
 800444c:	08008294 	.word	0x08008294

08004450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004456:	f7ff ffcd 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 800445a:	4601      	mov	r1, r0
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004464:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004468:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	fa92 f2a2 	rbit	r2, r2
 8004470:	603a      	str	r2, [r7, #0]
  return result;
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	fab2 f282 	clz	r2, r2
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	40d3      	lsrs	r3, r2
 800447c:	4a04      	ldr	r2, [pc, #16]	; (8004490 <HAL_RCC_GetPCLK2Freq+0x40>)
 800447e:	5cd3      	ldrb	r3, [r2, r3]
 8004480:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000
 8004490:	08008294 	.word	0x08008294

08004494 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b092      	sub	sp, #72	; 0x48
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80044a4:	2300      	movs	r3, #0
 80044a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80d4 	beq.w	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b8:	4b4e      	ldr	r3, [pc, #312]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10e      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c4:	4b4b      	ldr	r3, [pc, #300]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	4a4a      	ldr	r2, [pc, #296]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ce:	61d3      	str	r3, [r2, #28]
 80044d0:	4b48      	ldr	r3, [pc, #288]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e2:	4b45      	ldr	r3, [pc, #276]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d118      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ee:	4b42      	ldr	r3, [pc, #264]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a41      	ldr	r2, [pc, #260]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fa:	f7fc ff91 	bl	8001420 <HAL_GetTick>
 80044fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004500:	e008      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004502:	f7fc ff8d 	bl	8001420 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b64      	cmp	r3, #100	; 0x64
 800450e:	d901      	bls.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e1d6      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004514:	4b38      	ldr	r3, [pc, #224]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004520:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004528:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800452a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 8084 	beq.w	800463a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800453c:	429a      	cmp	r2, r3
 800453e:	d07c      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004540:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800454a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800454e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455a:	fab3 f383 	clz	r3, r3
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	4b26      	ldr	r3, [pc, #152]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	461a      	mov	r2, r3
 800456a:	2301      	movs	r3, #1
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004572:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004576:	fa93 f3a3 	rbit	r3, r3
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800457c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800457e:	fab3 f383 	clz	r3, r3
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	461a      	mov	r2, r3
 800458e:	2300      	movs	r3, #0
 8004590:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004592:	4a18      	ldr	r2, [pc, #96]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004596:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d04b      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7fc ff3d 	bl	8001420 <HAL_GetTick>
 80045a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	e00a      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fc ff39 	bl	8001420 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e180      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80045c0:	2302      	movs	r3, #2
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
 80045cc:	2302      	movs	r3, #2
 80045ce:	623b      	str	r3, [r7, #32]
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	fa93 f3a3 	rbit	r3, r3
 80045d6:	61fb      	str	r3, [r7, #28]
  return result;
 80045d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f043 0302 	orr.w	r3, r3, #2
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d108      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80045ee:	4b01      	ldr	r3, [pc, #4]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	e00d      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40007000 	.word	0x40007000
 80045fc:	10908100 	.word	0x10908100
 8004600:	2302      	movs	r3, #2
 8004602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	fa93 f3a3 	rbit	r3, r3
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	4ba0      	ldr	r3, [pc, #640]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	2202      	movs	r2, #2
 8004612:	613a      	str	r2, [r7, #16]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	fa92 f2a2 	rbit	r2, r2
 800461a:	60fa      	str	r2, [r7, #12]
  return result;
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	fab2 f282 	clz	r2, r2
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	f002 021f 	and.w	r2, r2, #31
 800462e:	2101      	movs	r1, #1
 8004630:	fa01 f202 	lsl.w	r2, r1, r2
 8004634:	4013      	ands	r3, r2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0b7      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800463a:	4b95      	ldr	r3, [pc, #596]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4992      	ldr	r1, [pc, #584]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004648:	4313      	orrs	r3, r2
 800464a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800464c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004650:	2b01      	cmp	r3, #1
 8004652:	d105      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004654:	4b8e      	ldr	r3, [pc, #568]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	4a8d      	ldr	r2, [pc, #564]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800465a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800465e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800466c:	4b88      	ldr	r3, [pc, #544]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	f023 0203 	bic.w	r2, r3, #3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4985      	ldr	r1, [pc, #532]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800467a:	4313      	orrs	r3, r2
 800467c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d008      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800468a:	4b81      	ldr	r3, [pc, #516]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	497e      	ldr	r1, [pc, #504]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004698:	4313      	orrs	r3, r2
 800469a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046a8:	4b79      	ldr	r3, [pc, #484]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	4976      	ldr	r1, [pc, #472]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046c6:	4b72      	ldr	r3, [pc, #456]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	f023 0210 	bic.w	r2, r3, #16
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	496f      	ldr	r1, [pc, #444]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80046e4:	4b6a      	ldr	r3, [pc, #424]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f0:	4967      	ldr	r1, [pc, #412]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004702:	4b63      	ldr	r3, [pc, #396]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	f023 0220 	bic.w	r2, r3, #32
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	4960      	ldr	r1, [pc, #384]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004710:	4313      	orrs	r3, r2
 8004712:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004720:	4b5b      	ldr	r3, [pc, #364]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	4958      	ldr	r1, [pc, #352]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800472e:	4313      	orrs	r3, r2
 8004730:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d008      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800473e:	4b54      	ldr	r3, [pc, #336]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	4951      	ldr	r1, [pc, #324]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800474c:	4313      	orrs	r3, r2
 800474e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800475c:	4b4c      	ldr	r3, [pc, #304]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	4949      	ldr	r1, [pc, #292]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800476a:	4313      	orrs	r3, r2
 800476c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800477a:	4b45      	ldr	r3, [pc, #276]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	4942      	ldr	r1, [pc, #264]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004788:	4313      	orrs	r3, r2
 800478a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004798:	4b3d      	ldr	r3, [pc, #244]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	493a      	ldr	r1, [pc, #232]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d008      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80047b6:	4b36      	ldr	r3, [pc, #216]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	4933      	ldr	r1, [pc, #204]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047d4:	4b2e      	ldr	r3, [pc, #184]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e0:	492b      	ldr	r1, [pc, #172]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d008      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80047f2:	4b27      	ldr	r3, [pc, #156]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	4924      	ldr	r1, [pc, #144]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004800:	4313      	orrs	r3, r2
 8004802:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004810:	4b1f      	ldr	r3, [pc, #124]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	491c      	ldr	r1, [pc, #112]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d008      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800482e:	4b18      	ldr	r3, [pc, #96]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483a:	4915      	ldr	r1, [pc, #84]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800483c:	4313      	orrs	r3, r2
 800483e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800484c:	4b10      	ldr	r3, [pc, #64]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004858:	490d      	ldr	r1, [pc, #52]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004876:	4906      	ldr	r1, [pc, #24]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004878:	4313      	orrs	r3, r2
 800487a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00c      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004888:	4b01      	ldr	r3, [pc, #4]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	e002      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489c:	490b      	ldr	r1, [pc, #44]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d008      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80048ae:	4b07      	ldr	r3, [pc, #28]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ba:	4904      	ldr	r1, [pc, #16]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3748      	adds	r7, #72	; 0x48
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000

080048d0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e083      	b.n	80049ea <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	7f5b      	ldrb	r3, [r3, #29]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d105      	bne.n	80048f8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fc fb8e 	bl	8001014 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	22ca      	movs	r2, #202	; 0xca
 8004904:	625a      	str	r2, [r3, #36]	; 0x24
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2253      	movs	r2, #83	; 0x53
 800490c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f897 	bl	8004a42 <RTC_EnterInitMode>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	22ff      	movs	r2, #255	; 0xff
 8004920:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2204      	movs	r2, #4
 8004926:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e05e      	b.n	80049ea <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800493a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800493e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6899      	ldr	r1, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68d2      	ldr	r2, [r2, #12]
 8004966:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6919      	ldr	r1, [r3, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	041a      	lsls	r2, r3, #16
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800498a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10e      	bne.n	80049b8 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f829 	bl	80049f2 <HAL_RTC_WaitForSynchro>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	22ff      	movs	r2, #255	; 0xff
 80049ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2204      	movs	r2, #4
 80049b2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e018      	b.n	80049ea <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	22ff      	movs	r2, #255	; 0xff
 80049e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80049e8:	2300      	movs	r3, #0
  }
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a0c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004a0e:	f7fc fd07 	bl	8001420 <HAL_GetTick>
 8004a12:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004a14:	e009      	b.n	8004a2a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a16:	f7fc fd03 	bl	8001420 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a24:	d901      	bls.n	8004a2a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e007      	b.n	8004a3a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0ee      	beq.n	8004a16 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d119      	bne.n	8004a90 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f04f 32ff 	mov.w	r2, #4294967295
 8004a64:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004a66:	f7fc fcdb 	bl	8001420 <HAL_GetTick>
 8004a6a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a6c:	e009      	b.n	8004a82 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a6e:	f7fc fcd7 	bl	8001420 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a7c:	d901      	bls.n	8004a82 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e007      	b.n	8004a92 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0ee      	beq.n	8004a6e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e049      	b.n	8004b40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7fc facd 	bl	8001060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f000 f957 	bl	8004d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d001      	beq.n	8004b60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e047      	b.n	8004bf0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a23      	ldr	r2, [pc, #140]	; (8004bfc <HAL_TIM_Base_Start+0xb4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d01d      	beq.n	8004bae <HAL_TIM_Base_Start+0x66>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7a:	d018      	beq.n	8004bae <HAL_TIM_Base_Start+0x66>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <HAL_TIM_Base_Start+0xb8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <HAL_TIM_Base_Start+0x66>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1e      	ldr	r2, [pc, #120]	; (8004c04 <HAL_TIM_Base_Start+0xbc>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00e      	beq.n	8004bae <HAL_TIM_Base_Start+0x66>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <HAL_TIM_Base_Start+0xc0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d009      	beq.n	8004bae <HAL_TIM_Base_Start+0x66>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1b      	ldr	r2, [pc, #108]	; (8004c0c <HAL_TIM_Base_Start+0xc4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d004      	beq.n	8004bae <HAL_TIM_Base_Start+0x66>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <HAL_TIM_Base_Start+0xc8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d115      	bne.n	8004bda <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	4b17      	ldr	r3, [pc, #92]	; (8004c14 <HAL_TIM_Base_Start+0xcc>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b06      	cmp	r3, #6
 8004bbe:	d015      	beq.n	8004bec <HAL_TIM_Base_Start+0xa4>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc6:	d011      	beq.n	8004bec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd8:	e008      	b.n	8004bec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0201 	orr.w	r2, r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e000      	b.n	8004bee <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40012c00 	.word	0x40012c00
 8004c00:	40000400 	.word	0x40000400
 8004c04:	40000800 	.word	0x40000800
 8004c08:	40013400 	.word	0x40013400
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40015000 	.word	0x40015000
 8004c14:	00010007 	.word	0x00010007

08004c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_TIM_ConfigClockSource+0x18>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e0a8      	b.n	8004d82 <HAL_TIM_ConfigClockSource+0x16a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d067      	beq.n	8004d3c <HAL_TIM_ConfigClockSource+0x124>
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d80b      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x70>
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d073      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0x144>
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d802      	bhi.n	8004c7e <HAL_TIM_ConfigClockSource+0x66>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d06f      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c7c:	e078      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d06c      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0x144>
 8004c82:	2b30      	cmp	r3, #48	; 0x30
 8004c84:	d06a      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004c86:	e073      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004c88:	2b70      	cmp	r3, #112	; 0x70
 8004c8a:	d00d      	beq.n	8004ca8 <HAL_TIM_ConfigClockSource+0x90>
 8004c8c:	2b70      	cmp	r3, #112	; 0x70
 8004c8e:	d804      	bhi.n	8004c9a <HAL_TIM_ConfigClockSource+0x82>
 8004c90:	2b50      	cmp	r3, #80	; 0x50
 8004c92:	d033      	beq.n	8004cfc <HAL_TIM_ConfigClockSource+0xe4>
 8004c94:	2b60      	cmp	r3, #96	; 0x60
 8004c96:	d041      	beq.n	8004d1c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004c98:	e06a      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9e:	d066      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x156>
 8004ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca4:	d017      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004ca6:	e063      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	6899      	ldr	r1, [r3, #8]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f000 f980 	bl	8004fbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	609a      	str	r2, [r3, #8]
      break;
 8004cd4:	e04c      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6899      	ldr	r1, [r3, #8]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f000 f969 	bl	8004fbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cf8:	609a      	str	r2, [r3, #8]
      break;
 8004cfa:	e039      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	6859      	ldr	r1, [r3, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f000 f8dd 	bl	8004ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2150      	movs	r1, #80	; 0x50
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 f936 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004d1a:	e029      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f000 f8fc 	bl	8004f26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2160      	movs	r1, #96	; 0x60
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 f926 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004d3a:	e019      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f000 f8bd 	bl	8004ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2140      	movs	r1, #64	; 0x40
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 f916 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004d5a:	e009      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f000 f90d 	bl	8004f86 <TIM_ITRx_SetConfig>
        break;
 8004d6c:	e000      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a42      	ldr	r2, [pc, #264]	; (8004ea8 <TIM_Base_SetConfig+0x11c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d013      	beq.n	8004dcc <TIM_Base_SetConfig+0x40>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004daa:	d00f      	beq.n	8004dcc <TIM_Base_SetConfig+0x40>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a3f      	ldr	r2, [pc, #252]	; (8004eac <TIM_Base_SetConfig+0x120>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_Base_SetConfig+0x40>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a3e      	ldr	r2, [pc, #248]	; (8004eb0 <TIM_Base_SetConfig+0x124>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_Base_SetConfig+0x40>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a3d      	ldr	r2, [pc, #244]	; (8004eb4 <TIM_Base_SetConfig+0x128>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a3c      	ldr	r2, [pc, #240]	; (8004eb8 <TIM_Base_SetConfig+0x12c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d108      	bne.n	8004dde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a31      	ldr	r2, [pc, #196]	; (8004ea8 <TIM_Base_SetConfig+0x11c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01f      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dec:	d01b      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a2e      	ldr	r2, [pc, #184]	; (8004eac <TIM_Base_SetConfig+0x120>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d017      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a2d      	ldr	r2, [pc, #180]	; (8004eb0 <TIM_Base_SetConfig+0x124>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a2c      	ldr	r2, [pc, #176]	; (8004eb4 <TIM_Base_SetConfig+0x128>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00f      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a2c      	ldr	r2, [pc, #176]	; (8004ebc <TIM_Base_SetConfig+0x130>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2b      	ldr	r2, [pc, #172]	; (8004ec0 <TIM_Base_SetConfig+0x134>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d007      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2a      	ldr	r2, [pc, #168]	; (8004ec4 <TIM_Base_SetConfig+0x138>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a25      	ldr	r2, [pc, #148]	; (8004eb8 <TIM_Base_SetConfig+0x12c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d108      	bne.n	8004e38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a12      	ldr	r2, [pc, #72]	; (8004ea8 <TIM_Base_SetConfig+0x11c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <TIM_Base_SetConfig+0x100>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a13      	ldr	r2, [pc, #76]	; (8004eb4 <TIM_Base_SetConfig+0x128>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00f      	beq.n	8004e8c <TIM_Base_SetConfig+0x100>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a13      	ldr	r2, [pc, #76]	; (8004ebc <TIM_Base_SetConfig+0x130>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00b      	beq.n	8004e8c <TIM_Base_SetConfig+0x100>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a12      	ldr	r2, [pc, #72]	; (8004ec0 <TIM_Base_SetConfig+0x134>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d007      	beq.n	8004e8c <TIM_Base_SetConfig+0x100>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a11      	ldr	r2, [pc, #68]	; (8004ec4 <TIM_Base_SetConfig+0x138>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <TIM_Base_SetConfig+0x100>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a0c      	ldr	r2, [pc, #48]	; (8004eb8 <TIM_Base_SetConfig+0x12c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d103      	bne.n	8004e94 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	615a      	str	r2, [r3, #20]
}
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40013400 	.word	0x40013400
 8004eb8:	40015000 	.word	0x40015000
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40014400 	.word	0x40014400
 8004ec4:	40014800 	.word	0x40014800

08004ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f023 0201 	bic.w	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f023 030a 	bic.w	r3, r3, #10
 8004f04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	621a      	str	r2, [r3, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b087      	sub	sp, #28
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f023 0210 	bic.w	r2, r3, #16
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	031b      	lsls	r3, r3, #12
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f043 0307 	orr.w	r3, r3, #7
 8004fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	021a      	lsls	r2, r3, #8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	609a      	str	r2, [r3, #8]
}
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005010:	2302      	movs	r3, #2
 8005012:	e06d      	b.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a30      	ldr	r2, [pc, #192]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d009      	beq.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a2f      	ldr	r2, [pc, #188]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d004      	beq.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a2d      	ldr	r2, [pc, #180]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d108      	bne.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005058:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1e      	ldr	r2, [pc, #120]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d01d      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005090:	d018      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1c      	ldr	r2, [pc, #112]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1a      	ldr	r2, [pc, #104]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00e      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a15      	ldr	r2, [pc, #84]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d009      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a16      	ldr	r2, [pc, #88]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a11      	ldr	r2, [pc, #68]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10c      	bne.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40013400 	.word	0x40013400
 8005104:	40015000 	.word	0x40015000
 8005108:	40000400 	.word	0x40000400
 800510c:	40000800 	.word	0x40000800
 8005110:	40014000 	.word	0x40014000

08005114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e040      	b.n	80051a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fb ffb2 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2224      	movs	r2, #36	; 0x24
 8005140:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0201 	bic.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fa94 	bl	8005680 <UART_SetConfig>
 8005158:	4603      	mov	r3, r0
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e022      	b.n	80051a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fc5c 	bl	8005a28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800517e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800518e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fce3 	bl	8005b6c <UART_CheckIdleState>
 80051a6:	4603      	mov	r3, r0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d12c      	bne.n	8005220 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <HAL_UART_Receive_DMA+0x22>
 80051cc:	88fb      	ldrh	r3, [r7, #6]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e025      	b.n	8005222 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_UART_Receive_DMA+0x34>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e01e      	b.n	8005222 <HAL_UART_Receive_DMA+0x72>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800520e:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	461a      	mov	r2, r3
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 fd6e 	bl	8005cf8 <UART_Start_Receive_DMA>
 800521c:	4603      	mov	r3, r0
 800521e:	e000      	b.n	8005222 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005220:	2302      	movs	r3, #2
  }
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005252:	4013      	ands	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d113      	bne.n	8005284 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00e      	beq.n	8005284 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d009      	beq.n	8005284 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 81cd 	beq.w	8005614 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	4798      	blx	r3
      }
      return;
 8005282:	e1c7      	b.n	8005614 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 80e3 	beq.w	8005452 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d105      	bne.n	80052a2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	4ba5      	ldr	r3, [pc, #660]	; (8005530 <HAL_UART_IRQHandler+0x304>)
 800529a:	4013      	ands	r3, r2
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80d8 	beq.w	8005452 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d010      	beq.n	80052ce <HAL_UART_IRQHandler+0xa2>
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2201      	movs	r2, #1
 80052bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052c4:	f043 0201 	orr.w	r2, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d010      	beq.n	80052fa <HAL_UART_IRQHandler+0xce>
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2202      	movs	r2, #2
 80052e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052f0:	f043 0204 	orr.w	r2, r3, #4
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d010      	beq.n	8005326 <HAL_UART_IRQHandler+0xfa>
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00b      	beq.n	8005326 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2204      	movs	r2, #4
 8005314:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800531c:	f043 0202 	orr.w	r2, r3, #2
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d015      	beq.n	800535c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d104      	bne.n	8005344 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00b      	beq.n	800535c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2208      	movs	r2, #8
 800534a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005352:	f043 0208 	orr.w	r2, r3, #8
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005362:	2b00      	cmp	r3, #0
 8005364:	d011      	beq.n	800538a <HAL_UART_IRQHandler+0x15e>
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00c      	beq.n	800538a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005380:	f043 0220 	orr.w	r2, r3, #32
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 8141 	beq.w	8005618 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00c      	beq.n	80053ba <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053cc:	2b40      	cmp	r3, #64	; 0x40
 80053ce:	d004      	beq.n	80053da <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d031      	beq.n	800543e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fd0d 	bl	8005dfa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d123      	bne.n	8005436 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005402:	2b00      	cmp	r3, #0
 8005404:	d013      	beq.n	800542e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540a:	4a4a      	ldr	r2, [pc, #296]	; (8005534 <HAL_UART_IRQHandler+0x308>)
 800540c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	4618      	mov	r0, r3
 8005414:	f7fc fafc 	bl	8001a10 <HAL_DMA_Abort_IT>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d017      	beq.n	800544e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005428:	4610      	mov	r0, r2
 800542a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542c:	e00f      	b.n	800544e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f910 	bl	8005654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005434:	e00b      	b.n	800544e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f90c 	bl	8005654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	e007      	b.n	800544e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f908 	bl	8005654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800544c:	e0e4      	b.n	8005618 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544e:	bf00      	nop
    return;
 8005450:	e0e2      	b.n	8005618 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005456:	2b01      	cmp	r3, #1
 8005458:	f040 80a7 	bne.w	80055aa <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 80a1 	beq.w	80055aa <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f003 0310 	and.w	r3, r3, #16
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 809b 	beq.w	80055aa <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2210      	movs	r2, #16
 800547a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005486:	2b40      	cmp	r3, #64	; 0x40
 8005488:	d156      	bne.n	8005538 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005494:	893b      	ldrh	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80c0 	beq.w	800561c <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054a2:	893a      	ldrh	r2, [r7, #8]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	f080 80b9 	bcs.w	800561c <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	893a      	ldrh	r2, [r7, #8]
 80054ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d02a      	beq.n	8005512 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054ca:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0201 	bic.w	r2, r2, #1
 80054da:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ea:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0210 	bic.w	r2, r2, #16
 8005506:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550c:	4618      	mov	r0, r3
 800550e:	f7fc fa46 	bl	800199e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800551e:	b29b      	uxth	r3, r3
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	b29b      	uxth	r3, r3
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f89e 	bl	8005668 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800552c:	e076      	b.n	800561c <HAL_UART_IRQHandler+0x3f0>
 800552e:	bf00      	nop
 8005530:	04000120 	.word	0x04000120
 8005534:	08005f9f 	.word	0x08005f9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005544:	b29b      	uxth	r3, r3
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d064      	beq.n	8005620 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8005556:	897b      	ldrh	r3, [r7, #10]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d061      	beq.n	8005620 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800556a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0201 	bic.w	r2, r2, #1
 800557a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0210 	bic.w	r2, r2, #16
 800559c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800559e:	897b      	ldrh	r3, [r7, #10]
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f860 	bl	8005668 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80055a8:	e03a      	b.n	8005620 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00d      	beq.n	80055d0 <HAL_UART_IRQHandler+0x3a4>
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80055c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fd17 	bl	8005ffc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055ce:	e02a      	b.n	8005626 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00d      	beq.n	80055f6 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01b      	beq.n	8005624 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	4798      	blx	r3
    }
    return;
 80055f4:	e016      	b.n	8005624 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d012      	beq.n	8005626 <HAL_UART_IRQHandler+0x3fa>
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00d      	beq.n	8005626 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fcdd 	bl	8005fca <UART_EndTransmit_IT>
    return;
 8005610:	bf00      	nop
 8005612:	e008      	b.n	8005626 <HAL_UART_IRQHandler+0x3fa>
      return;
 8005614:	bf00      	nop
 8005616:	e006      	b.n	8005626 <HAL_UART_IRQHandler+0x3fa>
    return;
 8005618:	bf00      	nop
 800561a:	e004      	b.n	8005626 <HAL_UART_IRQHandler+0x3fa>
      return;
 800561c:	bf00      	nop
 800561e:	e002      	b.n	8005626 <HAL_UART_IRQHandler+0x3fa>
      return;
 8005620:	bf00      	nop
 8005622:	e000      	b.n	8005626 <HAL_UART_IRQHandler+0x3fa>
    return;
 8005624:	bf00      	nop
  }

}
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4baa      	ldr	r3, [pc, #680]	; (8005954 <UART_SetConfig+0x2d4>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	6979      	ldr	r1, [r7, #20]
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a98      	ldr	r2, [pc, #608]	; (8005958 <UART_SetConfig+0x2d8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d121      	bne.n	8005740 <UART_SetConfig+0xc0>
 80056fc:	4b97      	ldr	r3, [pc, #604]	; (800595c <UART_SetConfig+0x2dc>)
 80056fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	2b03      	cmp	r3, #3
 8005706:	d817      	bhi.n	8005738 <UART_SetConfig+0xb8>
 8005708:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <UART_SetConfig+0x90>)
 800570a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570e:	bf00      	nop
 8005710:	08005721 	.word	0x08005721
 8005714:	0800572d 	.word	0x0800572d
 8005718:	08005733 	.word	0x08005733
 800571c:	08005727 	.word	0x08005727
 8005720:	2301      	movs	r3, #1
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e0b2      	b.n	800588c <UART_SetConfig+0x20c>
 8005726:	2302      	movs	r3, #2
 8005728:	77fb      	strb	r3, [r7, #31]
 800572a:	e0af      	b.n	800588c <UART_SetConfig+0x20c>
 800572c:	2304      	movs	r3, #4
 800572e:	77fb      	strb	r3, [r7, #31]
 8005730:	e0ac      	b.n	800588c <UART_SetConfig+0x20c>
 8005732:	2308      	movs	r3, #8
 8005734:	77fb      	strb	r3, [r7, #31]
 8005736:	e0a9      	b.n	800588c <UART_SetConfig+0x20c>
 8005738:	2310      	movs	r3, #16
 800573a:	77fb      	strb	r3, [r7, #31]
 800573c:	bf00      	nop
 800573e:	e0a5      	b.n	800588c <UART_SetConfig+0x20c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a86      	ldr	r2, [pc, #536]	; (8005960 <UART_SetConfig+0x2e0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d123      	bne.n	8005792 <UART_SetConfig+0x112>
 800574a:	4b84      	ldr	r3, [pc, #528]	; (800595c <UART_SetConfig+0x2dc>)
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005756:	d012      	beq.n	800577e <UART_SetConfig+0xfe>
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575c:	d802      	bhi.n	8005764 <UART_SetConfig+0xe4>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <UART_SetConfig+0xf2>
 8005762:	e012      	b.n	800578a <UART_SetConfig+0x10a>
 8005764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005768:	d00c      	beq.n	8005784 <UART_SetConfig+0x104>
 800576a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800576e:	d003      	beq.n	8005778 <UART_SetConfig+0xf8>
 8005770:	e00b      	b.n	800578a <UART_SetConfig+0x10a>
 8005772:	2300      	movs	r3, #0
 8005774:	77fb      	strb	r3, [r7, #31]
 8005776:	e089      	b.n	800588c <UART_SetConfig+0x20c>
 8005778:	2302      	movs	r3, #2
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e086      	b.n	800588c <UART_SetConfig+0x20c>
 800577e:	2304      	movs	r3, #4
 8005780:	77fb      	strb	r3, [r7, #31]
 8005782:	e083      	b.n	800588c <UART_SetConfig+0x20c>
 8005784:	2308      	movs	r3, #8
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e080      	b.n	800588c <UART_SetConfig+0x20c>
 800578a:	2310      	movs	r3, #16
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	bf00      	nop
 8005790:	e07c      	b.n	800588c <UART_SetConfig+0x20c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a73      	ldr	r2, [pc, #460]	; (8005964 <UART_SetConfig+0x2e4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d123      	bne.n	80057e4 <UART_SetConfig+0x164>
 800579c:	4b6f      	ldr	r3, [pc, #444]	; (800595c <UART_SetConfig+0x2dc>)
 800579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80057a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057a8:	d012      	beq.n	80057d0 <UART_SetConfig+0x150>
 80057aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057ae:	d802      	bhi.n	80057b6 <UART_SetConfig+0x136>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d007      	beq.n	80057c4 <UART_SetConfig+0x144>
 80057b4:	e012      	b.n	80057dc <UART_SetConfig+0x15c>
 80057b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057ba:	d00c      	beq.n	80057d6 <UART_SetConfig+0x156>
 80057bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80057c0:	d003      	beq.n	80057ca <UART_SetConfig+0x14a>
 80057c2:	e00b      	b.n	80057dc <UART_SetConfig+0x15c>
 80057c4:	2300      	movs	r3, #0
 80057c6:	77fb      	strb	r3, [r7, #31]
 80057c8:	e060      	b.n	800588c <UART_SetConfig+0x20c>
 80057ca:	2302      	movs	r3, #2
 80057cc:	77fb      	strb	r3, [r7, #31]
 80057ce:	e05d      	b.n	800588c <UART_SetConfig+0x20c>
 80057d0:	2304      	movs	r3, #4
 80057d2:	77fb      	strb	r3, [r7, #31]
 80057d4:	e05a      	b.n	800588c <UART_SetConfig+0x20c>
 80057d6:	2308      	movs	r3, #8
 80057d8:	77fb      	strb	r3, [r7, #31]
 80057da:	e057      	b.n	800588c <UART_SetConfig+0x20c>
 80057dc:	2310      	movs	r3, #16
 80057de:	77fb      	strb	r3, [r7, #31]
 80057e0:	bf00      	nop
 80057e2:	e053      	b.n	800588c <UART_SetConfig+0x20c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a5f      	ldr	r2, [pc, #380]	; (8005968 <UART_SetConfig+0x2e8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d123      	bne.n	8005836 <UART_SetConfig+0x1b6>
 80057ee:	4b5b      	ldr	r3, [pc, #364]	; (800595c <UART_SetConfig+0x2dc>)
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80057f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057fa:	d012      	beq.n	8005822 <UART_SetConfig+0x1a2>
 80057fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005800:	d802      	bhi.n	8005808 <UART_SetConfig+0x188>
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <UART_SetConfig+0x196>
 8005806:	e012      	b.n	800582e <UART_SetConfig+0x1ae>
 8005808:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800580c:	d00c      	beq.n	8005828 <UART_SetConfig+0x1a8>
 800580e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005812:	d003      	beq.n	800581c <UART_SetConfig+0x19c>
 8005814:	e00b      	b.n	800582e <UART_SetConfig+0x1ae>
 8005816:	2300      	movs	r3, #0
 8005818:	77fb      	strb	r3, [r7, #31]
 800581a:	e037      	b.n	800588c <UART_SetConfig+0x20c>
 800581c:	2302      	movs	r3, #2
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	e034      	b.n	800588c <UART_SetConfig+0x20c>
 8005822:	2304      	movs	r3, #4
 8005824:	77fb      	strb	r3, [r7, #31]
 8005826:	e031      	b.n	800588c <UART_SetConfig+0x20c>
 8005828:	2308      	movs	r3, #8
 800582a:	77fb      	strb	r3, [r7, #31]
 800582c:	e02e      	b.n	800588c <UART_SetConfig+0x20c>
 800582e:	2310      	movs	r3, #16
 8005830:	77fb      	strb	r3, [r7, #31]
 8005832:	bf00      	nop
 8005834:	e02a      	b.n	800588c <UART_SetConfig+0x20c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a4c      	ldr	r2, [pc, #304]	; (800596c <UART_SetConfig+0x2ec>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d123      	bne.n	8005888 <UART_SetConfig+0x208>
 8005840:	4b46      	ldr	r3, [pc, #280]	; (800595c <UART_SetConfig+0x2dc>)
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800584c:	d012      	beq.n	8005874 <UART_SetConfig+0x1f4>
 800584e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005852:	d802      	bhi.n	800585a <UART_SetConfig+0x1da>
 8005854:	2b00      	cmp	r3, #0
 8005856:	d007      	beq.n	8005868 <UART_SetConfig+0x1e8>
 8005858:	e012      	b.n	8005880 <UART_SetConfig+0x200>
 800585a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800585e:	d00c      	beq.n	800587a <UART_SetConfig+0x1fa>
 8005860:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005864:	d003      	beq.n	800586e <UART_SetConfig+0x1ee>
 8005866:	e00b      	b.n	8005880 <UART_SetConfig+0x200>
 8005868:	2300      	movs	r3, #0
 800586a:	77fb      	strb	r3, [r7, #31]
 800586c:	e00e      	b.n	800588c <UART_SetConfig+0x20c>
 800586e:	2302      	movs	r3, #2
 8005870:	77fb      	strb	r3, [r7, #31]
 8005872:	e00b      	b.n	800588c <UART_SetConfig+0x20c>
 8005874:	2304      	movs	r3, #4
 8005876:	77fb      	strb	r3, [r7, #31]
 8005878:	e008      	b.n	800588c <UART_SetConfig+0x20c>
 800587a:	2308      	movs	r3, #8
 800587c:	77fb      	strb	r3, [r7, #31]
 800587e:	e005      	b.n	800588c <UART_SetConfig+0x20c>
 8005880:	2310      	movs	r3, #16
 8005882:	77fb      	strb	r3, [r7, #31]
 8005884:	bf00      	nop
 8005886:	e001      	b.n	800588c <UART_SetConfig+0x20c>
 8005888:	2310      	movs	r3, #16
 800588a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005894:	d16e      	bne.n	8005974 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005896:	7ffb      	ldrb	r3, [r7, #31]
 8005898:	2b08      	cmp	r3, #8
 800589a:	d828      	bhi.n	80058ee <UART_SetConfig+0x26e>
 800589c:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <UART_SetConfig+0x224>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058c9 	.word	0x080058c9
 80058a8:	080058d1 	.word	0x080058d1
 80058ac:	080058d9 	.word	0x080058d9
 80058b0:	080058ef 	.word	0x080058ef
 80058b4:	080058df 	.word	0x080058df
 80058b8:	080058ef 	.word	0x080058ef
 80058bc:	080058ef 	.word	0x080058ef
 80058c0:	080058ef 	.word	0x080058ef
 80058c4:	080058e7 	.word	0x080058e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c8:	f7fe fda0 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 80058cc:	61b8      	str	r0, [r7, #24]
        break;
 80058ce:	e013      	b.n	80058f8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058d0:	f7fe fdbe 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 80058d4:	61b8      	str	r0, [r7, #24]
        break;
 80058d6:	e00f      	b.n	80058f8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058d8:	4b25      	ldr	r3, [pc, #148]	; (8005970 <UART_SetConfig+0x2f0>)
 80058da:	61bb      	str	r3, [r7, #24]
        break;
 80058dc:	e00c      	b.n	80058f8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058de:	f7fe fd1f 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 80058e2:	61b8      	str	r0, [r7, #24]
        break;
 80058e4:	e008      	b.n	80058f8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ea:	61bb      	str	r3, [r7, #24]
        break;
 80058ec:	e004      	b.n	80058f8 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	77bb      	strb	r3, [r7, #30]
        break;
 80058f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 8086 	beq.w	8005a0c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	005a      	lsls	r2, r3, #1
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	441a      	add	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	fbb2 f3f3 	udiv	r3, r2, r3
 8005914:	b29b      	uxth	r3, r3
 8005916:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2b0f      	cmp	r3, #15
 800591c:	d916      	bls.n	800594c <UART_SetConfig+0x2cc>
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005924:	d212      	bcs.n	800594c <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	b29b      	uxth	r3, r3
 800592a:	f023 030f 	bic.w	r3, r3, #15
 800592e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	b29b      	uxth	r3, r3
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	b29a      	uxth	r2, r3
 800593c:	89fb      	ldrh	r3, [r7, #14]
 800593e:	4313      	orrs	r3, r2
 8005940:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	89fa      	ldrh	r2, [r7, #14]
 8005948:	60da      	str	r2, [r3, #12]
 800594a:	e05f      	b.n	8005a0c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	77bb      	strb	r3, [r7, #30]
 8005950:	e05c      	b.n	8005a0c <UART_SetConfig+0x38c>
 8005952:	bf00      	nop
 8005954:	efff69f3 	.word	0xefff69f3
 8005958:	40013800 	.word	0x40013800
 800595c:	40021000 	.word	0x40021000
 8005960:	40004400 	.word	0x40004400
 8005964:	40004800 	.word	0x40004800
 8005968:	40004c00 	.word	0x40004c00
 800596c:	40005000 	.word	0x40005000
 8005970:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8005974:	7ffb      	ldrb	r3, [r7, #31]
 8005976:	2b08      	cmp	r3, #8
 8005978:	d827      	bhi.n	80059ca <UART_SetConfig+0x34a>
 800597a:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <UART_SetConfig+0x300>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	080059a5 	.word	0x080059a5
 8005984:	080059ad 	.word	0x080059ad
 8005988:	080059b5 	.word	0x080059b5
 800598c:	080059cb 	.word	0x080059cb
 8005990:	080059bb 	.word	0x080059bb
 8005994:	080059cb 	.word	0x080059cb
 8005998:	080059cb 	.word	0x080059cb
 800599c:	080059cb 	.word	0x080059cb
 80059a0:	080059c3 	.word	0x080059c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a4:	f7fe fd32 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 80059a8:	61b8      	str	r0, [r7, #24]
        break;
 80059aa:	e013      	b.n	80059d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ac:	f7fe fd50 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 80059b0:	61b8      	str	r0, [r7, #24]
        break;
 80059b2:	e00f      	b.n	80059d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059b4:	4b1b      	ldr	r3, [pc, #108]	; (8005a24 <UART_SetConfig+0x3a4>)
 80059b6:	61bb      	str	r3, [r7, #24]
        break;
 80059b8:	e00c      	b.n	80059d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ba:	f7fe fcb1 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 80059be:	61b8      	str	r0, [r7, #24]
        break;
 80059c0:	e008      	b.n	80059d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059c6:	61bb      	str	r3, [r7, #24]
        break;
 80059c8:	e004      	b.n	80059d4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	77bb      	strb	r3, [r7, #30]
        break;
 80059d2:	bf00      	nop
    }

    if (pclk != 0U)
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d018      	beq.n	8005a0c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	085a      	lsrs	r2, r3, #1
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	441a      	add	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b0f      	cmp	r3, #15
 80059f4:	d908      	bls.n	8005a08 <UART_SetConfig+0x388>
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059fc:	d204      	bcs.n	8005a08 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	60da      	str	r2, [r3, #12]
 8005a06:	e001      	b.n	8005a0c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a18:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3720      	adds	r7, #32
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	007a1200 	.word	0x007a1200

08005a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01a      	beq.n	8005b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b26:	d10a      	bne.n	8005b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	605a      	str	r2, [r3, #4]
  }
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b7c:	f7fb fc50 	bl	8001420 <HAL_GetTick>
 8005b80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d10e      	bne.n	8005bae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f82d 	bl	8005bfe <UART_WaitOnFlagUntilTimeout>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e023      	b.n	8005bf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d10e      	bne.n	8005bda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f817 	bl	8005bfe <UART_WaitOnFlagUntilTimeout>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e00d      	b.n	8005bf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2220      	movs	r2, #32
 8005be4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	603b      	str	r3, [r7, #0]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c0e:	e05e      	b.n	8005cce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c16:	d05a      	beq.n	8005cce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c18:	f7fb fc02 	bl	8001420 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d302      	bcc.n	8005c2e <UART_WaitOnFlagUntilTimeout+0x30>
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d11b      	bne.n	8005c66 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2220      	movs	r2, #32
 8005c52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2220      	movs	r2, #32
 8005c58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e043      	b.n	8005cee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d02c      	beq.n	8005cce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c82:	d124      	bne.n	8005cce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c9c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0201 	bic.w	r2, r2, #1
 8005cac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e00f      	b.n	8005cee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	bf0c      	ite	eq
 8005cde:	2301      	moveq	r3, #1
 8005ce0:	2300      	movne	r3, #0
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	79fb      	ldrb	r3, [r7, #7]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d091      	beq.n	8005c10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	4613      	mov	r3, r2
 8005d04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	88fa      	ldrh	r2, [r7, #6]
 8005d10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2222      	movs	r2, #34	; 0x22
 8005d20:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d02b      	beq.n	8005d82 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	4a25      	ldr	r2, [pc, #148]	; (8005dc4 <UART_Start_Receive_DMA+0xcc>)
 8005d30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d36:	4a24      	ldr	r2, [pc, #144]	; (8005dc8 <UART_Start_Receive_DMA+0xd0>)
 8005d38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3e:	4a23      	ldr	r2, [pc, #140]	; (8005dcc <UART_Start_Receive_DMA+0xd4>)
 8005d40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d46:	2200      	movs	r2, #0
 8005d48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3324      	adds	r3, #36	; 0x24
 8005d54:	4619      	mov	r1, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	88fb      	ldrh	r3, [r7, #6]
 8005d5e:	f7fb fdbf 	bl	80018e0 <HAL_DMA_Start_IT>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00c      	beq.n	8005d82 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2210      	movs	r2, #16
 8005d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e01c      	b.n	8005dbc <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d98:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0201 	orr.w	r2, r2, #1
 8005da8:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	08005e59 	.word	0x08005e59
 8005dc8:	08005eeb 	.word	0x08005eeb
 8005dcc:	08005f23 	.word	0x08005f23

08005dd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005de6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e10:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d107      	bne.n	8005e3a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0210 	bic.w	r2, r2, #16
 8005e38:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d02a      	beq.n	8005ec4 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e84:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0201 	bic.w	r2, r2, #1
 8005e94:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d107      	bne.n	8005ec4 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0210 	bic.w	r2, r2, #16
 8005ec2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d107      	bne.n	8005edc <UART_DMAReceiveCplt+0x84>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f7ff fbc7 	bl	8005668 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005eda:	e002      	b.n	8005ee2 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f001 fba9 	bl	8007634 <HAL_UART_RxCpltCallback>
}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b084      	sub	sp, #16
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d109      	bne.n	8005f14 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f06:	085b      	lsrs	r3, r3, #1
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff fbab 	bl	8005668 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f12:	e002      	b.n	8005f1a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff fb93 	bl	8005640 <HAL_UART_RxHalfCpltCallback>
}
 8005f1a:	bf00      	nop
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b086      	sub	sp, #24
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f34:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f46:	2b80      	cmp	r3, #128	; 0x80
 8005f48:	d109      	bne.n	8005f5e <UART_DMAError+0x3c>
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b21      	cmp	r3, #33	; 0x21
 8005f4e:	d106      	bne.n	8005f5e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005f58:	6978      	ldr	r0, [r7, #20]
 8005f5a:	f7ff ff39 	bl	8005dd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	d109      	bne.n	8005f80 <UART_DMAError+0x5e>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b22      	cmp	r3, #34	; 0x22
 8005f70:	d106      	bne.n	8005f80 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005f7a:	6978      	ldr	r0, [r7, #20]
 8005f7c:	f7ff ff3d 	bl	8005dfa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f86:	f043 0210 	orr.w	r2, r3, #16
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f90:	6978      	ldr	r0, [r7, #20]
 8005f92:	f7ff fb5f 	bl	8005654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f96:	bf00      	nop
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f7ff fb49 	bl	8005654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fc2:	bf00      	nop
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff fb1c 	bl	800562c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ff4:	bf00      	nop
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006018:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800601c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	b29b      	uxth	r3, r3
 800602a:	43db      	mvns	r3, r3
 800602c:	b29b      	uxth	r3, r3
 800602e:	4013      	ands	r3, r2
 8006030:	b29a      	uxth	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006046:	b084      	sub	sp, #16
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	f107 0014 	add.w	r0, r7, #20
 8006054:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	b004      	add	sp, #16
 8006086:	4770      	bx	lr

08006088 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b0c4      	sub	sp, #272	; 0x110
 800608c:	af00      	add	r7, sp, #0
 800608e:	1d3b      	adds	r3, r7, #4
 8006090:	6018      	str	r0, [r3, #0]
 8006092:	463b      	mov	r3, r7
 8006094:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006096:	463b      	mov	r3, r7
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	2b01      	cmp	r3, #1
 800609e:	f040 8557 	bne.w	8006b50 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80060a2:	463b      	mov	r3, r7
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699a      	ldr	r2, [r3, #24]
 80060a8:	463b      	mov	r3, r7
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d905      	bls.n	80060be <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80060b2:	463b      	mov	r3, r7
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060bc:	e004      	b.n	80060c8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80060be:	463b      	mov	r3, r7
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80060c8:	463b      	mov	r3, r7
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	7b1b      	ldrb	r3, [r3, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d12c      	bne.n	800612c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80060d2:	463b      	mov	r3, r7
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6959      	ldr	r1, [r3, #20]
 80060d8:	463b      	mov	r3, r7
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	88da      	ldrh	r2, [r3, #6]
 80060de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	1d38      	adds	r0, r7, #4
 80060e6:	6800      	ldr	r0, [r0, #0]
 80060e8:	f001 f912 	bl	8007310 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80060ec:	1d3b      	adds	r3, r7, #4
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	1d3b      	adds	r3, r7, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	4413      	add	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	463b      	mov	r3, r7
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	00da      	lsls	r2, r3, #3
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	4413      	add	r3, r2
 8006110:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006114:	f107 0310 	add.w	r3, r7, #16
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800611e:	b29a      	uxth	r2, r3
 8006120:	f107 0310 	add.w	r3, r7, #16
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	801a      	strh	r2, [r3, #0]
 8006128:	f000 bcdd 	b.w	8006ae6 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800612c:	463b      	mov	r3, r7
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	78db      	ldrb	r3, [r3, #3]
 8006132:	2b02      	cmp	r3, #2
 8006134:	f040 8347 	bne.w	80067c6 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006138:	463b      	mov	r3, r7
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6a1a      	ldr	r2, [r3, #32]
 800613e:	463b      	mov	r3, r7
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	429a      	cmp	r2, r3
 8006146:	f240 82eb 	bls.w	8006720 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800614a:	1d3b      	adds	r3, r7, #4
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	463b      	mov	r3, r7
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006164:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006168:	1d3b      	adds	r3, r7, #4
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	463b      	mov	r3, r7
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	441a      	add	r2, r3
 8006176:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800617a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800617e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006182:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618a:	b29b      	uxth	r3, r3
 800618c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800618e:	463b      	mov	r3, r7
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6a1a      	ldr	r2, [r3, #32]
 8006194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006198:	1ad2      	subs	r2, r2, r3
 800619a:	463b      	mov	r3, r7
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061a0:	1d3b      	adds	r3, r7, #4
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	463b      	mov	r3, r7
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 8159 	beq.w	800646e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061bc:	1d3b      	adds	r3, r7, #4
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	637b      	str	r3, [r7, #52]	; 0x34
 80061c2:	463b      	mov	r3, r7
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d164      	bne.n	8006296 <USB_EPStartXfer+0x20e>
 80061cc:	1d3b      	adds	r3, r7, #4
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d2:	1d3b      	adds	r3, r7, #4
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061da:	b29b      	uxth	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	4413      	add	r3, r2
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061e4:	463b      	mov	r3, r7
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	00da      	lsls	r2, r3, #3
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	4413      	add	r3, r2
 80061f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d112      	bne.n	8006224 <USB_EPStartXfer+0x19c>
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006208:	b29a      	uxth	r2, r3
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29b      	uxth	r3, r3
 8006214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800621c:	b29a      	uxth	r2, r3
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	801a      	strh	r2, [r3, #0]
 8006222:	e054      	b.n	80062ce <USB_EPStartXfer+0x246>
 8006224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006228:	2b3e      	cmp	r3, #62	; 0x3e
 800622a:	d817      	bhi.n	800625c <USB_EPStartXfer+0x1d4>
 800622c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006230:	085b      	lsrs	r3, r3, #1
 8006232:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <USB_EPStartXfer+0x1c4>
 8006242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006246:	3301      	adds	r3, #1
 8006248:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800624c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006250:	b29b      	uxth	r3, r3
 8006252:	029b      	lsls	r3, r3, #10
 8006254:	b29a      	uxth	r2, r3
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	801a      	strh	r2, [r3, #0]
 800625a:	e038      	b.n	80062ce <USB_EPStartXfer+0x246>
 800625c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	2b00      	cmp	r3, #0
 8006270:	d104      	bne.n	800627c <USB_EPStartXfer+0x1f4>
 8006272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006276:	3b01      	subs	r3, #1
 8006278:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800627c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006280:	b29b      	uxth	r3, r3
 8006282:	029b      	lsls	r3, r3, #10
 8006284:	b29b      	uxth	r3, r3
 8006286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800628e:	b29a      	uxth	r2, r3
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	801a      	strh	r2, [r3, #0]
 8006294:	e01b      	b.n	80062ce <USB_EPStartXfer+0x246>
 8006296:	463b      	mov	r3, r7
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d116      	bne.n	80062ce <USB_EPStartXfer+0x246>
 80062a0:	1d3b      	adds	r3, r7, #4
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ae:	4413      	add	r3, r2
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
 80062b2:	463b      	mov	r3, r7
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	00da      	lsls	r2, r3, #3
 80062ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062bc:	4413      	add	r3, r2
 80062be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062c2:	633b      	str	r3, [r7, #48]	; 0x30
 80062c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062ce:	463b      	mov	r3, r7
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	895b      	ldrh	r3, [r3, #10]
 80062d4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062d8:	463b      	mov	r3, r7
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6959      	ldr	r1, [r3, #20]
 80062de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80062e8:	1d38      	adds	r0, r7, #4
 80062ea:	6800      	ldr	r0, [r0, #0]
 80062ec:	f001 f810 	bl	8007310 <USB_WritePMA>
            ep->xfer_buff += len;
 80062f0:	463b      	mov	r3, r7
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695a      	ldr	r2, [r3, #20]
 80062f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062fa:	441a      	add	r2, r3
 80062fc:	463b      	mov	r3, r7
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006302:	463b      	mov	r3, r7
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6a1a      	ldr	r2, [r3, #32]
 8006308:	463b      	mov	r3, r7
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	429a      	cmp	r2, r3
 8006310:	d909      	bls.n	8006326 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8006312:	463b      	mov	r3, r7
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6a1a      	ldr	r2, [r3, #32]
 8006318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800631c:	1ad2      	subs	r2, r2, r3
 800631e:	463b      	mov	r3, r7
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	621a      	str	r2, [r3, #32]
 8006324:	e008      	b.n	8006338 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006326:	463b      	mov	r3, r7
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006330:	463b      	mov	r3, r7
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2200      	movs	r2, #0
 8006336:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006338:	463b      	mov	r3, r7
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d164      	bne.n	800640c <USB_EPStartXfer+0x384>
 8006342:	1d3b      	adds	r3, r7, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	1d3b      	adds	r3, r7, #4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006350:	b29b      	uxth	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	4413      	add	r3, r2
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	463b      	mov	r3, r7
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	00da      	lsls	r2, r3, #3
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d112      	bne.n	800639a <USB_EPStartXfer+0x312>
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	b29b      	uxth	r3, r3
 800637a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800637e:	b29a      	uxth	r2, r3
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	b29b      	uxth	r3, r3
 800638a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800638e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006392:	b29a      	uxth	r2, r3
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	801a      	strh	r2, [r3, #0]
 8006398:	e057      	b.n	800644a <USB_EPStartXfer+0x3c2>
 800639a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800639e:	2b3e      	cmp	r3, #62	; 0x3e
 80063a0:	d817      	bhi.n	80063d2 <USB_EPStartXfer+0x34a>
 80063a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a6:	085b      	lsrs	r3, r3, #1
 80063a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d004      	beq.n	80063c2 <USB_EPStartXfer+0x33a>
 80063b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063bc:	3301      	adds	r3, #1
 80063be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	029b      	lsls	r3, r3, #10
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	801a      	strh	r2, [r3, #0]
 80063d0:	e03b      	b.n	800644a <USB_EPStartXfer+0x3c2>
 80063d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e0:	f003 031f 	and.w	r3, r3, #31
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d104      	bne.n	80063f2 <USB_EPStartXfer+0x36a>
 80063e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063ec:	3b01      	subs	r3, #1
 80063ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	029b      	lsls	r3, r3, #10
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006404:	b29a      	uxth	r2, r3
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	801a      	strh	r2, [r3, #0]
 800640a:	e01e      	b.n	800644a <USB_EPStartXfer+0x3c2>
 800640c:	463b      	mov	r3, r7
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	785b      	ldrb	r3, [r3, #1]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d119      	bne.n	800644a <USB_EPStartXfer+0x3c2>
 8006416:	1d3b      	adds	r3, r7, #4
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
 800641c:	1d3b      	adds	r3, r7, #4
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006424:	b29b      	uxth	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	4413      	add	r3, r2
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
 800642e:	463b      	mov	r3, r7
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	00da      	lsls	r2, r3, #3
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	4413      	add	r3, r2
 800643a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800643e:	623b      	str	r3, [r7, #32]
 8006440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006444:	b29a      	uxth	r2, r3
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800644a:	463b      	mov	r3, r7
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	891b      	ldrh	r3, [r3, #8]
 8006450:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006454:	463b      	mov	r3, r7
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6959      	ldr	r1, [r3, #20]
 800645a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800645e:	b29b      	uxth	r3, r3
 8006460:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006464:	1d38      	adds	r0, r7, #4
 8006466:	6800      	ldr	r0, [r0, #0]
 8006468:	f000 ff52 	bl	8007310 <USB_WritePMA>
 800646c:	e33b      	b.n	8006ae6 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800646e:	463b      	mov	r3, r7
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	785b      	ldrb	r3, [r3, #1]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d164      	bne.n	8006542 <USB_EPStartXfer+0x4ba>
 8006478:	1d3b      	adds	r3, r7, #4
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800647e:	1d3b      	adds	r3, r7, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006486:	b29b      	uxth	r3, r3
 8006488:	461a      	mov	r2, r3
 800648a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648c:	4413      	add	r3, r2
 800648e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006490:	463b      	mov	r3, r7
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	00da      	lsls	r2, r3, #3
 8006498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800649a:	4413      	add	r3, r2
 800649c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80064a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d112      	bne.n	80064d0 <USB_EPStartXfer+0x448>
 80064aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b8:	801a      	strh	r2, [r3, #0]
 80064ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064cc:	801a      	strh	r2, [r3, #0]
 80064ce:	e057      	b.n	8006580 <USB_EPStartXfer+0x4f8>
 80064d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064d4:	2b3e      	cmp	r3, #62	; 0x3e
 80064d6:	d817      	bhi.n	8006508 <USB_EPStartXfer+0x480>
 80064d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064dc:	085b      	lsrs	r3, r3, #1
 80064de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d004      	beq.n	80064f8 <USB_EPStartXfer+0x470>
 80064ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f2:	3301      	adds	r3, #1
 80064f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	029b      	lsls	r3, r3, #10
 8006500:	b29a      	uxth	r2, r3
 8006502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006504:	801a      	strh	r2, [r3, #0]
 8006506:	e03b      	b.n	8006580 <USB_EPStartXfer+0x4f8>
 8006508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800650c:	095b      	lsrs	r3, r3, #5
 800650e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	2b00      	cmp	r3, #0
 800651c:	d104      	bne.n	8006528 <USB_EPStartXfer+0x4a0>
 800651e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006522:	3b01      	subs	r3, #1
 8006524:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800652c:	b29b      	uxth	r3, r3
 800652e:	029b      	lsls	r3, r3, #10
 8006530:	b29b      	uxth	r3, r3
 8006532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800653a:	b29a      	uxth	r2, r3
 800653c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	e01e      	b.n	8006580 <USB_EPStartXfer+0x4f8>
 8006542:	463b      	mov	r3, r7
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d119      	bne.n	8006580 <USB_EPStartXfer+0x4f8>
 800654c:	1d3b      	adds	r3, r7, #4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	657b      	str	r3, [r7, #84]	; 0x54
 8006552:	1d3b      	adds	r3, r7, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655a:	b29b      	uxth	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006560:	4413      	add	r3, r2
 8006562:	657b      	str	r3, [r7, #84]	; 0x54
 8006564:	463b      	mov	r3, r7
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	00da      	lsls	r2, r3, #3
 800656c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800656e:	4413      	add	r3, r2
 8006570:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006574:	653b      	str	r3, [r7, #80]	; 0x50
 8006576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800657a:	b29a      	uxth	r2, r3
 800657c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800657e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006580:	463b      	mov	r3, r7
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	891b      	ldrh	r3, [r3, #8]
 8006586:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800658a:	463b      	mov	r3, r7
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6959      	ldr	r1, [r3, #20]
 8006590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006594:	b29b      	uxth	r3, r3
 8006596:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800659a:	1d38      	adds	r0, r7, #4
 800659c:	6800      	ldr	r0, [r0, #0]
 800659e:	f000 feb7 	bl	8007310 <USB_WritePMA>
            ep->xfer_buff += len;
 80065a2:	463b      	mov	r3, r7
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	695a      	ldr	r2, [r3, #20]
 80065a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ac:	441a      	add	r2, r3
 80065ae:	463b      	mov	r3, r7
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065b4:	463b      	mov	r3, r7
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6a1a      	ldr	r2, [r3, #32]
 80065ba:	463b      	mov	r3, r7
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d909      	bls.n	80065d8 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80065c4:	463b      	mov	r3, r7
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6a1a      	ldr	r2, [r3, #32]
 80065ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ce:	1ad2      	subs	r2, r2, r3
 80065d0:	463b      	mov	r3, r7
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	621a      	str	r2, [r3, #32]
 80065d6:	e008      	b.n	80065ea <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80065d8:	463b      	mov	r3, r7
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80065e2:	463b      	mov	r3, r7
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2200      	movs	r2, #0
 80065e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065ea:	1d3b      	adds	r3, r7, #4
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	647b      	str	r3, [r7, #68]	; 0x44
 80065f0:	463b      	mov	r3, r7
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	785b      	ldrb	r3, [r3, #1]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d164      	bne.n	80066c4 <USB_EPStartXfer+0x63c>
 80065fa:	1d3b      	adds	r3, r7, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006600:	1d3b      	adds	r3, r7, #4
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006608:	b29b      	uxth	r3, r3
 800660a:	461a      	mov	r2, r3
 800660c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660e:	4413      	add	r3, r2
 8006610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006612:	463b      	mov	r3, r7
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	00da      	lsls	r2, r3, #3
 800661a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800661c:	4413      	add	r3, r2
 800661e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006622:	63bb      	str	r3, [r7, #56]	; 0x38
 8006624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d112      	bne.n	8006652 <USB_EPStartXfer+0x5ca>
 800662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006636:	b29a      	uxth	r2, r3
 8006638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663a:	801a      	strh	r2, [r3, #0]
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664a:	b29a      	uxth	r2, r3
 800664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	e054      	b.n	80066fc <USB_EPStartXfer+0x674>
 8006652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006656:	2b3e      	cmp	r3, #62	; 0x3e
 8006658:	d817      	bhi.n	800668a <USB_EPStartXfer+0x602>
 800665a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800665e:	085b      	lsrs	r3, r3, #1
 8006660:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <USB_EPStartXfer+0x5f2>
 8006670:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006674:	3301      	adds	r3, #1
 8006676:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800667a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800667e:	b29b      	uxth	r3, r3
 8006680:	029b      	lsls	r3, r3, #10
 8006682:	b29a      	uxth	r2, r3
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	801a      	strh	r2, [r3, #0]
 8006688:	e038      	b.n	80066fc <USB_EPStartXfer+0x674>
 800668a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006698:	f003 031f 	and.w	r3, r3, #31
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <USB_EPStartXfer+0x622>
 80066a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066a4:	3b01      	subs	r3, #1
 80066a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	029b      	lsls	r3, r3, #10
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066bc:	b29a      	uxth	r2, r3
 80066be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c0:	801a      	strh	r2, [r3, #0]
 80066c2:	e01b      	b.n	80066fc <USB_EPStartXfer+0x674>
 80066c4:	463b      	mov	r3, r7
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	785b      	ldrb	r3, [r3, #1]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d116      	bne.n	80066fc <USB_EPStartXfer+0x674>
 80066ce:	1d3b      	adds	r3, r7, #4
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066dc:	4413      	add	r3, r2
 80066de:	647b      	str	r3, [r7, #68]	; 0x44
 80066e0:	463b      	mov	r3, r7
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	00da      	lsls	r2, r3, #3
 80066e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ea:	4413      	add	r3, r2
 80066ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066f0:	643b      	str	r3, [r7, #64]	; 0x40
 80066f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066fc:	463b      	mov	r3, r7
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	895b      	ldrh	r3, [r3, #10]
 8006702:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006706:	463b      	mov	r3, r7
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6959      	ldr	r1, [r3, #20]
 800670c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006710:	b29b      	uxth	r3, r3
 8006712:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006716:	1d38      	adds	r0, r7, #4
 8006718:	6800      	ldr	r0, [r0, #0]
 800671a:	f000 fdf9 	bl	8007310 <USB_WritePMA>
 800671e:	e1e2      	b.n	8006ae6 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006720:	463b      	mov	r3, r7
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800672a:	1d3b      	adds	r3, r7, #4
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	463b      	mov	r3, r7
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	b29b      	uxth	r3, r3
 800673c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006744:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006748:	1d3b      	adds	r3, r7, #4
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	463b      	mov	r3, r7
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	441a      	add	r2, r3
 8006756:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800675a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676a:	b29b      	uxth	r3, r3
 800676c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800676e:	1d3b      	adds	r3, r7, #4
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	663b      	str	r3, [r7, #96]	; 0x60
 8006774:	1d3b      	adds	r3, r7, #4
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677c:	b29b      	uxth	r3, r3
 800677e:	461a      	mov	r2, r3
 8006780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006782:	4413      	add	r3, r2
 8006784:	663b      	str	r3, [r7, #96]	; 0x60
 8006786:	463b      	mov	r3, r7
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	00da      	lsls	r2, r3, #3
 800678e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006790:	4413      	add	r3, r2
 8006792:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006796:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800679c:	b29a      	uxth	r2, r3
 800679e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067a2:	463b      	mov	r3, r7
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	891b      	ldrh	r3, [r3, #8]
 80067a8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067ac:	463b      	mov	r3, r7
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6959      	ldr	r1, [r3, #20]
 80067b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80067bc:	1d38      	adds	r0, r7, #4
 80067be:	6800      	ldr	r0, [r0, #0]
 80067c0:	f000 fda6 	bl	8007310 <USB_WritePMA>
 80067c4:	e18f      	b.n	8006ae6 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	463b      	mov	r3, r7
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 808f 	beq.w	8006900 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067e2:	1d3b      	adds	r3, r7, #4
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80067e8:	463b      	mov	r3, r7
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	785b      	ldrb	r3, [r3, #1]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d164      	bne.n	80068bc <USB_EPStartXfer+0x834>
 80067f2:	1d3b      	adds	r3, r7, #4
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	673b      	str	r3, [r7, #112]	; 0x70
 80067f8:	1d3b      	adds	r3, r7, #4
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006800:	b29b      	uxth	r3, r3
 8006802:	461a      	mov	r2, r3
 8006804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006806:	4413      	add	r3, r2
 8006808:	673b      	str	r3, [r7, #112]	; 0x70
 800680a:	463b      	mov	r3, r7
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	00da      	lsls	r2, r3, #3
 8006812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006814:	4413      	add	r3, r2
 8006816:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800681a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800681c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006820:	2b00      	cmp	r3, #0
 8006822:	d112      	bne.n	800684a <USB_EPStartXfer+0x7c2>
 8006824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	b29b      	uxth	r3, r3
 800682a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800682e:	b29a      	uxth	r2, r3
 8006830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006832:	801a      	strh	r2, [r3, #0]
 8006834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	b29b      	uxth	r3, r3
 800683a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800683e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006842:	b29a      	uxth	r2, r3
 8006844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006846:	801a      	strh	r2, [r3, #0]
 8006848:	e054      	b.n	80068f4 <USB_EPStartXfer+0x86c>
 800684a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800684e:	2b3e      	cmp	r3, #62	; 0x3e
 8006850:	d817      	bhi.n	8006882 <USB_EPStartXfer+0x7fa>
 8006852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006856:	085b      	lsrs	r3, r3, #1
 8006858:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800685c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <USB_EPStartXfer+0x7ea>
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686c:	3301      	adds	r3, #1
 800686e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006876:	b29b      	uxth	r3, r3
 8006878:	029b      	lsls	r3, r3, #10
 800687a:	b29a      	uxth	r2, r3
 800687c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	e038      	b.n	80068f4 <USB_EPStartXfer+0x86c>
 8006882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006886:	095b      	lsrs	r3, r3, #5
 8006888:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800688c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006890:	f003 031f 	and.w	r3, r3, #31
 8006894:	2b00      	cmp	r3, #0
 8006896:	d104      	bne.n	80068a2 <USB_EPStartXfer+0x81a>
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689c:	3b01      	subs	r3, #1
 800689e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	029b      	lsls	r3, r3, #10
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b8:	801a      	strh	r2, [r3, #0]
 80068ba:	e01b      	b.n	80068f4 <USB_EPStartXfer+0x86c>
 80068bc:	463b      	mov	r3, r7
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d116      	bne.n	80068f4 <USB_EPStartXfer+0x86c>
 80068c6:	1d3b      	adds	r3, r7, #4
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d4:	4413      	add	r3, r2
 80068d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80068d8:	463b      	mov	r3, r7
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	00da      	lsls	r2, r3, #3
 80068e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068e2:	4413      	add	r3, r2
 80068e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068e8:	677b      	str	r3, [r7, #116]	; 0x74
 80068ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80068f4:	463b      	mov	r3, r7
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	895b      	ldrh	r3, [r3, #10]
 80068fa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80068fe:	e097      	b.n	8006a30 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006900:	463b      	mov	r3, r7
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	785b      	ldrb	r3, [r3, #1]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d168      	bne.n	80069dc <USB_EPStartXfer+0x954>
 800690a:	1d3b      	adds	r3, r7, #4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006912:	1d3b      	adds	r3, r7, #4
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800691a:	b29b      	uxth	r3, r3
 800691c:	461a      	mov	r2, r3
 800691e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006922:	4413      	add	r3, r2
 8006924:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006928:	463b      	mov	r3, r7
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	00da      	lsls	r2, r3, #3
 8006930:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006934:	4413      	add	r3, r2
 8006936:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800693a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800693c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d112      	bne.n	800696a <USB_EPStartXfer+0x8e2>
 8006944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800694e:	b29a      	uxth	r2, r3
 8006950:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	b29b      	uxth	r3, r3
 800695a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800695e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006962:	b29a      	uxth	r2, r3
 8006964:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006966:	801a      	strh	r2, [r3, #0]
 8006968:	e05d      	b.n	8006a26 <USB_EPStartXfer+0x99e>
 800696a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800696e:	2b3e      	cmp	r3, #62	; 0x3e
 8006970:	d817      	bhi.n	80069a2 <USB_EPStartXfer+0x91a>
 8006972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006976:	085b      	lsrs	r3, r3, #1
 8006978:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800697c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d004      	beq.n	8006992 <USB_EPStartXfer+0x90a>
 8006988:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800698c:	3301      	adds	r3, #1
 800698e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006992:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006996:	b29b      	uxth	r3, r3
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	b29a      	uxth	r2, r3
 800699c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800699e:	801a      	strh	r2, [r3, #0]
 80069a0:	e041      	b.n	8006a26 <USB_EPStartXfer+0x99e>
 80069a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b0:	f003 031f 	and.w	r3, r3, #31
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d104      	bne.n	80069c2 <USB_EPStartXfer+0x93a>
 80069b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069bc:	3b01      	subs	r3, #1
 80069be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	029b      	lsls	r3, r3, #10
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	e024      	b.n	8006a26 <USB_EPStartXfer+0x99e>
 80069dc:	463b      	mov	r3, r7
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d11f      	bne.n	8006a26 <USB_EPStartXfer+0x99e>
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069ee:	1d3b      	adds	r3, r7, #4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	461a      	mov	r2, r3
 80069fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069fe:	4413      	add	r3, r2
 8006a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a04:	463b      	mov	r3, r7
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	00da      	lsls	r2, r3, #3
 8006a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a10:	4413      	add	r3, r2
 8006a12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a26:	463b      	mov	r3, r7
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	891b      	ldrh	r3, [r3, #8]
 8006a2c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a30:	463b      	mov	r3, r7
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6959      	ldr	r1, [r3, #20]
 8006a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006a40:	1d38      	adds	r0, r7, #4
 8006a42:	6800      	ldr	r0, [r0, #0]
 8006a44:	f000 fc64 	bl	8007310 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006a48:	463b      	mov	r3, r7
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	785b      	ldrb	r3, [r3, #1]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d122      	bne.n	8006a98 <USB_EPStartXfer+0xa10>
 8006a52:	1d3b      	adds	r3, r7, #4
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	463b      	mov	r3, r7
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006a70:	1d3b      	adds	r3, r7, #4
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	463b      	mov	r3, r7
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	441a      	add	r2, r3
 8006a7e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	8013      	strh	r3, [r2, #0]
 8006a96:	e026      	b.n	8006ae6 <USB_EPStartXfer+0xa5e>
 8006a98:	463b      	mov	r3, r7
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	785b      	ldrb	r3, [r3, #1]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d121      	bne.n	8006ae6 <USB_EPStartXfer+0xa5e>
 8006aa2:	1d3b      	adds	r3, r7, #4
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006ac0:	1d3b      	adds	r3, r7, #4
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	463b      	mov	r3, r7
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	441a      	add	r2, r3
 8006ace:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ada:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006ae6:	1d3b      	adds	r3, r7, #4
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	463b      	mov	r3, r7
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f107 020e 	add.w	r2, r7, #14
 8006afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b04:	8013      	strh	r3, [r2, #0]
 8006b06:	f107 030e 	add.w	r3, r7, #14
 8006b0a:	f107 020e 	add.w	r2, r7, #14
 8006b0e:	8812      	ldrh	r2, [r2, #0]
 8006b10:	f082 0210 	eor.w	r2, r2, #16
 8006b14:	801a      	strh	r2, [r3, #0]
 8006b16:	f107 030e 	add.w	r3, r7, #14
 8006b1a:	f107 020e 	add.w	r2, r7, #14
 8006b1e:	8812      	ldrh	r2, [r2, #0]
 8006b20:	f082 0220 	eor.w	r2, r2, #32
 8006b24:	801a      	strh	r2, [r3, #0]
 8006b26:	1d3b      	adds	r3, r7, #4
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	441a      	add	r2, r3
 8006b34:	f107 030e 	add.w	r3, r7, #14
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8013      	strh	r3, [r2, #0]
 8006b4e:	e3b5      	b.n	80072bc <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006b50:	463b      	mov	r3, r7
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	7b1b      	ldrb	r3, [r3, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f040 8090 	bne.w	8006c7c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	463b      	mov	r3, r7
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d90e      	bls.n	8006b8a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006b6c:	463b      	mov	r3, r7
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006b76:	463b      	mov	r3, r7
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	699a      	ldr	r2, [r3, #24]
 8006b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b80:	1ad2      	subs	r2, r2, r3
 8006b82:	463b      	mov	r3, r7
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	619a      	str	r2, [r3, #24]
 8006b88:	e008      	b.n	8006b9c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006b8a:	463b      	mov	r3, r7
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006b94:	463b      	mov	r3, r7
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b9c:	1d3b      	adds	r3, r7, #4
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ba4:	1d3b      	adds	r3, r7, #4
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bba:	463b      	mov	r3, r7
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	00da      	lsls	r2, r3, #3
 8006bc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d116      	bne.n	8006c06 <USB_EPStartXfer+0xb7e>
 8006bd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bea:	801a      	strh	r2, [r3, #0]
 8006bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	e32c      	b.n	8007260 <USB_EPStartXfer+0x11d8>
 8006c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c0a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c0c:	d818      	bhi.n	8006c40 <USB_EPStartXfer+0xbb8>
 8006c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c12:	085b      	lsrs	r3, r3, #1
 8006c14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d004      	beq.n	8006c2e <USB_EPStartXfer+0xba6>
 8006c24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c28:	3301      	adds	r3, #1
 8006c2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	029b      	lsls	r3, r3, #10
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c3c:	801a      	strh	r2, [r3, #0]
 8006c3e:	e30f      	b.n	8007260 <USB_EPStartXfer+0x11d8>
 8006c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c44:	095b      	lsrs	r3, r3, #5
 8006c46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c4e:	f003 031f 	and.w	r3, r3, #31
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d104      	bne.n	8006c60 <USB_EPStartXfer+0xbd8>
 8006c56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	029b      	lsls	r3, r3, #10
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c78:	801a      	strh	r2, [r3, #0]
 8006c7a:	e2f1      	b.n	8007260 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	78db      	ldrb	r3, [r3, #3]
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	f040 818f 	bne.w	8006fa6 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c88:	463b      	mov	r3, r7
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	785b      	ldrb	r3, [r3, #1]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d175      	bne.n	8006d7e <USB_EPStartXfer+0xcf6>
 8006c92:	1d3b      	adds	r3, r7, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c9a:	1d3b      	adds	r3, r7, #4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006caa:	4413      	add	r3, r2
 8006cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cb0:	463b      	mov	r3, r7
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	00da      	lsls	r2, r3, #3
 8006cb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d116      	bne.n	8006cfe <USB_EPStartXfer+0xc76>
 8006cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ce2:	801a      	strh	r2, [r3, #0]
 8006ce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cfa:	801a      	strh	r2, [r3, #0]
 8006cfc:	e065      	b.n	8006dca <USB_EPStartXfer+0xd42>
 8006cfe:	463b      	mov	r3, r7
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	2b3e      	cmp	r3, #62	; 0x3e
 8006d06:	d81a      	bhi.n	8006d3e <USB_EPStartXfer+0xcb6>
 8006d08:	463b      	mov	r3, r7
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	085b      	lsrs	r3, r3, #1
 8006d10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d14:	463b      	mov	r3, r7
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d004      	beq.n	8006d2c <USB_EPStartXfer+0xca4>
 8006d22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d26:	3301      	adds	r3, #1
 8006d28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	029b      	lsls	r3, r3, #10
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	e045      	b.n	8006dca <USB_EPStartXfer+0xd42>
 8006d3e:	463b      	mov	r3, r7
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d4a:	463b      	mov	r3, r7
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 031f 	and.w	r3, r3, #31
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d104      	bne.n	8006d62 <USB_EPStartXfer+0xcda>
 8006d58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	029b      	lsls	r3, r3, #10
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	e025      	b.n	8006dca <USB_EPStartXfer+0xd42>
 8006d7e:	463b      	mov	r3, r7
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	785b      	ldrb	r3, [r3, #1]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d120      	bne.n	8006dca <USB_EPStartXfer+0xd42>
 8006d88:	1d3b      	adds	r3, r7, #4
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d90:	1d3b      	adds	r3, r7, #4
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006da0:	4413      	add	r3, r2
 8006da2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006da6:	463b      	mov	r3, r7
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	00da      	lsls	r2, r3, #3
 8006dae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006db2:	4413      	add	r3, r2
 8006db4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dc8:	801a      	strh	r2, [r3, #0]
 8006dca:	1d3b      	adds	r3, r7, #4
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	785b      	ldrb	r3, [r3, #1]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d175      	bne.n	8006ec8 <USB_EPStartXfer+0xe40>
 8006ddc:	1d3b      	adds	r3, r7, #4
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006de4:	1d3b      	adds	r3, r7, #4
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006df4:	4413      	add	r3, r2
 8006df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006dfa:	463b      	mov	r3, r7
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	00da      	lsls	r2, r3, #3
 8006e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e06:	4413      	add	r3, r2
 8006e08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e10:	463b      	mov	r3, r7
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d116      	bne.n	8006e48 <USB_EPStartXfer+0xdc0>
 8006e1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e2c:	801a      	strh	r2, [r3, #0]
 8006e2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e44:	801a      	strh	r2, [r3, #0]
 8006e46:	e061      	b.n	8006f0c <USB_EPStartXfer+0xe84>
 8006e48:	463b      	mov	r3, r7
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e50:	d81a      	bhi.n	8006e88 <USB_EPStartXfer+0xe00>
 8006e52:	463b      	mov	r3, r7
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	085b      	lsrs	r3, r3, #1
 8006e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e5e:	463b      	mov	r3, r7
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <USB_EPStartXfer+0xdee>
 8006e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e70:	3301      	adds	r3, #1
 8006e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	029b      	lsls	r3, r3, #10
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	e041      	b.n	8006f0c <USB_EPStartXfer+0xe84>
 8006e88:	463b      	mov	r3, r7
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	095b      	lsrs	r3, r3, #5
 8006e90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e94:	463b      	mov	r3, r7
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 031f 	and.w	r3, r3, #31
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d104      	bne.n	8006eac <USB_EPStartXfer+0xe24>
 8006ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	029b      	lsls	r3, r3, #10
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ec4:	801a      	strh	r2, [r3, #0]
 8006ec6:	e021      	b.n	8006f0c <USB_EPStartXfer+0xe84>
 8006ec8:	463b      	mov	r3, r7
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	785b      	ldrb	r3, [r3, #1]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d11c      	bne.n	8006f0c <USB_EPStartXfer+0xe84>
 8006ed2:	1d3b      	adds	r3, r7, #4
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ee8:	463b      	mov	r3, r7
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	00da      	lsls	r2, r3, #3
 8006ef0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006efe:	463b      	mov	r3, r7
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f0a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006f0c:	463b      	mov	r3, r7
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 81a4 	beq.w	8007260 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006f18:	1d3b      	adds	r3, r7, #4
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	463b      	mov	r3, r7
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f2c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <USB_EPStartXfer+0xebc>
 8006f38:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10d      	bne.n	8006f60 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f44:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f040 8187 	bne.w	8007260 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f52:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f040 8180 	bne.w	8007260 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006f60:	1d3b      	adds	r3, r7, #4
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	463b      	mov	r3, r7
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006f7e:	1d3b      	adds	r3, r7, #4
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	463b      	mov	r3, r7
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	441a      	add	r2, r3
 8006f8c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	8013      	strh	r3, [r2, #0]
 8006fa4:	e15c      	b.n	8007260 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	78db      	ldrb	r3, [r3, #3]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	f040 8155 	bne.w	800725c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006fb2:	463b      	mov	r3, r7
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	699a      	ldr	r2, [r3, #24]
 8006fb8:	463b      	mov	r3, r7
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d90e      	bls.n	8006fe0 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006fcc:	463b      	mov	r3, r7
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fd6:	1ad2      	subs	r2, r2, r3
 8006fd8:	463b      	mov	r3, r7
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	619a      	str	r2, [r3, #24]
 8006fde:	e008      	b.n	8006ff2 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006fe0:	463b      	mov	r3, r7
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006fea:	463b      	mov	r3, r7
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	785b      	ldrb	r3, [r3, #1]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d16f      	bne.n	80070dc <USB_EPStartXfer+0x1054>
 8006ffc:	1d3b      	adds	r3, r7, #4
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007004:	1d3b      	adds	r3, r7, #4
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800700c:	b29b      	uxth	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007014:	4413      	add	r3, r2
 8007016:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800701a:	463b      	mov	r3, r7
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	00da      	lsls	r2, r3, #3
 8007022:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007026:	4413      	add	r3, r2
 8007028:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800702c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d116      	bne.n	8007066 <USB_EPStartXfer+0xfde>
 8007038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	b29b      	uxth	r3, r3
 8007040:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007044:	b29a      	uxth	r2, r3
 8007046:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800704a:	801a      	strh	r2, [r3, #0]
 800704c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800705c:	b29a      	uxth	r2, r3
 800705e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	e05f      	b.n	8007126 <USB_EPStartXfer+0x109e>
 8007066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800706a:	2b3e      	cmp	r3, #62	; 0x3e
 800706c:	d818      	bhi.n	80070a0 <USB_EPStartXfer+0x1018>
 800706e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007072:	085b      	lsrs	r3, r3, #1
 8007074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <USB_EPStartXfer+0x1006>
 8007084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007088:	3301      	adds	r3, #1
 800708a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800708e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007092:	b29b      	uxth	r3, r3
 8007094:	029b      	lsls	r3, r3, #10
 8007096:	b29a      	uxth	r2, r3
 8007098:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	e042      	b.n	8007126 <USB_EPStartXfer+0x109e>
 80070a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070a4:	095b      	lsrs	r3, r3, #5
 80070a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d104      	bne.n	80070c0 <USB_EPStartXfer+0x1038>
 80070b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ba:	3b01      	subs	r3, #1
 80070bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	029b      	lsls	r3, r3, #10
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070d8:	801a      	strh	r2, [r3, #0]
 80070da:	e024      	b.n	8007126 <USB_EPStartXfer+0x109e>
 80070dc:	463b      	mov	r3, r7
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d11f      	bne.n	8007126 <USB_EPStartXfer+0x109e>
 80070e6:	1d3b      	adds	r3, r7, #4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070ee:	1d3b      	adds	r3, r7, #4
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070fe:	4413      	add	r3, r2
 8007100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007104:	463b      	mov	r3, r7
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	00da      	lsls	r2, r3, #3
 800710c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007110:	4413      	add	r3, r2
 8007112:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800711a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800711e:	b29a      	uxth	r2, r3
 8007120:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007124:	801a      	strh	r2, [r3, #0]
 8007126:	1d3b      	adds	r3, r7, #4
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800712e:	463b      	mov	r3, r7
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	785b      	ldrb	r3, [r3, #1]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d16f      	bne.n	8007218 <USB_EPStartXfer+0x1190>
 8007138:	1d3b      	adds	r3, r7, #4
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007140:	1d3b      	adds	r3, r7, #4
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007148:	b29b      	uxth	r3, r3
 800714a:	461a      	mov	r2, r3
 800714c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007150:	4413      	add	r3, r2
 8007152:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007156:	463b      	mov	r3, r7
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	00da      	lsls	r2, r3, #3
 800715e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007162:	4413      	add	r3, r2
 8007164:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007168:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800716c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d116      	bne.n	80071a2 <USB_EPStartXfer+0x111a>
 8007174:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	b29b      	uxth	r3, r3
 800717c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007180:	b29a      	uxth	r2, r3
 8007182:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007186:	801a      	strh	r2, [r3, #0]
 8007188:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b29b      	uxth	r3, r3
 8007190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007198:	b29a      	uxth	r2, r3
 800719a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800719e:	801a      	strh	r2, [r3, #0]
 80071a0:	e05e      	b.n	8007260 <USB_EPStartXfer+0x11d8>
 80071a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071a6:	2b3e      	cmp	r3, #62	; 0x3e
 80071a8:	d818      	bhi.n	80071dc <USB_EPStartXfer+0x1154>
 80071aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071ae:	085b      	lsrs	r3, r3, #1
 80071b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <USB_EPStartXfer+0x1142>
 80071c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071c4:	3301      	adds	r3, #1
 80071c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	029b      	lsls	r3, r3, #10
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80071d8:	801a      	strh	r2, [r3, #0]
 80071da:	e041      	b.n	8007260 <USB_EPStartXfer+0x11d8>
 80071dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071e0:	095b      	lsrs	r3, r3, #5
 80071e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071ea:	f003 031f 	and.w	r3, r3, #31
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d104      	bne.n	80071fc <USB_EPStartXfer+0x1174>
 80071f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071f6:	3b01      	subs	r3, #1
 80071f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007200:	b29b      	uxth	r3, r3
 8007202:	029b      	lsls	r3, r3, #10
 8007204:	b29b      	uxth	r3, r3
 8007206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800720a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800720e:	b29a      	uxth	r2, r3
 8007210:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007214:	801a      	strh	r2, [r3, #0]
 8007216:	e023      	b.n	8007260 <USB_EPStartXfer+0x11d8>
 8007218:	463b      	mov	r3, r7
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d11e      	bne.n	8007260 <USB_EPStartXfer+0x11d8>
 8007222:	1d3b      	adds	r3, r7, #4
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800722a:	b29b      	uxth	r3, r3
 800722c:	461a      	mov	r2, r3
 800722e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007232:	4413      	add	r3, r2
 8007234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007238:	463b      	mov	r3, r7
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	00da      	lsls	r2, r3, #3
 8007240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007244:	4413      	add	r3, r2
 8007246:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800724a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800724e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007252:	b29a      	uxth	r2, r3
 8007254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	e001      	b.n	8007260 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e02e      	b.n	80072be <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007260:	1d3b      	adds	r3, r7, #4
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	463b      	mov	r3, r7
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29b      	uxth	r3, r3
 8007272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800727e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007282:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007286:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800728a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800728e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007292:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007296:	1d3b      	adds	r3, r7, #4
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	463b      	mov	r3, r7
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	441a      	add	r2, r3
 80072a4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80072a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d103      	bne.n	80072e2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2280      	movs	r2, #128	; 0x80
 80072de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072fe:	b29b      	uxth	r3, r3
 8007300:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007302:	68fb      	ldr	r3, [r7, #12]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007310:	b480      	push	{r7}
 8007312:	b08d      	sub	sp, #52	; 0x34
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4611      	mov	r1, r2
 800731c:	461a      	mov	r2, r3
 800731e:	460b      	mov	r3, r1
 8007320:	80fb      	strh	r3, [r7, #6]
 8007322:	4613      	mov	r3, r2
 8007324:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007326:	88bb      	ldrh	r3, [r7, #4]
 8007328:	3301      	adds	r3, #1
 800732a:	085b      	lsrs	r3, r3, #1
 800732c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007336:	88fa      	ldrh	r2, [r7, #6]
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007340:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007346:	e01b      	b.n	8007380 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	3301      	adds	r3, #1
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	b29b      	uxth	r3, r3
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	b29b      	uxth	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	b29a      	uxth	r2, r3
 800736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	3302      	adds	r3, #2
 8007372:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	3301      	adds	r3, #1
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	3b01      	subs	r3, #1
 800737e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e0      	bne.n	8007348 <USB_WritePMA+0x38>
  }
}
 8007386:	bf00      	nop
 8007388:	3734      	adds	r7, #52	; 0x34
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007392:	b480      	push	{r7}
 8007394:	b08b      	sub	sp, #44	; 0x2c
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	4611      	mov	r1, r2
 800739e:	461a      	mov	r2, r3
 80073a0:	460b      	mov	r3, r1
 80073a2:	80fb      	strh	r3, [r7, #6]
 80073a4:	4613      	mov	r3, r2
 80073a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80073a8:	88bb      	ldrh	r3, [r7, #4]
 80073aa:	085b      	lsrs	r3, r3, #1
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073b8:	88fa      	ldrh	r2, [r7, #6]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073c2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24
 80073c8:	e018      	b.n	80073fc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	3302      	adds	r3, #2
 80073d6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	3301      	adds	r3, #1
 80073e4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	0a1b      	lsrs	r3, r3, #8
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	3301      	adds	r3, #1
 80073f4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	3b01      	subs	r3, #1
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e3      	bne.n	80073ca <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007402:	88bb      	ldrh	r3, [r7, #4]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d007      	beq.n	800741e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b29b      	uxth	r3, r3
 8007414:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	b2da      	uxtb	r2, r3
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	701a      	strb	r2, [r3, #0]
  }
}
 800741e:	bf00      	nop
 8007420:	372c      	adds	r7, #44	; 0x2c
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
	...

0800742c <ENCODER_A_INTERRUPT>:

/* END PFP */

/* Private Code ---------------------------------------------------------*/
extern void ENCODER_A_INTERRUPT(void)
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
	if ((ENCODER_A_GPIO_Port->IDR & ENCODER_A_Pin) == 0)
 8007430:	4b16      	ldr	r3, [pc, #88]	; (800748c <ENCODER_A_INTERRUPT+0x60>)
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007438:	2b00      	cmp	r3, #0
 800743a:	d111      	bne.n	8007460 <ENCODER_A_INTERRUPT+0x34>
	{
		//ENCODER A RISING STATE
		if ((ENCODER_B_GPIO_Port->IDR & ENCODER_B_Pin) == 0)
 800743c:	4b13      	ldr	r3, [pc, #76]	; (800748c <ENCODER_A_INTERRUPT+0x60>)
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007444:	2b00      	cmp	r3, #0
 8007446:	d105      	bne.n	8007454 <ENCODER_A_INTERRUPT+0x28>
			{
				//ENCODER B HIGH
				//ANTICLOCKWISE
				encoder_step--;
 8007448:	4b11      	ldr	r3, [pc, #68]	; (8007490 <ENCODER_A_INTERRUPT+0x64>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3b01      	subs	r3, #1
 800744e:	4a10      	ldr	r2, [pc, #64]	; (8007490 <ENCODER_A_INTERRUPT+0x64>)
 8007450:	6013      	str	r3, [r2, #0]
//
//		//DEBUG UART
//		HAL_UART_Transmit(&huart3, &buffer, 6, 100);
//		HAL_UART_Transmit(&huart3, "\n", 1, 100);
//	}
}
 8007452:	e016      	b.n	8007482 <ENCODER_A_INTERRUPT+0x56>
				encoder_step++;
 8007454:	4b0e      	ldr	r3, [pc, #56]	; (8007490 <ENCODER_A_INTERRUPT+0x64>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3301      	adds	r3, #1
 800745a:	4a0d      	ldr	r2, [pc, #52]	; (8007490 <ENCODER_A_INTERRUPT+0x64>)
 800745c:	6013      	str	r3, [r2, #0]
}
 800745e:	e010      	b.n	8007482 <ENCODER_A_INTERRUPT+0x56>
		if ((ENCODER_B_GPIO_Port->IDR & ENCODER_B_Pin) == 0)
 8007460:	4b0a      	ldr	r3, [pc, #40]	; (800748c <ENCODER_A_INTERRUPT+0x60>)
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <ENCODER_A_INTERRUPT+0x4c>
				encoder_step++;
 800746c:	4b08      	ldr	r3, [pc, #32]	; (8007490 <ENCODER_A_INTERRUPT+0x64>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3301      	adds	r3, #1
 8007472:	4a07      	ldr	r2, [pc, #28]	; (8007490 <ENCODER_A_INTERRUPT+0x64>)
 8007474:	6013      	str	r3, [r2, #0]
}
 8007476:	e004      	b.n	8007482 <ENCODER_A_INTERRUPT+0x56>
				encoder_step--;
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <ENCODER_A_INTERRUPT+0x64>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3b01      	subs	r3, #1
 800747e:	4a04      	ldr	r2, [pc, #16]	; (8007490 <ENCODER_A_INTERRUPT+0x64>)
 8007480:	6013      	str	r3, [r2, #0]
}
 8007482:	bf00      	nop
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	48001400 	.word	0x48001400
 8007490:	20000028 	.word	0x20000028

08007494 <ENCODER_B_INTERRUPT>:

extern void ENCODER_B_INTERRUPT(void)
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
	if ((ENCODER_B_GPIO_Port->IDR & ENCODER_B_Pin) == 0)
 8007498:	4b16      	ldr	r3, [pc, #88]	; (80074f4 <ENCODER_B_INTERRUPT+0x60>)
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d111      	bne.n	80074c8 <ENCODER_B_INTERRUPT+0x34>
	{
		//ENCODER B RISING STATE
		if ((ENCODER_A_GPIO_Port->IDR & ENCODER_A_Pin) == 0)
 80074a4:	4b13      	ldr	r3, [pc, #76]	; (80074f4 <ENCODER_B_INTERRUPT+0x60>)
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d105      	bne.n	80074bc <ENCODER_B_INTERRUPT+0x28>
			{
				//ENCODER A HIGH
				//CLOCKWISE
				encoder_step++;
 80074b0:	4b11      	ldr	r3, [pc, #68]	; (80074f8 <ENCODER_B_INTERRUPT+0x64>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3301      	adds	r3, #1
 80074b6:	4a10      	ldr	r2, [pc, #64]	; (80074f8 <ENCODER_B_INTERRUPT+0x64>)
 80074b8:	6013      	str	r3, [r2, #0]
//
//		//DEBUG UART
//		HAL_UART_Transmit(&huart3, &buffer, 6, 100);
//		HAL_UART_Transmit(&huart3, "\n", 1, 100);
//	}
}
 80074ba:	e016      	b.n	80074ea <ENCODER_B_INTERRUPT+0x56>
				encoder_step--;
 80074bc:	4b0e      	ldr	r3, [pc, #56]	; (80074f8 <ENCODER_B_INTERRUPT+0x64>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	4a0d      	ldr	r2, [pc, #52]	; (80074f8 <ENCODER_B_INTERRUPT+0x64>)
 80074c4:	6013      	str	r3, [r2, #0]
}
 80074c6:	e010      	b.n	80074ea <ENCODER_B_INTERRUPT+0x56>
		if ((ENCODER_A_GPIO_Port->IDR & ENCODER_A_Pin) == 0)
 80074c8:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <ENCODER_B_INTERRUPT+0x60>)
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d105      	bne.n	80074e0 <ENCODER_B_INTERRUPT+0x4c>
				encoder_step--;
 80074d4:	4b08      	ldr	r3, [pc, #32]	; (80074f8 <ENCODER_B_INTERRUPT+0x64>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3b01      	subs	r3, #1
 80074da:	4a07      	ldr	r2, [pc, #28]	; (80074f8 <ENCODER_B_INTERRUPT+0x64>)
 80074dc:	6013      	str	r3, [r2, #0]
}
 80074de:	e004      	b.n	80074ea <ENCODER_B_INTERRUPT+0x56>
				encoder_step++;
 80074e0:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <ENCODER_B_INTERRUPT+0x64>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3301      	adds	r3, #1
 80074e6:	4a04      	ldr	r2, [pc, #16]	; (80074f8 <ENCODER_B_INTERRUPT+0x64>)
 80074e8:	6013      	str	r3, [r2, #0]
}
 80074ea:	bf00      	nop
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	48001400 	.word	0x48001400
 80074f8:	20000028 	.word	0x20000028

080074fc <Step_Send_Single_Pulse>:
//	HAL_Delay(10);
//	HAL_GPIO_WritePin(STEP_PULSE_GPIO_Port, STEP_PULSE_Pin, GPIO_PIN_RESET);
//}

void Step_Send_Single_Pulse(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
	Step_Send_Single_Pulse_With_DelayConfig(50,950);
 8007500:	f240 31b6 	movw	r1, #950	; 0x3b6
 8007504:	2032      	movs	r0, #50	; 0x32
 8007506:	f000 f803 	bl	8007510 <Step_Send_Single_Pulse_With_DelayConfig>
}
 800750a:	bf00      	nop
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <Step_Send_Single_Pulse_With_DelayConfig>:

void Step_Send_Single_Pulse_With_DelayConfig(uint16_t delay_us_HIGH, uint16_t delay_us_FULL)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	460a      	mov	r2, r1
 800751a:	80fb      	strh	r3, [r7, #6]
 800751c:	4613      	mov	r3, r2
 800751e:	80bb      	strh	r3, [r7, #4]
	if (state.Step_Power == STEP_PASSIVE) Step_Set_Enable();
 8007520:	4b18      	ldr	r3, [pc, #96]	; (8007584 <Step_Send_Single_Pulse_With_DelayConfig+0x74>)
 8007522:	791b      	ldrb	r3, [r3, #4]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b01      	cmp	r3, #1
 8007528:	d101      	bne.n	800752e <Step_Send_Single_Pulse_With_DelayConfig+0x1e>
 800752a:	f000 f853 	bl	80075d4 <Step_Set_Enable>
	HAL_GPIO_WritePin(STEP_PULSE_GPIO_Port, STEP_PULSE_Pin, GPIO_PIN_SET);
 800752e:	2201      	movs	r2, #1
 8007530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007534:	4814      	ldr	r0, [pc, #80]	; (8007588 <Step_Send_Single_Pulse_With_DelayConfig+0x78>)
 8007536:	f7fa fd41 	bl	8001fbc <HAL_GPIO_WritePin>
	delay_us(delay_us_HIGH);
 800753a:	88fb      	ldrh	r3, [r7, #6]
 800753c:	4618      	mov	r0, r3
 800753e:	f7f9 fa37 	bl	80009b0 <delay_us>

	if (state.Step_Direction == CLOCKWISE) state.Step_Counter++;
 8007542:	4b10      	ldr	r3, [pc, #64]	; (8007584 <Step_Send_Single_Pulse_With_DelayConfig+0x74>)
 8007544:	795b      	ldrb	r3, [r3, #5]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	d105      	bne.n	8007558 <Step_Send_Single_Pulse_With_DelayConfig+0x48>
 800754c:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <Step_Send_Single_Pulse_With_DelayConfig+0x74>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3301      	adds	r3, #1
 8007552:	4a0c      	ldr	r2, [pc, #48]	; (8007584 <Step_Send_Single_Pulse_With_DelayConfig+0x74>)
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	e004      	b.n	8007562 <Step_Send_Single_Pulse_With_DelayConfig+0x52>
	else state.Step_Counter--;
 8007558:	4b0a      	ldr	r3, [pc, #40]	; (8007584 <Step_Send_Single_Pulse_With_DelayConfig+0x74>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3b01      	subs	r3, #1
 800755e:	4a09      	ldr	r2, [pc, #36]	; (8007584 <Step_Send_Single_Pulse_With_DelayConfig+0x74>)
 8007560:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(STEP_PULSE_GPIO_Port, STEP_PULSE_Pin, GPIO_PIN_RESET);
 8007562:	2200      	movs	r2, #0
 8007564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007568:	4807      	ldr	r0, [pc, #28]	; (8007588 <Step_Send_Single_Pulse_With_DelayConfig+0x78>)
 800756a:	f7fa fd27 	bl	8001fbc <HAL_GPIO_WritePin>
	delay_us(delay_us_FULL-delay_us_HIGH);
 800756e:	88ba      	ldrh	r2, [r7, #4]
 8007570:	88fb      	ldrh	r3, [r7, #6]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	4618      	mov	r0, r3
 8007576:	f7f9 fa1b 	bl	80009b0 <delay_us>
}
 800757a:	bf00      	nop
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	20000130 	.word	0x20000130
 8007588:	48001000 	.word	0x48001000

0800758c <Step_Set_Direction>:

void Step_Set_Direction(Step_Direction direction)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	71fb      	strb	r3, [r7, #7]
	if (direction == CLOCKWISE)
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d109      	bne.n	80075b0 <Step_Set_Direction+0x24>
	{
		HAL_GPIO_WritePin(STEP_DIRECTION_GPIO_Port, STEP_DIRECTION_Pin, GPIO_PIN_RESET);
 800759c:	2200      	movs	r2, #0
 800759e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80075a2:	480a      	ldr	r0, [pc, #40]	; (80075cc <Step_Set_Direction+0x40>)
 80075a4:	f7fa fd0a 	bl	8001fbc <HAL_GPIO_WritePin>
		state.Step_Direction = CLOCKWISE;
 80075a8:	4b09      	ldr	r3, [pc, #36]	; (80075d0 <Step_Set_Direction+0x44>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	715a      	strb	r2, [r3, #5]
	else
	{
		HAL_GPIO_WritePin(STEP_DIRECTION_GPIO_Port, STEP_DIRECTION_Pin, GPIO_PIN_SET);
		state.Step_Direction = ANTICLOCKWISE;
	}
}
 80075ae:	e008      	b.n	80075c2 <Step_Set_Direction+0x36>
		HAL_GPIO_WritePin(STEP_DIRECTION_GPIO_Port, STEP_DIRECTION_Pin, GPIO_PIN_SET);
 80075b0:	2201      	movs	r2, #1
 80075b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80075b6:	4805      	ldr	r0, [pc, #20]	; (80075cc <Step_Set_Direction+0x40>)
 80075b8:	f7fa fd00 	bl	8001fbc <HAL_GPIO_WritePin>
		state.Step_Direction = ANTICLOCKWISE;
 80075bc:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <Step_Set_Direction+0x44>)
 80075be:	2201      	movs	r2, #1
 80075c0:	715a      	strb	r2, [r3, #5]
}
 80075c2:	bf00      	nop
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	48001400 	.word	0x48001400
 80075d0:	20000130 	.word	0x20000130

080075d4 <Step_Set_Enable>:
void Step_Set_Enable(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80075d8:	2201      	movs	r2, #1
 80075da:	2180      	movs	r1, #128	; 0x80
 80075dc:	4806      	ldr	r0, [pc, #24]	; (80075f8 <Step_Set_Enable+0x24>)
 80075de:	f7fa fced 	bl	8001fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80075e2:	2200      	movs	r2, #0
 80075e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075e8:	4804      	ldr	r0, [pc, #16]	; (80075fc <Step_Set_Enable+0x28>)
 80075ea:	f7fa fce7 	bl	8001fbc <HAL_GPIO_WritePin>
	state.Step_Power = STEP_ACTIVE;
 80075ee:	4b04      	ldr	r3, [pc, #16]	; (8007600 <Step_Set_Enable+0x2c>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	711a      	strb	r2, [r3, #4]
}
 80075f4:	bf00      	nop
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	48000400 	.word	0x48000400
 80075fc:	48001400 	.word	0x48001400
 8007600:	20000130 	.word	0x20000130

08007604 <Step_Set_Disable>:
void Step_Set_Disable(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8007608:	2200      	movs	r2, #0
 800760a:	2180      	movs	r1, #128	; 0x80
 800760c:	4806      	ldr	r0, [pc, #24]	; (8007628 <Step_Set_Disable+0x24>)
 800760e:	f7fa fcd5 	bl	8001fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET);
 8007612:	2201      	movs	r2, #1
 8007614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007618:	4804      	ldr	r0, [pc, #16]	; (800762c <Step_Set_Disable+0x28>)
 800761a:	f7fa fccf 	bl	8001fbc <HAL_GPIO_WritePin>
	state.Step_Power = STEP_PASSIVE;
 800761e:	4b04      	ldr	r3, [pc, #16]	; (8007630 <Step_Set_Disable+0x2c>)
 8007620:	2201      	movs	r2, #1
 8007622:	711a      	strb	r2, [r3, #4]
}
 8007624:	bf00      	nop
 8007626:	bd80      	pop	{r7, pc}
 8007628:	48000400 	.word	0x48000400
 800762c:	48001400 	.word	0x48001400
 8007630:	20000130 	.word	0x20000130

08007634 <HAL_UART_RxCpltCallback>:
/* END PV */


/* Private function prototypes -----------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart3, rx_buffer, __RECEIVE_BUFFER); //Uart Receive IT Restart
	//HAL_UART_Receive_DMA(&huart3, rx_buffer, __RECEIVE_BUFFER-1);Uart Receive DMA Restart
	UART_SET_RECEIVE_DMA();
 800763c:	f000 f806 	bl	800764c <UART_SET_RECEIVE_DMA>
	UART_RECEIVE_COMMAND();
 8007640:	f000 f9e0 	bl	8007a04 <UART_RECEIVE_COMMAND>
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
}
 8007644:	bf00      	nop
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <UART_SET_RECEIVE_DMA>:

void UART_SET_RECEIVE_DMA()
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart3, rx_buffer, __RECEIVE_BUFFER-1);
 8007650:	220a      	movs	r2, #10
 8007652:	4903      	ldr	r1, [pc, #12]	; (8007660 <UART_SET_RECEIVE_DMA+0x14>)
 8007654:	4803      	ldr	r0, [pc, #12]	; (8007664 <UART_SET_RECEIVE_DMA+0x18>)
 8007656:	f7fd fdab 	bl	80051b0 <HAL_UART_Receive_DMA>
}
 800765a:	bf00      	nop
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	2000002c 	.word	0x2000002c
 8007664:	20000084 	.word	0x20000084

08007668 <StrCopyInSet>:

void StrCopyInSet (int first_index, int last_index)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
	uint8_t writeSize = last_index-first_index+1;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	b2da      	uxtb	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	b2db      	uxtb	r3, r3
 800767e:	3301      	adds	r3, #1
 8007680:	73bb      	strb	r3, [r7, #14]
	for (uint8_t counter = 0; counter < writeSize; counter++)
 8007682:	2300      	movs	r3, #0
 8007684:	73fb      	strb	r3, [r7, #15]
 8007686:	e00a      	b.n	800769e <StrCopyInSet+0x36>
	{
		rx_command_buffer[counter] = rx_buffer[counter+first_index];
 8007688:	7bfa      	ldrb	r2, [r7, #15]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	441a      	add	r2, r3
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	4908      	ldr	r1, [pc, #32]	; (80076b4 <StrCopyInSet+0x4c>)
 8007692:	5c89      	ldrb	r1, [r1, r2]
 8007694:	4a08      	ldr	r2, [pc, #32]	; (80076b8 <StrCopyInSet+0x50>)
 8007696:	54d1      	strb	r1, [r2, r3]
	for (uint8_t counter = 0; counter < writeSize; counter++)
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	3301      	adds	r3, #1
 800769c:	73fb      	strb	r3, [r7, #15]
 800769e:	7bfa      	ldrb	r2, [r7, #15]
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d3f0      	bcc.n	8007688 <StrCopyInSet+0x20>
	}
}
 80076a6:	bf00      	nop
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	2000002c 	.word	0x2000002c
 80076b8:	20000038 	.word	0x20000038

080076bc <CommandSearch>:

void CommandSearch()
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
	//COMMAND MOD
	if (rx_command_buffer[0] == 'M' && rx_command_buffer[1] == 'O' && rx_command_buffer[2] == 'D')
 80076c0:	4ba2      	ldr	r3, [pc, #648]	; (800794c <CommandSearch+0x290>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b4d      	cmp	r3, #77	; 0x4d
 80076c8:	f040 80a6 	bne.w	8007818 <CommandSearch+0x15c>
 80076cc:	4b9f      	ldr	r3, [pc, #636]	; (800794c <CommandSearch+0x290>)
 80076ce:	785b      	ldrb	r3, [r3, #1]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b4f      	cmp	r3, #79	; 0x4f
 80076d4:	f040 80a0 	bne.w	8007818 <CommandSearch+0x15c>
 80076d8:	4b9c      	ldr	r3, [pc, #624]	; (800794c <CommandSearch+0x290>)
 80076da:	789b      	ldrb	r3, [r3, #2]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b44      	cmp	r3, #68	; 0x44
 80076e0:	f040 809a 	bne.w	8007818 <CommandSearch+0x15c>
	{
		stepCommand.Trigger = STEP_PASSIVE;
 80076e4:	4b9a      	ldr	r3, [pc, #616]	; (8007950 <CommandSearch+0x294>)
 80076e6:	2201      	movs	r2, #1
 80076e8:	705a      	strb	r2, [r3, #1]
		state.Step_Counter = 0;
 80076ea:	4b9a      	ldr	r3, [pc, #616]	; (8007954 <CommandSearch+0x298>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]
		//STANDART MODE
		if (rx_command_buffer[4] == 'S' && rx_command_buffer[5] == 'T' && rx_command_buffer[6] == 'D')
 80076f0:	4b96      	ldr	r3, [pc, #600]	; (800794c <CommandSearch+0x290>)
 80076f2:	791b      	ldrb	r3, [r3, #4]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b53      	cmp	r3, #83	; 0x53
 80076f8:	d10c      	bne.n	8007714 <CommandSearch+0x58>
 80076fa:	4b94      	ldr	r3, [pc, #592]	; (800794c <CommandSearch+0x290>)
 80076fc:	795b      	ldrb	r3, [r3, #5]
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b54      	cmp	r3, #84	; 0x54
 8007702:	d107      	bne.n	8007714 <CommandSearch+0x58>
 8007704:	4b91      	ldr	r3, [pc, #580]	; (800794c <CommandSearch+0x290>)
 8007706:	799b      	ldrb	r3, [r3, #6]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b44      	cmp	r3, #68	; 0x44
 800770c:	d102      	bne.n	8007714 <CommandSearch+0x58>
			{
				MOD_CHANGE_STANDART_MODE();
 800770e:	f000 f9b9 	bl	8007a84 <MOD_CHANGE_STANDART_MODE>
 8007712:	e080      	b.n	8007816 <CommandSearch+0x15a>
			}
		//PULSE TIGGERED STANDART MODE
		else if (rx_command_buffer[4] == 'P' && rx_command_buffer[5] == 'S' && rx_command_buffer[6] == 'T')
 8007714:	4b8d      	ldr	r3, [pc, #564]	; (800794c <CommandSearch+0x290>)
 8007716:	791b      	ldrb	r3, [r3, #4]
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b50      	cmp	r3, #80	; 0x50
 800771c:	d10c      	bne.n	8007738 <CommandSearch+0x7c>
 800771e:	4b8b      	ldr	r3, [pc, #556]	; (800794c <CommandSearch+0x290>)
 8007720:	795b      	ldrb	r3, [r3, #5]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b53      	cmp	r3, #83	; 0x53
 8007726:	d107      	bne.n	8007738 <CommandSearch+0x7c>
 8007728:	4b88      	ldr	r3, [pc, #544]	; (800794c <CommandSearch+0x290>)
 800772a:	799b      	ldrb	r3, [r3, #6]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b54      	cmp	r3, #84	; 0x54
 8007730:	d102      	bne.n	8007738 <CommandSearch+0x7c>
			{
				MOD_CHANGE_PULSE_TRIGGERED_STANDART_MODE();
 8007732:	f000 f9b5 	bl	8007aa0 <MOD_CHANGE_PULSE_TRIGGERED_STANDART_MODE>
 8007736:	e06e      	b.n	8007816 <CommandSearch+0x15a>
			}
		//LIMITED ANGLE MODE
		else if (rx_command_buffer[4] == 'D' && rx_command_buffer[5] == 'G' && rx_command_buffer[6] == 'R')
 8007738:	4b84      	ldr	r3, [pc, #528]	; (800794c <CommandSearch+0x290>)
 800773a:	791b      	ldrb	r3, [r3, #4]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b44      	cmp	r3, #68	; 0x44
 8007740:	d10c      	bne.n	800775c <CommandSearch+0xa0>
 8007742:	4b82      	ldr	r3, [pc, #520]	; (800794c <CommandSearch+0x290>)
 8007744:	795b      	ldrb	r3, [r3, #5]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b47      	cmp	r3, #71	; 0x47
 800774a:	d107      	bne.n	800775c <CommandSearch+0xa0>
 800774c:	4b7f      	ldr	r3, [pc, #508]	; (800794c <CommandSearch+0x290>)
 800774e:	799b      	ldrb	r3, [r3, #6]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b52      	cmp	r3, #82	; 0x52
 8007754:	d102      	bne.n	800775c <CommandSearch+0xa0>
			{
				MOD_CHANGE_LIMITED_ANGLE_MODE();
 8007756:	f000 f9af 	bl	8007ab8 <MOD_CHANGE_LIMITED_ANGLE_MODE>
 800775a:	e05c      	b.n	8007816 <CommandSearch+0x15a>
			}
		//PULSE TRIGGERED LIMITED ANGLE MODE
		else if (rx_command_buffer[4] == 'P' && rx_command_buffer[5] == 'D' && rx_command_buffer[6] == 'G')
 800775c:	4b7b      	ldr	r3, [pc, #492]	; (800794c <CommandSearch+0x290>)
 800775e:	791b      	ldrb	r3, [r3, #4]
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b50      	cmp	r3, #80	; 0x50
 8007764:	d10c      	bne.n	8007780 <CommandSearch+0xc4>
 8007766:	4b79      	ldr	r3, [pc, #484]	; (800794c <CommandSearch+0x290>)
 8007768:	795b      	ldrb	r3, [r3, #5]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b44      	cmp	r3, #68	; 0x44
 800776e:	d107      	bne.n	8007780 <CommandSearch+0xc4>
 8007770:	4b76      	ldr	r3, [pc, #472]	; (800794c <CommandSearch+0x290>)
 8007772:	799b      	ldrb	r3, [r3, #6]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b47      	cmp	r3, #71	; 0x47
 8007778:	d102      	bne.n	8007780 <CommandSearch+0xc4>
			{
				MOD_CHANGE_PULSE_TRIGGERED_LIMITED_ANGLE_MODE();
 800777a:	f000 f9ab 	bl	8007ad4 <MOD_CHANGE_PULSE_TRIGGERED_LIMITED_ANGLE_MODE>
 800777e:	e04a      	b.n	8007816 <CommandSearch+0x15a>
			}
		//ONE DIRECTION PULSE TRIGGERED LIMITED ANGLE MODE
		else if (rx_command_buffer[4] == 'O' && rx_command_buffer[5] == 'P' && rx_command_buffer[6] == 'D')
 8007780:	4b72      	ldr	r3, [pc, #456]	; (800794c <CommandSearch+0x290>)
 8007782:	791b      	ldrb	r3, [r3, #4]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b4f      	cmp	r3, #79	; 0x4f
 8007788:	d10c      	bne.n	80077a4 <CommandSearch+0xe8>
 800778a:	4b70      	ldr	r3, [pc, #448]	; (800794c <CommandSearch+0x290>)
 800778c:	795b      	ldrb	r3, [r3, #5]
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b50      	cmp	r3, #80	; 0x50
 8007792:	d107      	bne.n	80077a4 <CommandSearch+0xe8>
 8007794:	4b6d      	ldr	r3, [pc, #436]	; (800794c <CommandSearch+0x290>)
 8007796:	799b      	ldrb	r3, [r3, #6]
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b44      	cmp	r3, #68	; 0x44
 800779c:	d102      	bne.n	80077a4 <CommandSearch+0xe8>
			{
				MOD_CHANGE_ONE_DIRECTION_PULSE_TRIGGERED_LIMITED_ANGLE_MODE();
 800779e:	f000 f9a5 	bl	8007aec <MOD_CHANGE_ONE_DIRECTION_PULSE_TRIGGERED_LIMITED_ANGLE_MODE>
 80077a2:	e038      	b.n	8007816 <CommandSearch+0x15a>
			}
		//MANUEL MOD
		else if (rx_command_buffer[4] == 'M' && rx_command_buffer[5] == 'A' && rx_command_buffer[6] == 'N')
 80077a4:	4b69      	ldr	r3, [pc, #420]	; (800794c <CommandSearch+0x290>)
 80077a6:	791b      	ldrb	r3, [r3, #4]
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b4d      	cmp	r3, #77	; 0x4d
 80077ac:	d10c      	bne.n	80077c8 <CommandSearch+0x10c>
 80077ae:	4b67      	ldr	r3, [pc, #412]	; (800794c <CommandSearch+0x290>)
 80077b0:	795b      	ldrb	r3, [r3, #5]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b41      	cmp	r3, #65	; 0x41
 80077b6:	d107      	bne.n	80077c8 <CommandSearch+0x10c>
 80077b8:	4b64      	ldr	r3, [pc, #400]	; (800794c <CommandSearch+0x290>)
 80077ba:	799b      	ldrb	r3, [r3, #6]
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b4e      	cmp	r3, #78	; 0x4e
 80077c0:	d102      	bne.n	80077c8 <CommandSearch+0x10c>
			{
				MOD_CHANGE_MANUEL_MODE();
 80077c2:	f000 f99f 	bl	8007b04 <MOD_CHANGE_MANUEL_MODE>
 80077c6:	e026      	b.n	8007816 <CommandSearch+0x15a>
			}
		//CALIBRATION MODE
		else if (rx_command_buffer[4] == 'C' && rx_command_buffer[5] == 'L' && rx_command_buffer[6] == 'B')
 80077c8:	4b60      	ldr	r3, [pc, #384]	; (800794c <CommandSearch+0x290>)
 80077ca:	791b      	ldrb	r3, [r3, #4]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b43      	cmp	r3, #67	; 0x43
 80077d0:	d10c      	bne.n	80077ec <CommandSearch+0x130>
 80077d2:	4b5e      	ldr	r3, [pc, #376]	; (800794c <CommandSearch+0x290>)
 80077d4:	795b      	ldrb	r3, [r3, #5]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b4c      	cmp	r3, #76	; 0x4c
 80077da:	d107      	bne.n	80077ec <CommandSearch+0x130>
 80077dc:	4b5b      	ldr	r3, [pc, #364]	; (800794c <CommandSearch+0x290>)
 80077de:	799b      	ldrb	r3, [r3, #6]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b42      	cmp	r3, #66	; 0x42
 80077e4:	d102      	bne.n	80077ec <CommandSearch+0x130>
			{
				MOD_CHANGE_CALIBRATION_MODE();
 80077e6:	f000 f999 	bl	8007b1c <MOD_CHANGE_CALIBRATION_MODE>
 80077ea:	e014      	b.n	8007816 <CommandSearch+0x15a>
			}
		//PASSIVE MOD
		else if (rx_command_buffer[4] == 'P' && rx_command_buffer[5] == 'S' && rx_command_buffer[6] == 'V')
 80077ec:	4b57      	ldr	r3, [pc, #348]	; (800794c <CommandSearch+0x290>)
 80077ee:	791b      	ldrb	r3, [r3, #4]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b50      	cmp	r3, #80	; 0x50
 80077f4:	f040 8101 	bne.w	80079fa <CommandSearch+0x33e>
 80077f8:	4b54      	ldr	r3, [pc, #336]	; (800794c <CommandSearch+0x290>)
 80077fa:	795b      	ldrb	r3, [r3, #5]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b53      	cmp	r3, #83	; 0x53
 8007800:	f040 80fb 	bne.w	80079fa <CommandSearch+0x33e>
 8007804:	4b51      	ldr	r3, [pc, #324]	; (800794c <CommandSearch+0x290>)
 8007806:	799b      	ldrb	r3, [r3, #6]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b56      	cmp	r3, #86	; 0x56
 800780c:	f040 80f5 	bne.w	80079fa <CommandSearch+0x33e>
			{
				MOD_CHANGE_PASSIVE_MODE();
 8007810:	f000 f990 	bl	8007b34 <MOD_CHANGE_PASSIVE_MODE>
		if (rx_command_buffer[4] == 'S' && rx_command_buffer[5] == 'T' && rx_command_buffer[6] == 'D')
 8007814:	e0f1      	b.n	80079fa <CommandSearch+0x33e>
 8007816:	e0f0      	b.n	80079fa <CommandSearch+0x33e>
			}

	}
	//COMMAND SPEED
	else if (rx_command_buffer[0] == 'S' && rx_command_buffer[1] == 'P' && rx_command_buffer[2] == 'D')
 8007818:	4b4c      	ldr	r3, [pc, #304]	; (800794c <CommandSearch+0x290>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b53      	cmp	r3, #83	; 0x53
 8007820:	d123      	bne.n	800786a <CommandSearch+0x1ae>
 8007822:	4b4a      	ldr	r3, [pc, #296]	; (800794c <CommandSearch+0x290>)
 8007824:	785b      	ldrb	r3, [r3, #1]
 8007826:	b2db      	uxtb	r3, r3
 8007828:	2b50      	cmp	r3, #80	; 0x50
 800782a:	d11e      	bne.n	800786a <CommandSearch+0x1ae>
 800782c:	4b47      	ldr	r3, [pc, #284]	; (800794c <CommandSearch+0x290>)
 800782e:	789b      	ldrb	r3, [r3, #2]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b44      	cmp	r3, #68	; 0x44
 8007834:	d119      	bne.n	800786a <CommandSearch+0x1ae>
	{
		COMMAND_SPEED((rx_command_buffer[4]-48)*100+(rx_command_buffer[5]-48)*10+(rx_command_buffer[6]-48));
 8007836:	4b45      	ldr	r3, [pc, #276]	; (800794c <CommandSearch+0x290>)
 8007838:	791b      	ldrb	r3, [r3, #4]
 800783a:	b2db      	uxtb	r3, r3
 800783c:	3b30      	subs	r3, #48	; 0x30
 800783e:	2264      	movs	r2, #100	; 0x64
 8007840:	fb02 f103 	mul.w	r1, r2, r3
 8007844:	4b41      	ldr	r3, [pc, #260]	; (800794c <CommandSearch+0x290>)
 8007846:	795b      	ldrb	r3, [r3, #5]
 8007848:	b2db      	uxtb	r3, r3
 800784a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	18ca      	adds	r2, r1, r3
 8007858:	4b3c      	ldr	r3, [pc, #240]	; (800794c <CommandSearch+0x290>)
 800785a:	799b      	ldrb	r3, [r3, #6]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	3b30      	subs	r3, #48	; 0x30
 8007860:	4413      	add	r3, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f000 f972 	bl	8007b4c <COMMAND_SPEED>
 8007868:	e0c8      	b.n	80079fc <CommandSearch+0x340>
	}
	//COMMAND DEGREE
	else if (rx_command_buffer[0] == 'D' && rx_command_buffer[1] == 'E' && rx_command_buffer[2] == 'G')
 800786a:	4b38      	ldr	r3, [pc, #224]	; (800794c <CommandSearch+0x290>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b44      	cmp	r3, #68	; 0x44
 8007872:	d123      	bne.n	80078bc <CommandSearch+0x200>
 8007874:	4b35      	ldr	r3, [pc, #212]	; (800794c <CommandSearch+0x290>)
 8007876:	785b      	ldrb	r3, [r3, #1]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b45      	cmp	r3, #69	; 0x45
 800787c:	d11e      	bne.n	80078bc <CommandSearch+0x200>
 800787e:	4b33      	ldr	r3, [pc, #204]	; (800794c <CommandSearch+0x290>)
 8007880:	789b      	ldrb	r3, [r3, #2]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b47      	cmp	r3, #71	; 0x47
 8007886:	d119      	bne.n	80078bc <CommandSearch+0x200>
	{
		COMMAND_DEGREE((rx_command_buffer[4]-48)*100+(rx_command_buffer[5]-48)*10+(rx_command_buffer[6]-48));
 8007888:	4b30      	ldr	r3, [pc, #192]	; (800794c <CommandSearch+0x290>)
 800788a:	791b      	ldrb	r3, [r3, #4]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	3b30      	subs	r3, #48	; 0x30
 8007890:	2264      	movs	r2, #100	; 0x64
 8007892:	fb02 f103 	mul.w	r1, r2, r3
 8007896:	4b2d      	ldr	r3, [pc, #180]	; (800794c <CommandSearch+0x290>)
 8007898:	795b      	ldrb	r3, [r3, #5]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	18ca      	adds	r2, r1, r3
 80078aa:	4b28      	ldr	r3, [pc, #160]	; (800794c <CommandSearch+0x290>)
 80078ac:	799b      	ldrb	r3, [r3, #6]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	3b30      	subs	r3, #48	; 0x30
 80078b2:	4413      	add	r3, r2
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 f95d 	bl	8007b74 <COMMAND_DEGREE>
 80078ba:	e09f      	b.n	80079fc <CommandSearch+0x340>
	}
	//COMMAND RUN
	else if (rx_command_buffer[0] == 'R' && rx_command_buffer[1] == 'U' && rx_command_buffer[2] == 'N')
 80078bc:	4b23      	ldr	r3, [pc, #140]	; (800794c <CommandSearch+0x290>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b52      	cmp	r3, #82	; 0x52
 80078c4:	d10c      	bne.n	80078e0 <CommandSearch+0x224>
 80078c6:	4b21      	ldr	r3, [pc, #132]	; (800794c <CommandSearch+0x290>)
 80078c8:	785b      	ldrb	r3, [r3, #1]
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b55      	cmp	r3, #85	; 0x55
 80078ce:	d107      	bne.n	80078e0 <CommandSearch+0x224>
 80078d0:	4b1e      	ldr	r3, [pc, #120]	; (800794c <CommandSearch+0x290>)
 80078d2:	789b      	ldrb	r3, [r3, #2]
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b4e      	cmp	r3, #78	; 0x4e
 80078d8:	d102      	bne.n	80078e0 <CommandSearch+0x224>
	{
		COMMAND_RUN();
 80078da:	f000 f95b 	bl	8007b94 <COMMAND_RUN>
 80078de:	e08d      	b.n	80079fc <CommandSearch+0x340>
	}
	//COMMAND STOP
	else if (rx_command_buffer[0] == 'S' && rx_command_buffer[1] == 'T' && rx_command_buffer[2] == 'P')
 80078e0:	4b1a      	ldr	r3, [pc, #104]	; (800794c <CommandSearch+0x290>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b53      	cmp	r3, #83	; 0x53
 80078e8:	d10c      	bne.n	8007904 <CommandSearch+0x248>
 80078ea:	4b18      	ldr	r3, [pc, #96]	; (800794c <CommandSearch+0x290>)
 80078ec:	785b      	ldrb	r3, [r3, #1]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b54      	cmp	r3, #84	; 0x54
 80078f2:	d107      	bne.n	8007904 <CommandSearch+0x248>
 80078f4:	4b15      	ldr	r3, [pc, #84]	; (800794c <CommandSearch+0x290>)
 80078f6:	789b      	ldrb	r3, [r3, #2]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b50      	cmp	r3, #80	; 0x50
 80078fc:	d102      	bne.n	8007904 <CommandSearch+0x248>
	{
		COMMAND_STOP();
 80078fe:	f000 f96b 	bl	8007bd8 <COMMAND_STOP>
 8007902:	e07b      	b.n	80079fc <CommandSearch+0x340>
	}
	//COMMAND DIRECTION CLOCKWISE
	else if (rx_command_buffer[0] == 'D' && rx_command_buffer[1] == 'C' && rx_command_buffer[2] == 'L')
 8007904:	4b11      	ldr	r3, [pc, #68]	; (800794c <CommandSearch+0x290>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b44      	cmp	r3, #68	; 0x44
 800790c:	d10c      	bne.n	8007928 <CommandSearch+0x26c>
 800790e:	4b0f      	ldr	r3, [pc, #60]	; (800794c <CommandSearch+0x290>)
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b43      	cmp	r3, #67	; 0x43
 8007916:	d107      	bne.n	8007928 <CommandSearch+0x26c>
 8007918:	4b0c      	ldr	r3, [pc, #48]	; (800794c <CommandSearch+0x290>)
 800791a:	789b      	ldrb	r3, [r3, #2]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b4c      	cmp	r3, #76	; 0x4c
 8007920:	d102      	bne.n	8007928 <CommandSearch+0x26c>
	{
		COMMAND_DIRECTION_CLOCKWISE();
 8007922:	f000 f971 	bl	8007c08 <COMMAND_DIRECTION_CLOCKWISE>
 8007926:	e069      	b.n	80079fc <CommandSearch+0x340>
	}
	//COMMAND DIRECTION ANTI-CLOCKWISE
	else if (rx_command_buffer[0] == 'D' && rx_command_buffer[1] == 'A' && rx_command_buffer[2] == 'C')
 8007928:	4b08      	ldr	r3, [pc, #32]	; (800794c <CommandSearch+0x290>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b44      	cmp	r3, #68	; 0x44
 8007930:	d112      	bne.n	8007958 <CommandSearch+0x29c>
 8007932:	4b06      	ldr	r3, [pc, #24]	; (800794c <CommandSearch+0x290>)
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b41      	cmp	r3, #65	; 0x41
 800793a:	d10d      	bne.n	8007958 <CommandSearch+0x29c>
 800793c:	4b03      	ldr	r3, [pc, #12]	; (800794c <CommandSearch+0x290>)
 800793e:	789b      	ldrb	r3, [r3, #2]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b43      	cmp	r3, #67	; 0x43
 8007944:	d108      	bne.n	8007958 <CommandSearch+0x29c>
	{
		COMMAND_DIRECTION_ANTI_CLOCKWISE();
 8007946:	f000 f971 	bl	8007c2c <COMMAND_DIRECTION_ANTI_CLOCKWISE>
 800794a:	e057      	b.n	80079fc <CommandSearch+0x340>
 800794c:	20000038 	.word	0x20000038
 8007950:	20000138 	.word	0x20000138
 8007954:	20000130 	.word	0x20000130
	}
	//COMMAND MANUAL
	else if (rx_command_buffer[0] == 'M' && rx_command_buffer[1] == 'A' && rx_command_buffer[2] == 'N')
 8007958:	4b29      	ldr	r3, [pc, #164]	; (8007a00 <CommandSearch+0x344>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b4d      	cmp	r3, #77	; 0x4d
 8007960:	d127      	bne.n	80079b2 <CommandSearch+0x2f6>
 8007962:	4b27      	ldr	r3, [pc, #156]	; (8007a00 <CommandSearch+0x344>)
 8007964:	785b      	ldrb	r3, [r3, #1]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b41      	cmp	r3, #65	; 0x41
 800796a:	d122      	bne.n	80079b2 <CommandSearch+0x2f6>
 800796c:	4b24      	ldr	r3, [pc, #144]	; (8007a00 <CommandSearch+0x344>)
 800796e:	789b      	ldrb	r3, [r3, #2]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b4e      	cmp	r3, #78	; 0x4e
 8007974:	d11d      	bne.n	80079b2 <CommandSearch+0x2f6>
	{
		COMMAND_MANUAL(rx_command_buffer[4] == '0' ? STEP_DISABLE : STEP_ENABLE, rx_command_buffer[5] == '0' ? ANTICLOCKWISE : CLOCKWISE, rx_command_buffer[6] == '0' ? STEP_NOPULSE : STEP_PULSE);
 8007976:	4b22      	ldr	r3, [pc, #136]	; (8007a00 <CommandSearch+0x344>)
 8007978:	791b      	ldrb	r3, [r3, #4]
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b30      	cmp	r3, #48	; 0x30
 800797e:	bf0c      	ite	eq
 8007980:	2301      	moveq	r3, #1
 8007982:	2300      	movne	r3, #0
 8007984:	b2db      	uxtb	r3, r3
 8007986:	4618      	mov	r0, r3
 8007988:	4b1d      	ldr	r3, [pc, #116]	; (8007a00 <CommandSearch+0x344>)
 800798a:	795b      	ldrb	r3, [r3, #5]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b30      	cmp	r3, #48	; 0x30
 8007990:	bf0c      	ite	eq
 8007992:	2301      	moveq	r3, #1
 8007994:	2300      	movne	r3, #0
 8007996:	b2db      	uxtb	r3, r3
 8007998:	4619      	mov	r1, r3
 800799a:	4b19      	ldr	r3, [pc, #100]	; (8007a00 <CommandSearch+0x344>)
 800799c:	799b      	ldrb	r3, [r3, #6]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b30      	cmp	r3, #48	; 0x30
 80079a2:	bf0c      	ite	eq
 80079a4:	2301      	moveq	r3, #1
 80079a6:	2300      	movne	r3, #0
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	461a      	mov	r2, r3
 80079ac:	f000 f950 	bl	8007c50 <COMMAND_MANUAL>
 80079b0:	e024      	b.n	80079fc <CommandSearch+0x340>
	}
	//COMMAND CONFIRM SETTINGS
	else if (rx_command_buffer[0] == 'C' && rx_command_buffer[1] == 'F' && rx_command_buffer[2] == 'R')
 80079b2:	4b13      	ldr	r3, [pc, #76]	; (8007a00 <CommandSearch+0x344>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b43      	cmp	r3, #67	; 0x43
 80079ba:	d10c      	bne.n	80079d6 <CommandSearch+0x31a>
 80079bc:	4b10      	ldr	r3, [pc, #64]	; (8007a00 <CommandSearch+0x344>)
 80079be:	785b      	ldrb	r3, [r3, #1]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b46      	cmp	r3, #70	; 0x46
 80079c4:	d107      	bne.n	80079d6 <CommandSearch+0x31a>
 80079c6:	4b0e      	ldr	r3, [pc, #56]	; (8007a00 <CommandSearch+0x344>)
 80079c8:	789b      	ldrb	r3, [r3, #2]
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b52      	cmp	r3, #82	; 0x52
 80079ce:	d102      	bne.n	80079d6 <CommandSearch+0x31a>
	{
		COMMAND_CONFIRM_SETTINGS();
 80079d0:	f000 f968 	bl	8007ca4 <COMMAND_CONFIRM_SETTINGS>
 80079d4:	e012      	b.n	80079fc <CommandSearch+0x340>
	}
	//COMMAND CONNECTION TEST
	else if (rx_command_buffer[0] == 'T' && rx_command_buffer[1] == 'S' && rx_command_buffer[2] == 'T')
 80079d6:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <CommandSearch+0x344>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b54      	cmp	r3, #84	; 0x54
 80079de:	d10d      	bne.n	80079fc <CommandSearch+0x340>
 80079e0:	4b07      	ldr	r3, [pc, #28]	; (8007a00 <CommandSearch+0x344>)
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b53      	cmp	r3, #83	; 0x53
 80079e8:	d108      	bne.n	80079fc <CommandSearch+0x340>
 80079ea:	4b05      	ldr	r3, [pc, #20]	; (8007a00 <CommandSearch+0x344>)
 80079ec:	789b      	ldrb	r3, [r3, #2]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b54      	cmp	r3, #84	; 0x54
 80079f2:	d103      	bne.n	80079fc <CommandSearch+0x340>
	{
		COMMAND_CONNECTION_TEST();
 80079f4:	f000 f992 	bl	8007d1c <COMMAND_CONNECTION_TEST>
	}
}
 80079f8:	e000      	b.n	80079fc <CommandSearch+0x340>
		if (rx_command_buffer[4] == 'S' && rx_command_buffer[5] == 'T' && rx_command_buffer[6] == 'D')
 80079fa:	bf00      	nop
}
 80079fc:	bf00      	nop
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20000038 	.word	0x20000038

08007a04 <UART_RECEIVE_COMMAND>:

void UART_RECEIVE_COMMAND()
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
	for (uint8_t counter = 0; counter < __RECEIVE_BUFFER; counter++) //$ Arama.
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	71fb      	strb	r3, [r7, #7]
 8007a0e:	e023      	b.n	8007a58 <UART_RECEIVE_COMMAND+0x54>
	{
		if (rx_buffer[counter] == '$') //$ Bulundu.
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	4a1b      	ldr	r2, [pc, #108]	; (8007a80 <UART_RECEIVE_COMMAND+0x7c>)
 8007a14:	5cd3      	ldrb	r3, [r2, r3]
 8007a16:	2b24      	cmp	r3, #36	; 0x24
 8007a18:	d11b      	bne.n	8007a52 <UART_RECEIVE_COMMAND+0x4e>
			for (uint8_t counter2 = counter+1; counter2 < __RECEIVE_BUFFER; counter2++) //! Arama.
 8007a1a:	79fb      	ldrb	r3, [r7, #7]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	71bb      	strb	r3, [r7, #6]
 8007a20:	e014      	b.n	8007a4c <UART_RECEIVE_COMMAND+0x48>
			{
				if (rx_buffer[counter2] == '!')
 8007a22:	79bb      	ldrb	r3, [r7, #6]
 8007a24:	4a16      	ldr	r2, [pc, #88]	; (8007a80 <UART_RECEIVE_COMMAND+0x7c>)
 8007a26:	5cd3      	ldrb	r3, [r2, r3]
 8007a28:	2b21      	cmp	r3, #33	; 0x21
 8007a2a:	d10c      	bne.n	8007a46 <UART_RECEIVE_COMMAND+0x42>
				{
					StrCopyInSet((counter+1), (counter2-1));
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	79bb      	ldrb	r3, [r7, #6]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	4619      	mov	r1, r3
 8007a36:	4610      	mov	r0, r2
 8007a38:	f7ff fe16 	bl	8007668 <StrCopyInSet>
					CommandSearch();
 8007a3c:	f7ff fe3e 	bl	80076bc <CommandSearch>
					counter = counter2;
 8007a40:	79bb      	ldrb	r3, [r7, #6]
 8007a42:	71fb      	strb	r3, [r7, #7]
					break;
 8007a44:	e005      	b.n	8007a52 <UART_RECEIVE_COMMAND+0x4e>
			for (uint8_t counter2 = counter+1; counter2 < __RECEIVE_BUFFER; counter2++) //! Arama.
 8007a46:	79bb      	ldrb	r3, [r7, #6]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	71bb      	strb	r3, [r7, #6]
 8007a4c:	79bb      	ldrb	r3, [r7, #6]
 8007a4e:	2b0a      	cmp	r3, #10
 8007a50:	d9e7      	bls.n	8007a22 <UART_RECEIVE_COMMAND+0x1e>
	for (uint8_t counter = 0; counter < __RECEIVE_BUFFER; counter++) //$ Arama.
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	3301      	adds	r3, #1
 8007a56:	71fb      	strb	r3, [r7, #7]
 8007a58:	79fb      	ldrb	r3, [r7, #7]
 8007a5a:	2b0a      	cmp	r3, #10
 8007a5c:	d9d8      	bls.n	8007a10 <UART_RECEIVE_COMMAND+0xc>
				}
			}
	}

	for (uint8_t counter3 = 0; counter3 < __RECEIVE_BUFFER; counter3++)
 8007a5e:	2300      	movs	r3, #0
 8007a60:	717b      	strb	r3, [r7, #5]
 8007a62:	e006      	b.n	8007a72 <UART_RECEIVE_COMMAND+0x6e>
	{
		rx_buffer[counter3] = '\0';
 8007a64:	797b      	ldrb	r3, [r7, #5]
 8007a66:	4a06      	ldr	r2, [pc, #24]	; (8007a80 <UART_RECEIVE_COMMAND+0x7c>)
 8007a68:	2100      	movs	r1, #0
 8007a6a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t counter3 = 0; counter3 < __RECEIVE_BUFFER; counter3++)
 8007a6c:	797b      	ldrb	r3, [r7, #5]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	717b      	strb	r3, [r7, #5]
 8007a72:	797b      	ldrb	r3, [r7, #5]
 8007a74:	2b0a      	cmp	r3, #10
 8007a76:	d9f5      	bls.n	8007a64 <UART_RECEIVE_COMMAND+0x60>
	}
}
 8007a78:	bf00      	nop
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	2000002c 	.word	0x2000002c

08007a84 <MOD_CHANGE_STANDART_MODE>:
__weak void MOD_CHANGE_STANDART_MODE()
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
	stepCommand.Trigger = STEP_PASSIVE;
 8007a88:	4b04      	ldr	r3, [pc, #16]	; (8007a9c <MOD_CHANGE_STANDART_MODE+0x18>)
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	705a      	strb	r2, [r3, #1]
	stepCommand.Step_Mode = STANDART_MODE;
 8007a8e:	4b03      	ldr	r3, [pc, #12]	; (8007a9c <MOD_CHANGE_STANDART_MODE+0x18>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	701a      	strb	r2, [r3, #0]
	Step_Set_Enable();
 8007a94:	f7ff fd9e 	bl	80075d4 <Step_Set_Enable>
}
 8007a98:	bf00      	nop
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	20000138 	.word	0x20000138

08007aa0 <MOD_CHANGE_PULSE_TRIGGERED_STANDART_MODE>:
__weak void MOD_CHANGE_PULSE_TRIGGERED_STANDART_MODE()
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	af00      	add	r7, sp, #0
	stepCommand.Step_Mode = PULSE_TRIGGERED_STANDART_MODE;
 8007aa4:	4b03      	ldr	r3, [pc, #12]	; (8007ab4 <MOD_CHANGE_PULSE_TRIGGERED_STANDART_MODE+0x14>)
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	701a      	strb	r2, [r3, #0]
	Step_Set_Enable();
 8007aaa:	f7ff fd93 	bl	80075d4 <Step_Set_Enable>
}
 8007aae:	bf00      	nop
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000138 	.word	0x20000138

08007ab8 <MOD_CHANGE_LIMITED_ANGLE_MODE>:
__weak void MOD_CHANGE_LIMITED_ANGLE_MODE()
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	af00      	add	r7, sp, #0
	stepCommand.Trigger = STEP_PASSIVE;
 8007abc:	4b04      	ldr	r3, [pc, #16]	; (8007ad0 <MOD_CHANGE_LIMITED_ANGLE_MODE+0x18>)
 8007abe:	2201      	movs	r2, #1
 8007ac0:	705a      	strb	r2, [r3, #1]
	stepCommand.Step_Mode = LIMITED_ANGLE_MODE;
 8007ac2:	4b03      	ldr	r3, [pc, #12]	; (8007ad0 <MOD_CHANGE_LIMITED_ANGLE_MODE+0x18>)
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	701a      	strb	r2, [r3, #0]
	Step_Set_Enable();
 8007ac8:	f7ff fd84 	bl	80075d4 <Step_Set_Enable>
}
 8007acc:	bf00      	nop
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	20000138 	.word	0x20000138

08007ad4 <MOD_CHANGE_PULSE_TRIGGERED_LIMITED_ANGLE_MODE>:
__weak void MOD_CHANGE_PULSE_TRIGGERED_LIMITED_ANGLE_MODE()
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
	stepCommand.Step_Mode = PULSE_TRIGGERED_LIMITED_ANGLE_MODE;
 8007ad8:	4b03      	ldr	r3, [pc, #12]	; (8007ae8 <MOD_CHANGE_PULSE_TRIGGERED_LIMITED_ANGLE_MODE+0x14>)
 8007ada:	2203      	movs	r2, #3
 8007adc:	701a      	strb	r2, [r3, #0]
	Step_Set_Enable();
 8007ade:	f7ff fd79 	bl	80075d4 <Step_Set_Enable>
}
 8007ae2:	bf00      	nop
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000138 	.word	0x20000138

08007aec <MOD_CHANGE_ONE_DIRECTION_PULSE_TRIGGERED_LIMITED_ANGLE_MODE>:
__weak void MOD_CHANGE_ONE_DIRECTION_PULSE_TRIGGERED_LIMITED_ANGLE_MODE()
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	af00      	add	r7, sp, #0
	stepCommand.Step_Mode = ONE_DIRECTION_PULSE_TRIGGERED_LIMITED_ANGLE_MODE;
 8007af0:	4b03      	ldr	r3, [pc, #12]	; (8007b00 <MOD_CHANGE_ONE_DIRECTION_PULSE_TRIGGERED_LIMITED_ANGLE_MODE+0x14>)
 8007af2:	2204      	movs	r2, #4
 8007af4:	701a      	strb	r2, [r3, #0]
	Step_Set_Disable();
 8007af6:	f7ff fd85 	bl	8007604 <Step_Set_Disable>
}
 8007afa:	bf00      	nop
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	20000138 	.word	0x20000138

08007b04 <MOD_CHANGE_MANUEL_MODE>:
__weak void MOD_CHANGE_MANUEL_MODE()
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
	stepCommand.Step_Mode = MANUEL_MODE;
 8007b08:	4b03      	ldr	r3, [pc, #12]	; (8007b18 <MOD_CHANGE_MANUEL_MODE+0x14>)
 8007b0a:	2205      	movs	r2, #5
 8007b0c:	701a      	strb	r2, [r3, #0]
	Step_Set_Disable();
 8007b0e:	f7ff fd79 	bl	8007604 <Step_Set_Disable>
}
 8007b12:	bf00      	nop
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000138 	.word	0x20000138

08007b1c <MOD_CHANGE_CALIBRATION_MODE>:
__weak void MOD_CHANGE_CALIBRATION_MODE()
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
	stepCommand.Step_Mode = CALIBRATION_MODE;
 8007b20:	4b03      	ldr	r3, [pc, #12]	; (8007b30 <MOD_CHANGE_CALIBRATION_MODE+0x14>)
 8007b22:	2206      	movs	r2, #6
 8007b24:	701a      	strb	r2, [r3, #0]
	Step_Set_Enable();
 8007b26:	f7ff fd55 	bl	80075d4 <Step_Set_Enable>
}
 8007b2a:	bf00      	nop
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000138 	.word	0x20000138

08007b34 <MOD_CHANGE_PASSIVE_MODE>:
__weak void MOD_CHANGE_PASSIVE_MODE()
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
	stepCommand.Step_Mode = PASSIVE_MODE;
 8007b38:	4b03      	ldr	r3, [pc, #12]	; (8007b48 <MOD_CHANGE_PASSIVE_MODE+0x14>)
 8007b3a:	2207      	movs	r2, #7
 8007b3c:	701a      	strb	r2, [r3, #0]
	Step_Set_Disable();
 8007b3e:	f7ff fd61 	bl	8007604 <Step_Set_Disable>
}
 8007b42:	bf00      	nop
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000138 	.word	0x20000138

08007b4c <COMMAND_SPEED>:

__weak void COMMAND_SPEED(int speed)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
	stepCommand.delay = CalculateDelayToSpeed((uint16_t)speed);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 fae9 	bl	8008130 <CalculateDelayToSpeed>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	4b03      	ldr	r3, [pc, #12]	; (8007b70 <COMMAND_SPEED+0x24>)
 8007b64:	80da      	strh	r2, [r3, #6]
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	20000138 	.word	0x20000138

08007b74 <COMMAND_DEGREE>:
__weak void COMMAND_DEGREE(int degree)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	stepCommand.degree = degree;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	4b03      	ldr	r3, [pc, #12]	; (8007b90 <COMMAND_DEGREE+0x1c>)
 8007b82:	809a      	strh	r2, [r3, #4]
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	20000138 	.word	0x20000138

08007b94 <COMMAND_RUN>:
__weak void COMMAND_RUN()
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
	stepCommand.Trigger = STEP_ACTIVE;
 8007b98:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <COMMAND_RUN+0x38>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	705a      	strb	r2, [r3, #1]

	if(stepCommand.Step_Mode == MANUEL_MODE) Step_Set_Enable();
 8007b9e:	4b0b      	ldr	r3, [pc, #44]	; (8007bcc <COMMAND_RUN+0x38>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b05      	cmp	r3, #5
 8007ba6:	d101      	bne.n	8007bac <COMMAND_RUN+0x18>
 8007ba8:	f7ff fd14 	bl	80075d4 <Step_Set_Enable>
	if(stepCommand.Step_Mode == ONE_DIRECTION_PULSE_TRIGGERED_LIMITED_ANGLE_MODE)
 8007bac:	4b07      	ldr	r3, [pc, #28]	; (8007bcc <COMMAND_RUN+0x38>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d107      	bne.n	8007bc6 <COMMAND_RUN+0x32>
	{
		Step_Set_Enable();
 8007bb6:	f7ff fd0d 	bl	80075d4 <Step_Set_Enable>
		CompleteTurn = 0;
 8007bba:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <COMMAND_RUN+0x3c>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	701a      	strb	r2, [r3, #0]
		state.Step_Counter = 0;
 8007bc0:	4b04      	ldr	r3, [pc, #16]	; (8007bd4 <COMMAND_RUN+0x40>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]
	}
}
 8007bc6:	bf00      	nop
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000138 	.word	0x20000138
 8007bd0:	200004a0 	.word	0x200004a0
 8007bd4:	20000130 	.word	0x20000130

08007bd8 <COMMAND_STOP>:
__weak void COMMAND_STOP()
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	af00      	add	r7, sp, #0
	stepCommand.Trigger = STEP_PASSIVE;
 8007bdc:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <COMMAND_STOP+0x2c>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	705a      	strb	r2, [r3, #1]

	if(stepCommand.Step_Mode == MANUEL_MODE) Step_Set_Disable();
 8007be2:	4b08      	ldr	r3, [pc, #32]	; (8007c04 <COMMAND_STOP+0x2c>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b05      	cmp	r3, #5
 8007bea:	d101      	bne.n	8007bf0 <COMMAND_STOP+0x18>
 8007bec:	f7ff fd0a 	bl	8007604 <Step_Set_Disable>
	if(stepCommand.Step_Mode == ONE_DIRECTION_PULSE_TRIGGERED_LIMITED_ANGLE_MODE)
 8007bf0:	4b04      	ldr	r3, [pc, #16]	; (8007c04 <COMMAND_STOP+0x2c>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d101      	bne.n	8007bfe <COMMAND_STOP+0x26>
	{
		Step_Set_Disable();
 8007bfa:	f7ff fd03 	bl	8007604 <Step_Set_Disable>
	}
}
 8007bfe:	bf00      	nop
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	20000138 	.word	0x20000138

08007c08 <COMMAND_DIRECTION_CLOCKWISE>:
__weak void COMMAND_DIRECTION_CLOCKWISE()
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	af00      	add	r7, sp, #0
	stepCommand.Step_Direction = CLOCKWISE;
 8007c0c:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <COMMAND_DIRECTION_CLOCKWISE+0x1c>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	709a      	strb	r2, [r3, #2]
	ControlTurn = CLOCKWISE;
 8007c12:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <COMMAND_DIRECTION_CLOCKWISE+0x20>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
	Step_Set_Direction(CLOCKWISE);
 8007c18:	2000      	movs	r0, #0
 8007c1a:	f7ff fcb7 	bl	800758c <Step_Set_Direction>
}
 8007c1e:	bf00      	nop
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000138 	.word	0x20000138
 8007c28:	200004a1 	.word	0x200004a1

08007c2c <COMMAND_DIRECTION_ANTI_CLOCKWISE>:
__weak void COMMAND_DIRECTION_ANTI_CLOCKWISE()
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
	stepCommand.Step_Direction = ANTICLOCKWISE;
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <COMMAND_DIRECTION_ANTI_CLOCKWISE+0x1c>)
 8007c32:	2201      	movs	r2, #1
 8007c34:	709a      	strb	r2, [r3, #2]
	ControlTurn = ANTICLOCKWISE;
 8007c36:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <COMMAND_DIRECTION_ANTI_CLOCKWISE+0x20>)
 8007c38:	2201      	movs	r2, #1
 8007c3a:	701a      	strb	r2, [r3, #0]
	Step_Set_Direction(ANTICLOCKWISE);
 8007c3c:	2001      	movs	r0, #1
 8007c3e:	f7ff fca5 	bl	800758c <Step_Set_Direction>
}
 8007c42:	bf00      	nop
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20000138 	.word	0x20000138
 8007c4c:	200004a1 	.word	0x200004a1

08007c50 <COMMAND_MANUAL>:
__weak void COMMAND_MANUAL(Step_Enable enable, Step_Direction direction, Step_Pulse pulse)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	4603      	mov	r3, r0
 8007c58:	71fb      	strb	r3, [r7, #7]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	71bb      	strb	r3, [r7, #6]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	717b      	strb	r3, [r7, #5]
	stepCommand.manuelCommand.Enable = enable;
 8007c62:	4a0f      	ldr	r2, [pc, #60]	; (8007ca0 <COMMAND_MANUAL+0x50>)
 8007c64:	79fb      	ldrb	r3, [r7, #7]
 8007c66:	7213      	strb	r3, [r2, #8]
	stepCommand.manuelCommand.Direction = direction;
 8007c68:	4a0d      	ldr	r2, [pc, #52]	; (8007ca0 <COMMAND_MANUAL+0x50>)
 8007c6a:	79bb      	ldrb	r3, [r7, #6]
 8007c6c:	7253      	strb	r3, [r2, #9]
	stepCommand.manuelCommand.Pulse = pulse;
 8007c6e:	4a0c      	ldr	r2, [pc, #48]	; (8007ca0 <COMMAND_MANUAL+0x50>)
 8007c70:	797b      	ldrb	r3, [r7, #5]
 8007c72:	7293      	strb	r3, [r2, #10]

	if (enable == STEP_ENABLE)
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d107      	bne.n	8007c8a <COMMAND_MANUAL+0x3a>
	{
		Step_Set_Enable();
 8007c7a:	f7ff fcab 	bl	80075d4 <Step_Set_Enable>
		if (pulse == STEP_PULSE) Step_Send_Single_Pulse();
 8007c7e:	797b      	ldrb	r3, [r7, #5]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d104      	bne.n	8007c8e <COMMAND_MANUAL+0x3e>
 8007c84:	f7ff fc3a 	bl	80074fc <Step_Send_Single_Pulse>
 8007c88:	e001      	b.n	8007c8e <COMMAND_MANUAL+0x3e>
	}
	else Step_Set_Disable();
 8007c8a:	f7ff fcbb 	bl	8007604 <Step_Set_Disable>

	Step_Set_Direction(direction);
 8007c8e:	79bb      	ldrb	r3, [r7, #6]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7ff fc7b 	bl	800758c <Step_Set_Direction>
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000138 	.word	0x20000138

08007ca4 <COMMAND_CONFIRM_SETTINGS>:
__weak void COMMAND_CONFIRM_SETTINGS()
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0
	switch(stepCommand.Step_Mode)
 8007ca8:	4b19      	ldr	r3, [pc, #100]	; (8007d10 <COMMAND_CONFIRM_SETTINGS+0x6c>)
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b07      	cmp	r3, #7
 8007cb0:	d829      	bhi.n	8007d06 <COMMAND_CONFIRM_SETTINGS+0x62>
 8007cb2:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <COMMAND_CONFIRM_SETTINGS+0x14>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007cd9 	.word	0x08007cd9
 8007cbc:	08007d05 	.word	0x08007d05
 8007cc0:	08007ce1 	.word	0x08007ce1
 8007cc4:	08007cef 	.word	0x08007cef
 8007cc8:	08007cfd 	.word	0x08007cfd
 8007ccc:	08007d05 	.word	0x08007d05
 8007cd0:	08007d05 	.word	0x08007d05
 8007cd4:	08007d05 	.word	0x08007d05
		case PASSIVE_MODE:
			break;
		case CALIBRATION_MODE:
			break;
		case STANDART_MODE:
			stepCommand.Trigger = STEP_ACTIVE;
 8007cd8:	4b0d      	ldr	r3, [pc, #52]	; (8007d10 <COMMAND_CONFIRM_SETTINGS+0x6c>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	705a      	strb	r2, [r3, #1]
			break;
 8007cde:	e012      	b.n	8007d06 <COMMAND_CONFIRM_SETTINGS+0x62>
		case PULSE_TRIGGERED_STANDART_MODE:
			break;
		case LIMITED_ANGLE_MODE:
			stepCommand.Trigger = STEP_ACTIVE;
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <COMMAND_CONFIRM_SETTINGS+0x6c>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	705a      	strb	r2, [r3, #1]
			state.Step_Counter = 0;
 8007ce6:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <COMMAND_CONFIRM_SETTINGS+0x70>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
			break;
 8007cec:	e00b      	b.n	8007d06 <COMMAND_CONFIRM_SETTINGS+0x62>
		case PULSE_TRIGGERED_LIMITED_ANGLE_MODE:
			state.Step_Counter = 0;
 8007cee:	4b09      	ldr	r3, [pc, #36]	; (8007d14 <COMMAND_CONFIRM_SETTINGS+0x70>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	601a      	str	r2, [r3, #0]
			CompleteTurn = 0;
 8007cf4:	4b08      	ldr	r3, [pc, #32]	; (8007d18 <COMMAND_CONFIRM_SETTINGS+0x74>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	701a      	strb	r2, [r3, #0]
			break;
 8007cfa:	e004      	b.n	8007d06 <COMMAND_CONFIRM_SETTINGS+0x62>
		case ONE_DIRECTION_PULSE_TRIGGERED_LIMITED_ANGLE_MODE:
			state.Step_Counter = 0;
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <COMMAND_CONFIRM_SETTINGS+0x70>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	601a      	str	r2, [r3, #0]
			break;
 8007d02:	e000      	b.n	8007d06 <COMMAND_CONFIRM_SETTINGS+0x62>
			break;
 8007d04:	bf00      	nop
		case MANUEL_MODE:
			break;
		}
}
 8007d06:	bf00      	nop
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	20000138 	.word	0x20000138
 8007d14:	20000130 	.word	0x20000130
 8007d18:	200004a0 	.word	0x200004a0

08007d1c <COMMAND_CONNECTION_TEST>:
__weak void COMMAND_CONNECTION_TEST()
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8007d20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007d24:	4802      	ldr	r0, [pc, #8]	; (8007d30 <COMMAND_CONNECTION_TEST+0x14>)
 8007d26:	f7fa f961 	bl	8001fec <HAL_GPIO_TogglePin>
}
 8007d2a:	bf00      	nop
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	48000400 	.word	0x48000400

08007d34 <DEFAULT_SETTINGS>:
__weak void DEFAULT_SETTINGS()
{
 8007d34:	b480      	push	{r7}
 8007d36:	af00      	add	r7, sp, #0
	calibrationSettings.MAX_PULSE_HIGH_SIGNAL=50;
 8007d38:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <DEFAULT_SETTINGS+0x30>)
 8007d3a:	2232      	movs	r2, #50	; 0x32
 8007d3c:	805a      	strh	r2, [r3, #2]
	calibrationSettings.MAX_PULSE_DELAY=1000;
 8007d3e:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <DEFAULT_SETTINGS+0x30>)
 8007d40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d44:	801a      	strh	r2, [r3, #0]
	calibrationSettings.NUMBER_OF_SIGNALS_IN_FULL_TURN=200;
 8007d46:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <DEFAULT_SETTINGS+0x30>)
 8007d48:	22c8      	movs	r2, #200	; 0xc8
 8007d4a:	809a      	strh	r2, [r3, #4]
	calibrationSettings.NUMBER_OF_SIGNAL_IN_FULL_TURN_ENCODER=953; //ENCODERIN BİR TAM TURU 1200, STEPİN BİR TAM TURU 1400 ENCODER SİNYALİ
 8007d4c:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <DEFAULT_SETTINGS+0x30>)
 8007d4e:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007d52:	80da      	strh	r2, [r3, #6]

	stepCommand.Trigger = PASSIVE_MODE;
 8007d54:	4b04      	ldr	r3, [pc, #16]	; (8007d68 <DEFAULT_SETTINGS+0x34>)
 8007d56:	2207      	movs	r2, #7
 8007d58:	705a      	strb	r2, [r3, #1]
}
 8007d5a:	bf00      	nop
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	200004a4 	.word	0x200004a4
 8007d68:	20000138 	.word	0x20000138

08007d6c <STEP_MOTOR_CONTROL>:
///STEP MOTOR CONTROLLER
///PLEASE PUT IT IN AN ENDLESS LOOP
void STEP_MOTOR_CONTROL(void)
{
 8007d6c:	b598      	push	{r3, r4, r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
	switch(stepCommand.Step_Mode)
 8007d70:	4ba8      	ldr	r3, [pc, #672]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b07      	cmp	r3, #7
 8007d78:	f200 81cd 	bhi.w	8008116 <STEP_MOTOR_CONTROL+0x3aa>
 8007d7c:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <STEP_MOTOR_CONTROL+0x18>)
 8007d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d82:	bf00      	nop
 8007d84:	08007da5 	.word	0x08007da5
 8007d88:	08007da5 	.word	0x08007da5
 8007d8c:	08007dd3 	.word	0x08007dd3
 8007d90:	08007eab 	.word	0x08007eab
 8007d94:	0800806b 	.word	0x0800806b
 8007d98:	08008105 	.word	0x08008105
 8007d9c:	08008105 	.word	0x08008105
 8007da0:	08008105 	.word	0x08008105
			break;


		case STANDART_MODE:
		case PULSE_TRIGGERED_STANDART_MODE:
			if (stepCommand.Trigger == STEP_ACTIVE) Step_Send_Single_Pulse_With_DelayConfig(calibrationSettings.MAX_PULSE_HIGH_SIGNAL+5, calibrationSettings.MAX_PULSE_DELAY+stepCommand.delay);
 8007da4:	4b9b      	ldr	r3, [pc, #620]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007da6:	785b      	ldrb	r3, [r3, #1]
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f040 81ac 	bne.w	8008108 <STEP_MOTOR_CONTROL+0x39c>
 8007db0:	4b99      	ldr	r3, [pc, #612]	; (8008018 <STEP_MOTOR_CONTROL+0x2ac>)
 8007db2:	885b      	ldrh	r3, [r3, #2]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	3305      	adds	r3, #5
 8007db8:	b298      	uxth	r0, r3
 8007dba:	4b97      	ldr	r3, [pc, #604]	; (8008018 <STEP_MOTOR_CONTROL+0x2ac>)
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	4b94      	ldr	r3, [pc, #592]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007dc2:	88db      	ldrh	r3, [r3, #6]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	4413      	add	r3, r2
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	4619      	mov	r1, r3
 8007dcc:	f7ff fba0 	bl	8007510 <Step_Send_Single_Pulse_With_DelayConfig>
			break;
 8007dd0:	e19a      	b.n	8008108 <STEP_MOTOR_CONTROL+0x39c>


		case LIMITED_ANGLE_MODE:
			if (stepCommand.Step_Direction == CLOCKWISE)
 8007dd2:	4b90      	ldr	r3, [pc, #576]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007dd4:	789b      	ldrb	r3, [r3, #2]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d127      	bne.n	8007e2c <STEP_MOTOR_CONTROL+0xc0>
			{
				if ((state.Step_Counter == CalculateDegreeToPulse(stepCommand.degree)) && ControlTurn == CLOCKWISE)
 8007ddc:	4b8f      	ldr	r3, [pc, #572]	; (800801c <STEP_MOTOR_CONTROL+0x2b0>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	461c      	mov	r4, r3
 8007de2:	4b8c      	ldr	r3, [pc, #560]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007de4:	889b      	ldrh	r3, [r3, #4]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f9e3 	bl	80081b4 <CalculateDegreeToPulse>
 8007dee:	4603      	mov	r3, r0
 8007df0:	429c      	cmp	r4, r3
 8007df2:	d10b      	bne.n	8007e0c <STEP_MOTOR_CONTROL+0xa0>
 8007df4:	4b8a      	ldr	r3, [pc, #552]	; (8008020 <STEP_MOTOR_CONTROL+0x2b4>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d106      	bne.n	8007e0c <STEP_MOTOR_CONTROL+0xa0>
				{
					ControlTurn = ANTICLOCKWISE;
 8007dfe:	4b88      	ldr	r3, [pc, #544]	; (8008020 <STEP_MOTOR_CONTROL+0x2b4>)
 8007e00:	2201      	movs	r2, #1
 8007e02:	701a      	strb	r2, [r3, #0]
					Step_Set_Direction(ANTICLOCKWISE);
 8007e04:	2001      	movs	r0, #1
 8007e06:	f7ff fbc1 	bl	800758c <Step_Set_Direction>
 8007e0a:	e037      	b.n	8007e7c <STEP_MOTOR_CONTROL+0x110>
				}
				else if ((state.Step_Counter == 0) && ControlTurn == ANTICLOCKWISE)
 8007e0c:	4b83      	ldr	r3, [pc, #524]	; (800801c <STEP_MOTOR_CONTROL+0x2b0>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d133      	bne.n	8007e7c <STEP_MOTOR_CONTROL+0x110>
 8007e14:	4b82      	ldr	r3, [pc, #520]	; (8008020 <STEP_MOTOR_CONTROL+0x2b4>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d12e      	bne.n	8007e7c <STEP_MOTOR_CONTROL+0x110>
				{
					ControlTurn = CLOCKWISE;
 8007e1e:	4b80      	ldr	r3, [pc, #512]	; (8008020 <STEP_MOTOR_CONTROL+0x2b4>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	701a      	strb	r2, [r3, #0]
					Step_Set_Direction(CLOCKWISE);
 8007e24:	2000      	movs	r0, #0
 8007e26:	f7ff fbb1 	bl	800758c <Step_Set_Direction>
 8007e2a:	e027      	b.n	8007e7c <STEP_MOTOR_CONTROL+0x110>
				}
			}
			else
			{
				if ((state.Step_Counter == CalculateDegreeToPulse(stepCommand.degree)*-1) && ControlTurn == ANTICLOCKWISE)
 8007e2c:	4b7b      	ldr	r3, [pc, #492]	; (800801c <STEP_MOTOR_CONTROL+0x2b0>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	461c      	mov	r4, r3
 8007e32:	4b78      	ldr	r3, [pc, #480]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007e34:	889b      	ldrh	r3, [r3, #4]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 f9bb 	bl	80081b4 <CalculateDegreeToPulse>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	425b      	negs	r3, r3
 8007e42:	429c      	cmp	r4, r3
 8007e44:	d10b      	bne.n	8007e5e <STEP_MOTOR_CONTROL+0xf2>
 8007e46:	4b76      	ldr	r3, [pc, #472]	; (8008020 <STEP_MOTOR_CONTROL+0x2b4>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d106      	bne.n	8007e5e <STEP_MOTOR_CONTROL+0xf2>
				{
					ControlTurn = CLOCKWISE;
 8007e50:	4b73      	ldr	r3, [pc, #460]	; (8008020 <STEP_MOTOR_CONTROL+0x2b4>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	701a      	strb	r2, [r3, #0]
					Step_Set_Direction(CLOCKWISE);
 8007e56:	2000      	movs	r0, #0
 8007e58:	f7ff fb98 	bl	800758c <Step_Set_Direction>
 8007e5c:	e00e      	b.n	8007e7c <STEP_MOTOR_CONTROL+0x110>
				}
				else if ((state.Step_Counter == 0) && ControlTurn == CLOCKWISE)
 8007e5e:	4b6f      	ldr	r3, [pc, #444]	; (800801c <STEP_MOTOR_CONTROL+0x2b0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10a      	bne.n	8007e7c <STEP_MOTOR_CONTROL+0x110>
 8007e66:	4b6e      	ldr	r3, [pc, #440]	; (8008020 <STEP_MOTOR_CONTROL+0x2b4>)
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d105      	bne.n	8007e7c <STEP_MOTOR_CONTROL+0x110>
				{
					ControlTurn = ANTICLOCKWISE;
 8007e70:	4b6b      	ldr	r3, [pc, #428]	; (8008020 <STEP_MOTOR_CONTROL+0x2b4>)
 8007e72:	2201      	movs	r2, #1
 8007e74:	701a      	strb	r2, [r3, #0]
					Step_Set_Direction(ANTICLOCKWISE);
 8007e76:	2001      	movs	r0, #1
 8007e78:	f7ff fb88 	bl	800758c <Step_Set_Direction>
				}
			}
			if (stepCommand.Trigger == STEP_ACTIVE) Step_Send_Single_Pulse_With_DelayConfig(calibrationSettings.MAX_PULSE_HIGH_SIGNAL+5, calibrationSettings.MAX_PULSE_DELAY+stepCommand.delay);
 8007e7c:	4b65      	ldr	r3, [pc, #404]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007e7e:	785b      	ldrb	r3, [r3, #1]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f040 8142 	bne.w	800810c <STEP_MOTOR_CONTROL+0x3a0>
 8007e88:	4b63      	ldr	r3, [pc, #396]	; (8008018 <STEP_MOTOR_CONTROL+0x2ac>)
 8007e8a:	885b      	ldrh	r3, [r3, #2]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	3305      	adds	r3, #5
 8007e90:	b298      	uxth	r0, r3
 8007e92:	4b61      	ldr	r3, [pc, #388]	; (8008018 <STEP_MOTOR_CONTROL+0x2ac>)
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	4b5e      	ldr	r3, [pc, #376]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007e9a:	88db      	ldrh	r3, [r3, #6]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	4413      	add	r3, r2
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	f7ff fb34 	bl	8007510 <Step_Send_Single_Pulse_With_DelayConfig>
			break;
 8007ea8:	e130      	b.n	800810c <STEP_MOTOR_CONTROL+0x3a0>

		case PULSE_TRIGGERED_LIMITED_ANGLE_MODE:
			if (ControlTurn == CLOCKWISE)
 8007eaa:	4b5d      	ldr	r3, [pc, #372]	; (8008020 <STEP_MOTOR_CONTROL+0x2b4>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d16d      	bne.n	8007f90 <STEP_MOTOR_CONTROL+0x224>
			{
				if (stepCommand.Trigger == STEP_ACTIVE)
 8007eb4:	4b57      	ldr	r3, [pc, #348]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007eb6:	785b      	ldrb	r3, [r3, #1]
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d13c      	bne.n	8007f38 <STEP_MOTOR_CONTROL+0x1cc>
				{
					if (CompleteTurn == 0)
 8007ebe:	4b59      	ldr	r3, [pc, #356]	; (8008024 <STEP_MOTOR_CONTROL+0x2b8>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d133      	bne.n	8007f30 <STEP_MOTOR_CONTROL+0x1c4>
					{
						if (state.Step_Counter < CalculateDegreeToPulse(stepCommand.degree))
 8007ec8:	4b54      	ldr	r3, [pc, #336]	; (800801c <STEP_MOTOR_CONTROL+0x2b0>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	461c      	mov	r4, r3
 8007ece:	4b51      	ldr	r3, [pc, #324]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007ed0:	889b      	ldrh	r3, [r3, #4]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 f96d 	bl	80081b4 <CalculateDegreeToPulse>
 8007eda:	4603      	mov	r3, r0
 8007edc:	429c      	cmp	r4, r3
 8007ede:	d213      	bcs.n	8007f08 <STEP_MOTOR_CONTROL+0x19c>
						{
							Step_Set_Direction(CLOCKWISE);
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	f7ff fb53 	bl	800758c <Step_Set_Direction>
							Step_Send_Single_Pulse_With_DelayConfig(calibrationSettings.MAX_PULSE_HIGH_SIGNAL+5, calibrationSettings.MAX_PULSE_DELAY+stepCommand.delay);
 8007ee6:	4b4c      	ldr	r3, [pc, #304]	; (8008018 <STEP_MOTOR_CONTROL+0x2ac>)
 8007ee8:	885b      	ldrh	r3, [r3, #2]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	3305      	adds	r3, #5
 8007eee:	b298      	uxth	r0, r3
 8007ef0:	4b49      	ldr	r3, [pc, #292]	; (8008018 <STEP_MOTOR_CONTROL+0x2ac>)
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	4b47      	ldr	r3, [pc, #284]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007ef8:	88db      	ldrh	r3, [r3, #6]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	4413      	add	r3, r2
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	4619      	mov	r1, r3
 8007f02:	f7ff fb05 	bl	8007510 <Step_Send_Single_Pulse_With_DelayConfig>
						Step_Set_Direction(CLOCKWISE);
						Step_Send_Single_Pulse_With_DelayConfig(calibrationSettings.MAX_PULSE_HIGH_SIGNAL+5, calibrationSettings.MAX_PULSE_DELAY+stepCommand.delay);
					}
				}
			}
			break;
 8007f06:	e103      	b.n	8008110 <STEP_MOTOR_CONTROL+0x3a4>
						else if(state.Step_Counter == CalculateDegreeToPulse(stepCommand.degree))
 8007f08:	4b44      	ldr	r3, [pc, #272]	; (800801c <STEP_MOTOR_CONTROL+0x2b0>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	461c      	mov	r4, r3
 8007f0e:	4b41      	ldr	r3, [pc, #260]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007f10:	889b      	ldrh	r3, [r3, #4]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 f94d 	bl	80081b4 <CalculateDegreeToPulse>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	429c      	cmp	r4, r3
 8007f1e:	f040 80f7 	bne.w	8008110 <STEP_MOTOR_CONTROL+0x3a4>
							CompleteTurn = 1;
 8007f22:	4b40      	ldr	r3, [pc, #256]	; (8008024 <STEP_MOTOR_CONTROL+0x2b8>)
 8007f24:	2201      	movs	r2, #1
 8007f26:	701a      	strb	r2, [r3, #0]
							Step_Set_Direction(ANTICLOCKWISE);
 8007f28:	2001      	movs	r0, #1
 8007f2a:	f7ff fb2f 	bl	800758c <Step_Set_Direction>
			break;
 8007f2e:	e0ef      	b.n	8008110 <STEP_MOTOR_CONTROL+0x3a4>
						CompleteTurn = 0;
 8007f30:	4b3c      	ldr	r3, [pc, #240]	; (8008024 <STEP_MOTOR_CONTROL+0x2b8>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	701a      	strb	r2, [r3, #0]
			break;
 8007f36:	e0eb      	b.n	8008110 <STEP_MOTOR_CONTROL+0x3a4>
					if(state.Step_Counter == 0)
 8007f38:	4b38      	ldr	r3, [pc, #224]	; (800801c <STEP_MOTOR_CONTROL+0x2b0>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d106      	bne.n	8007f4e <STEP_MOTOR_CONTROL+0x1e2>
						CompleteTurn = 0;
 8007f40:	4b38      	ldr	r3, [pc, #224]	; (8008024 <STEP_MOTOR_CONTROL+0x2b8>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	701a      	strb	r2, [r3, #0]
						Step_Set_Direction(CLOCKWISE);
 8007f46:	2000      	movs	r0, #0
 8007f48:	f7ff fb20 	bl	800758c <Step_Set_Direction>
			break;
 8007f4c:	e0e0      	b.n	8008110 <STEP_MOTOR_CONTROL+0x3a4>
					else if (state.Step_Counter <= CalculateDegreeToPulse(stepCommand.degree))
 8007f4e:	4b33      	ldr	r3, [pc, #204]	; (800801c <STEP_MOTOR_CONTROL+0x2b0>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	461c      	mov	r4, r3
 8007f54:	4b2f      	ldr	r3, [pc, #188]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007f56:	889b      	ldrh	r3, [r3, #4]
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 f92a 	bl	80081b4 <CalculateDegreeToPulse>
 8007f60:	4603      	mov	r3, r0
 8007f62:	429c      	cmp	r4, r3
 8007f64:	f200 80d4 	bhi.w	8008110 <STEP_MOTOR_CONTROL+0x3a4>
						Step_Set_Direction(ANTICLOCKWISE);
 8007f68:	2001      	movs	r0, #1
 8007f6a:	f7ff fb0f 	bl	800758c <Step_Set_Direction>
						Step_Send_Single_Pulse_With_DelayConfig(calibrationSettings.MAX_PULSE_HIGH_SIGNAL+5, calibrationSettings.MAX_PULSE_DELAY+stepCommand.delay);
 8007f6e:	4b2a      	ldr	r3, [pc, #168]	; (8008018 <STEP_MOTOR_CONTROL+0x2ac>)
 8007f70:	885b      	ldrh	r3, [r3, #2]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	3305      	adds	r3, #5
 8007f76:	b298      	uxth	r0, r3
 8007f78:	4b27      	ldr	r3, [pc, #156]	; (8008018 <STEP_MOTOR_CONTROL+0x2ac>)
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	4b25      	ldr	r3, [pc, #148]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007f80:	88db      	ldrh	r3, [r3, #6]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	4413      	add	r3, r2
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	4619      	mov	r1, r3
 8007f8a:	f7ff fac1 	bl	8007510 <Step_Send_Single_Pulse_With_DelayConfig>
			break;
 8007f8e:	e0bf      	b.n	8008110 <STEP_MOTOR_CONTROL+0x3a4>
				if (stepCommand.Trigger == STEP_ACTIVE)
 8007f90:	4b20      	ldr	r3, [pc, #128]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007f92:	785b      	ldrb	r3, [r3, #1]
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d130      	bne.n	8007ffc <STEP_MOTOR_CONTROL+0x290>
					if (CompleteTurn == 0)
 8007f9a:	4b22      	ldr	r3, [pc, #136]	; (8008024 <STEP_MOTOR_CONTROL+0x2b8>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d127      	bne.n	8007ff4 <STEP_MOTOR_CONTROL+0x288>
						if(state.Step_Counter == CalculateDegreeToPulse(stepCommand.degree)*-1)
 8007fa4:	4b1d      	ldr	r3, [pc, #116]	; (800801c <STEP_MOTOR_CONTROL+0x2b0>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	461c      	mov	r4, r3
 8007faa:	4b1a      	ldr	r3, [pc, #104]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007fac:	889b      	ldrh	r3, [r3, #4]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 f8ff 	bl	80081b4 <CalculateDegreeToPulse>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	425b      	negs	r3, r3
 8007fba:	429c      	cmp	r4, r3
 8007fbc:	d106      	bne.n	8007fcc <STEP_MOTOR_CONTROL+0x260>
							CompleteTurn = 1;
 8007fbe:	4b19      	ldr	r3, [pc, #100]	; (8008024 <STEP_MOTOR_CONTROL+0x2b8>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	701a      	strb	r2, [r3, #0]
							Step_Set_Direction(CLOCKWISE);
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	f7ff fae1 	bl	800758c <Step_Set_Direction>
			break;
 8007fca:	e0a1      	b.n	8008110 <STEP_MOTOR_CONTROL+0x3a4>
							Step_Set_Direction(ANTICLOCKWISE);
 8007fcc:	2001      	movs	r0, #1
 8007fce:	f7ff fadd 	bl	800758c <Step_Set_Direction>
							Step_Send_Single_Pulse_With_DelayConfig(calibrationSettings.MAX_PULSE_HIGH_SIGNAL+5, calibrationSettings.MAX_PULSE_DELAY+stepCommand.delay);
 8007fd2:	4b11      	ldr	r3, [pc, #68]	; (8008018 <STEP_MOTOR_CONTROL+0x2ac>)
 8007fd4:	885b      	ldrh	r3, [r3, #2]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	3305      	adds	r3, #5
 8007fda:	b298      	uxth	r0, r3
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <STEP_MOTOR_CONTROL+0x2ac>)
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	4b0c      	ldr	r3, [pc, #48]	; (8008014 <STEP_MOTOR_CONTROL+0x2a8>)
 8007fe4:	88db      	ldrh	r3, [r3, #6]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	4413      	add	r3, r2
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	4619      	mov	r1, r3
 8007fee:	f7ff fa8f 	bl	8007510 <Step_Send_Single_Pulse_With_DelayConfig>
			break;
 8007ff2:	e08d      	b.n	8008110 <STEP_MOTOR_CONTROL+0x3a4>
						CompleteTurn = 0;
 8007ff4:	4b0b      	ldr	r3, [pc, #44]	; (8008024 <STEP_MOTOR_CONTROL+0x2b8>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
			break;
 8007ffa:	e089      	b.n	8008110 <STEP_MOTOR_CONTROL+0x3a4>
					if(state.Step_Counter == 0)
 8007ffc:	4b07      	ldr	r3, [pc, #28]	; (800801c <STEP_MOTOR_CONTROL+0x2b0>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d111      	bne.n	8008028 <STEP_MOTOR_CONTROL+0x2bc>
						CompleteTurn = 0;
 8008004:	4b07      	ldr	r3, [pc, #28]	; (8008024 <STEP_MOTOR_CONTROL+0x2b8>)
 8008006:	2200      	movs	r2, #0
 8008008:	701a      	strb	r2, [r3, #0]
						Step_Set_Direction(ANTICLOCKWISE);
 800800a:	2001      	movs	r0, #1
 800800c:	f7ff fabe 	bl	800758c <Step_Set_Direction>
			break;
 8008010:	e07e      	b.n	8008110 <STEP_MOTOR_CONTROL+0x3a4>
 8008012:	bf00      	nop
 8008014:	20000138 	.word	0x20000138
 8008018:	200004a4 	.word	0x200004a4
 800801c:	20000130 	.word	0x20000130
 8008020:	200004a1 	.word	0x200004a1
 8008024:	200004a0 	.word	0x200004a0
					else if (state.Step_Counter >= CalculateDegreeToPulse(stepCommand.degree)*-1)
 8008028:	4b3c      	ldr	r3, [pc, #240]	; (800811c <STEP_MOTOR_CONTROL+0x3b0>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	461c      	mov	r4, r3
 800802e:	4b3c      	ldr	r3, [pc, #240]	; (8008120 <STEP_MOTOR_CONTROL+0x3b4>)
 8008030:	889b      	ldrh	r3, [r3, #4]
 8008032:	b29b      	uxth	r3, r3
 8008034:	4618      	mov	r0, r3
 8008036:	f000 f8bd 	bl	80081b4 <CalculateDegreeToPulse>
 800803a:	4603      	mov	r3, r0
 800803c:	425b      	negs	r3, r3
 800803e:	429c      	cmp	r4, r3
 8008040:	d366      	bcc.n	8008110 <STEP_MOTOR_CONTROL+0x3a4>
						Step_Set_Direction(CLOCKWISE);
 8008042:	2000      	movs	r0, #0
 8008044:	f7ff faa2 	bl	800758c <Step_Set_Direction>
						Step_Send_Single_Pulse_With_DelayConfig(calibrationSettings.MAX_PULSE_HIGH_SIGNAL+5, calibrationSettings.MAX_PULSE_DELAY+stepCommand.delay);
 8008048:	4b36      	ldr	r3, [pc, #216]	; (8008124 <STEP_MOTOR_CONTROL+0x3b8>)
 800804a:	885b      	ldrh	r3, [r3, #2]
 800804c:	b29b      	uxth	r3, r3
 800804e:	3305      	adds	r3, #5
 8008050:	b298      	uxth	r0, r3
 8008052:	4b34      	ldr	r3, [pc, #208]	; (8008124 <STEP_MOTOR_CONTROL+0x3b8>)
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29a      	uxth	r2, r3
 8008058:	4b31      	ldr	r3, [pc, #196]	; (8008120 <STEP_MOTOR_CONTROL+0x3b4>)
 800805a:	88db      	ldrh	r3, [r3, #6]
 800805c:	b29b      	uxth	r3, r3
 800805e:	4413      	add	r3, r2
 8008060:	b29b      	uxth	r3, r3
 8008062:	4619      	mov	r1, r3
 8008064:	f7ff fa54 	bl	8007510 <Step_Send_Single_Pulse_With_DelayConfig>
			break;
 8008068:	e052      	b.n	8008110 <STEP_MOTOR_CONTROL+0x3a4>


		case ONE_DIRECTION_PULSE_TRIGGERED_LIMITED_ANGLE_MODE:

			if (CompleteTurn == 0) //HEDEFE ULAŞILMADI İSE
 800806a:	4b2f      	ldr	r3, [pc, #188]	; (8008128 <STEP_MOTOR_CONTROL+0x3bc>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b00      	cmp	r3, #0
 8008072:	d14f      	bne.n	8008114 <STEP_MOTOR_CONTROL+0x3a8>
			{
				if (ControlTurn == CLOCKWISE)
 8008074:	4b2d      	ldr	r3, [pc, #180]	; (800812c <STEP_MOTOR_CONTROL+0x3c0>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b00      	cmp	r3, #0
 800807c:	d120      	bne.n	80080c0 <STEP_MOTOR_CONTROL+0x354>
				{
					if(state.Step_Counter == CalculateDegreeToPulse(stepCommand.degree))
 800807e:	4b27      	ldr	r3, [pc, #156]	; (800811c <STEP_MOTOR_CONTROL+0x3b0>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	461c      	mov	r4, r3
 8008084:	4b26      	ldr	r3, [pc, #152]	; (8008120 <STEP_MOTOR_CONTROL+0x3b4>)
 8008086:	889b      	ldrh	r3, [r3, #4]
 8008088:	b29b      	uxth	r3, r3
 800808a:	4618      	mov	r0, r3
 800808c:	f000 f892 	bl	80081b4 <CalculateDegreeToPulse>
 8008090:	4603      	mov	r3, r0
 8008092:	429c      	cmp	r4, r3
 8008094:	d103      	bne.n	800809e <STEP_MOTOR_CONTROL+0x332>
					{
						CompleteTurn = 1;
 8008096:	4b24      	ldr	r3, [pc, #144]	; (8008128 <STEP_MOTOR_CONTROL+0x3bc>)
 8008098:	2201      	movs	r2, #1
 800809a:	701a      	strb	r2, [r3, #0]
					{
						Step_Send_Single_Pulse_With_DelayConfig(calibrationSettings.MAX_PULSE_HIGH_SIGNAL+5, calibrationSettings.MAX_PULSE_DELAY+stepCommand.delay);
					}
				}
			}
			break;
 800809c:	e03a      	b.n	8008114 <STEP_MOTOR_CONTROL+0x3a8>
						Step_Send_Single_Pulse_With_DelayConfig(calibrationSettings.MAX_PULSE_HIGH_SIGNAL+5, calibrationSettings.MAX_PULSE_DELAY+stepCommand.delay);
 800809e:	4b21      	ldr	r3, [pc, #132]	; (8008124 <STEP_MOTOR_CONTROL+0x3b8>)
 80080a0:	885b      	ldrh	r3, [r3, #2]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	3305      	adds	r3, #5
 80080a6:	b298      	uxth	r0, r3
 80080a8:	4b1e      	ldr	r3, [pc, #120]	; (8008124 <STEP_MOTOR_CONTROL+0x3b8>)
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	4b1c      	ldr	r3, [pc, #112]	; (8008120 <STEP_MOTOR_CONTROL+0x3b4>)
 80080b0:	88db      	ldrh	r3, [r3, #6]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	4413      	add	r3, r2
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	4619      	mov	r1, r3
 80080ba:	f7ff fa29 	bl	8007510 <Step_Send_Single_Pulse_With_DelayConfig>
			break;
 80080be:	e029      	b.n	8008114 <STEP_MOTOR_CONTROL+0x3a8>
					if(state.Step_Counter == CalculateDegreeToPulse(stepCommand.degree)*-1)
 80080c0:	4b16      	ldr	r3, [pc, #88]	; (800811c <STEP_MOTOR_CONTROL+0x3b0>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	461c      	mov	r4, r3
 80080c6:	4b16      	ldr	r3, [pc, #88]	; (8008120 <STEP_MOTOR_CONTROL+0x3b4>)
 80080c8:	889b      	ldrh	r3, [r3, #4]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 f871 	bl	80081b4 <CalculateDegreeToPulse>
 80080d2:	4603      	mov	r3, r0
 80080d4:	425b      	negs	r3, r3
 80080d6:	429c      	cmp	r4, r3
 80080d8:	d103      	bne.n	80080e2 <STEP_MOTOR_CONTROL+0x376>
						CompleteTurn = 1;
 80080da:	4b13      	ldr	r3, [pc, #76]	; (8008128 <STEP_MOTOR_CONTROL+0x3bc>)
 80080dc:	2201      	movs	r2, #1
 80080de:	701a      	strb	r2, [r3, #0]
			break;
 80080e0:	e018      	b.n	8008114 <STEP_MOTOR_CONTROL+0x3a8>
						Step_Send_Single_Pulse_With_DelayConfig(calibrationSettings.MAX_PULSE_HIGH_SIGNAL+5, calibrationSettings.MAX_PULSE_DELAY+stepCommand.delay);
 80080e2:	4b10      	ldr	r3, [pc, #64]	; (8008124 <STEP_MOTOR_CONTROL+0x3b8>)
 80080e4:	885b      	ldrh	r3, [r3, #2]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3305      	adds	r3, #5
 80080ea:	b298      	uxth	r0, r3
 80080ec:	4b0d      	ldr	r3, [pc, #52]	; (8008124 <STEP_MOTOR_CONTROL+0x3b8>)
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <STEP_MOTOR_CONTROL+0x3b4>)
 80080f4:	88db      	ldrh	r3, [r3, #6]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	4413      	add	r3, r2
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	4619      	mov	r1, r3
 80080fe:	f7ff fa07 	bl	8007510 <Step_Send_Single_Pulse_With_DelayConfig>
			break;
 8008102:	e007      	b.n	8008114 <STEP_MOTOR_CONTROL+0x3a8>

		case MANUEL_MODE:
			break;
 8008104:	bf00      	nop
 8008106:	e006      	b.n	8008116 <STEP_MOTOR_CONTROL+0x3aa>
			break;
 8008108:	bf00      	nop
 800810a:	e004      	b.n	8008116 <STEP_MOTOR_CONTROL+0x3aa>
			break;
 800810c:	bf00      	nop
 800810e:	e002      	b.n	8008116 <STEP_MOTOR_CONTROL+0x3aa>
			break;
 8008110:	bf00      	nop
 8008112:	e000      	b.n	8008116 <STEP_MOTOR_CONTROL+0x3aa>
			break;
 8008114:	bf00      	nop


		}
}
 8008116:	bf00      	nop
 8008118:	bd98      	pop	{r3, r4, r7, pc}
 800811a:	bf00      	nop
 800811c:	20000130 	.word	0x20000130
 8008120:	20000138 	.word	0x20000138
 8008124:	200004a4 	.word	0x200004a4
 8008128:	200004a0 	.word	0x200004a0
 800812c:	200004a1 	.word	0x200004a1

08008130 <CalculateDelayToSpeed>:
uint32_t CalculateDelayToSpeed(uint8_t speed)
{
 8008130:	b590      	push	{r4, r7, lr}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	71fb      	strb	r3, [r7, #7]
	double delay = (60.0/(double)speed)*1000;
 800813a:	79fb      	ldrb	r3, [r7, #7]
 800813c:	4618      	mov	r0, r3
 800813e:	f7f8 f98b 	bl	8000458 <__aeabi_ui2d>
 8008142:	4603      	mov	r3, r0
 8008144:	460c      	mov	r4, r1
 8008146:	461a      	mov	r2, r3
 8008148:	4623      	mov	r3, r4
 800814a:	f04f 0000 	mov.w	r0, #0
 800814e:	4916      	ldr	r1, [pc, #88]	; (80081a8 <CalculateDelayToSpeed+0x78>)
 8008150:	f7f8 fb26 	bl	80007a0 <__aeabi_ddiv>
 8008154:	4603      	mov	r3, r0
 8008156:	460c      	mov	r4, r1
 8008158:	4618      	mov	r0, r3
 800815a:	4621      	mov	r1, r4
 800815c:	f04f 0200 	mov.w	r2, #0
 8008160:	4b12      	ldr	r3, [pc, #72]	; (80081ac <CalculateDelayToSpeed+0x7c>)
 8008162:	f7f8 f9f3 	bl	800054c <__aeabi_dmul>
 8008166:	4603      	mov	r3, r0
 8008168:	460c      	mov	r4, r1
 800816a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	delay -= calibrationSettings.MAX_PULSE_DELAY;
 800816e:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <CalculateDelayToSpeed+0x80>)
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	b29b      	uxth	r3, r3
 8008174:	4618      	mov	r0, r3
 8008176:	f7f8 f97f 	bl	8000478 <__aeabi_i2d>
 800817a:	4603      	mov	r3, r0
 800817c:	460c      	mov	r4, r1
 800817e:	461a      	mov	r2, r3
 8008180:	4623      	mov	r3, r4
 8008182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008186:	f7f8 f829 	bl	80001dc <__aeabi_dsub>
 800818a:	4603      	mov	r3, r0
 800818c:	460c      	mov	r4, r1
 800818e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return (uint16_t)delay;
 8008192:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008196:	f7f8 fbeb 	bl	8000970 <__aeabi_d2uiz>
 800819a:	4603      	mov	r3, r0
 800819c:	b29b      	uxth	r3, r3
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd90      	pop	{r4, r7, pc}
 80081a6:	bf00      	nop
 80081a8:	404e0000 	.word	0x404e0000
 80081ac:	408f4000 	.word	0x408f4000
 80081b0:	200004a4 	.word	0x200004a4

080081b4 <CalculateDegreeToPulse>:

uint32_t CalculateDegreeToPulse(uint16_t degree)
{
 80081b4:	b5b0      	push	{r4, r5, r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4603      	mov	r3, r0
 80081bc:	80fb      	strh	r3, [r7, #6]
	uint32_t a = (uint32_t)((calibrationSettings.NUMBER_OF_SIGNALS_IN_FULL_TURN/360.0)*(double)degree);
 80081be:	4b13      	ldr	r3, [pc, #76]	; (800820c <CalculateDegreeToPulse+0x58>)
 80081c0:	889b      	ldrh	r3, [r3, #4]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7f8 f957 	bl	8000478 <__aeabi_i2d>
 80081ca:	f04f 0200 	mov.w	r2, #0
 80081ce:	4b10      	ldr	r3, [pc, #64]	; (8008210 <CalculateDegreeToPulse+0x5c>)
 80081d0:	f7f8 fae6 	bl	80007a0 <__aeabi_ddiv>
 80081d4:	4603      	mov	r3, r0
 80081d6:	460c      	mov	r4, r1
 80081d8:	4625      	mov	r5, r4
 80081da:	461c      	mov	r4, r3
 80081dc:	88fb      	ldrh	r3, [r7, #6]
 80081de:	4618      	mov	r0, r3
 80081e0:	f7f8 f93a 	bl	8000458 <__aeabi_ui2d>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4620      	mov	r0, r4
 80081ea:	4629      	mov	r1, r5
 80081ec:	f7f8 f9ae 	bl	800054c <__aeabi_dmul>
 80081f0:	4603      	mov	r3, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	4618      	mov	r0, r3
 80081f6:	4621      	mov	r1, r4
 80081f8:	f7f8 fbba 	bl	8000970 <__aeabi_d2uiz>
 80081fc:	4603      	mov	r3, r0
 80081fe:	60fb      	str	r3, [r7, #12]
	return a;
 8008200:	68fb      	ldr	r3, [r7, #12]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bdb0      	pop	{r4, r5, r7, pc}
 800820a:	bf00      	nop
 800820c:	200004a4 	.word	0x200004a4
 8008210:	40768000 	.word	0x40768000

08008214 <__libc_init_array>:
 8008214:	b570      	push	{r4, r5, r6, lr}
 8008216:	4e0d      	ldr	r6, [pc, #52]	; (800824c <__libc_init_array+0x38>)
 8008218:	4c0d      	ldr	r4, [pc, #52]	; (8008250 <__libc_init_array+0x3c>)
 800821a:	1ba4      	subs	r4, r4, r6
 800821c:	10a4      	asrs	r4, r4, #2
 800821e:	2500      	movs	r5, #0
 8008220:	42a5      	cmp	r5, r4
 8008222:	d109      	bne.n	8008238 <__libc_init_array+0x24>
 8008224:	4e0b      	ldr	r6, [pc, #44]	; (8008254 <__libc_init_array+0x40>)
 8008226:	4c0c      	ldr	r4, [pc, #48]	; (8008258 <__libc_init_array+0x44>)
 8008228:	f000 f820 	bl	800826c <_init>
 800822c:	1ba4      	subs	r4, r4, r6
 800822e:	10a4      	asrs	r4, r4, #2
 8008230:	2500      	movs	r5, #0
 8008232:	42a5      	cmp	r5, r4
 8008234:	d105      	bne.n	8008242 <__libc_init_array+0x2e>
 8008236:	bd70      	pop	{r4, r5, r6, pc}
 8008238:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800823c:	4798      	blx	r3
 800823e:	3501      	adds	r5, #1
 8008240:	e7ee      	b.n	8008220 <__libc_init_array+0xc>
 8008242:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008246:	4798      	blx	r3
 8008248:	3501      	adds	r5, #1
 800824a:	e7f2      	b.n	8008232 <__libc_init_array+0x1e>
 800824c:	080082bc 	.word	0x080082bc
 8008250:	080082bc 	.word	0x080082bc
 8008254:	080082bc 	.word	0x080082bc
 8008258:	080082c0 	.word	0x080082c0

0800825c <memset>:
 800825c:	4402      	add	r2, r0
 800825e:	4603      	mov	r3, r0
 8008260:	4293      	cmp	r3, r2
 8008262:	d100      	bne.n	8008266 <memset+0xa>
 8008264:	4770      	bx	lr
 8008266:	f803 1b01 	strb.w	r1, [r3], #1
 800826a:	e7f9      	b.n	8008260 <memset+0x4>

0800826c <_init>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	bf00      	nop
 8008270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008272:	bc08      	pop	{r3}
 8008274:	469e      	mov	lr, r3
 8008276:	4770      	bx	lr

08008278 <_fini>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	bf00      	nop
 800827c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827e:	bc08      	pop	{r3}
 8008280:	469e      	mov	lr, r3
 8008282:	4770      	bx	lr
